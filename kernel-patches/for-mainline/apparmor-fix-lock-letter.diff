---
 security/apparmor/apparmorfs.c |    2 +-
 security/apparmor/main.c       |    4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

--- a/security/apparmor/apparmorfs.c
+++ b/security/apparmor/apparmorfs.c
@@ -89,7 +89,7 @@ static struct file_operations apparmorfs
 static ssize_t aa_matching_read(struct file *file, char __user *buf,
 			       size_t size, loff_t *ppos)
 {
-	const char *matching = "pattern=aadfa perms=rwxamlz user:other";
+	const char *matching = "pattern=aadfa perms=rwxamlk/ user:other";
 
 	return simple_read_from_buffer(buf, size, ppos, matching,
 				       strlen(matching));
--- a/security/apparmor/main.c
+++ b/security/apparmor/main.c
@@ -99,7 +99,7 @@ static int aa_link_denied(struct aa_prof
 	/* Link always requires 'l' on the link for both parts of the pair.
 	 * If a subset test is required a permission subset test of the
 	 * perms for the link are done against the user:group:other of the
-	 * target's 'r', 'w', 'x', 'a', 'z', and 'm' permissions.
+	 * target's 'r', 'w', 'x', 'a', 'k', and 'm' permissions.
 	 *
 	 * If the link has 'x', an exact match of all the execute flags
 	 * ('i', 'u', 'p').  safe exec is treated as a subset of unsafe exec
@@ -388,7 +388,7 @@ static int aa_audit_base(struct aa_profi
 		audit_log_format(ab, " info=\"%s\"", sa->info);
 
 	if (sa->request_mask)
-		aa_audit_file_mask(ab, "request_mask", sa->request_mask);
+		aa_audit_file_mask(ab, "requested_mask", sa->request_mask);
 
 	if (sa->denied_mask)
 		aa_audit_file_mask(ab, "denied_mask", sa->denied_mask);
