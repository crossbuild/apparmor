Don't use labels where easily avoidable.

Defining and initializing a variable at the same time is okay.

Rename struct task *p to <task>.

Index: linux-2.6/security/apparmor/lsm.c
===================================================================
--- linux-2.6.orig/security/apparmor/lsm.c
+++ linux-2.6/security/apparmor/lsm.c
@@ -66,12 +66,8 @@ MODULE_PARM_DESC(apparmor_logsyscall, "T
 static int apparmor_ptrace(struct task_struct *parent,
 			    struct task_struct *child)
 {
-	int error;
-	struct aaprofile *active;
-
-	error = cap_ptrace(parent, child);
-
-	active = get_task_active_aaprofile(parent);
+	struct aaprofile *active = get_task_active_aaprofile(parent);
+	int error = cap_ptrace(parent, child);
 
 	if (!error && active) {
 		error = aa_audit_syscallreject(active, GFP_KERNEL, "ptrace");
@@ -116,9 +112,7 @@ static int apparmor_capable(struct task_
 	error = cap_capable(tsk, cap);
 
 	if (error == 0) {
-		struct aaprofile *active;
-
-		active = get_task_active_aaprofile(tsk);
+		struct aaprofile *active = get_task_active_aaprofile(tsk);
 
 		if (active)
 			error = aa_capability(active, cap);
@@ -132,9 +126,7 @@ static int apparmor_capable(struct task_
 static int apparmor_sysctl(struct ctl_table *table, int op)
 {
 	int error = 0;
-	struct aaprofile *active;
-
-	active = get_active_aaprofile();
+	struct aaprofile *active = get_active_aaprofile();
 
 	if ((op & 002) && active && !capable(CAP_SYS_ADMIN)) {
 		error = aa_audit_syscallreject(active, GFP_KERNEL,
@@ -196,9 +188,7 @@ static int apparmor_sb_mount(char *dev_n
 			      unsigned long flags, void *data)
 {
 	int error = 0;
-	struct aaprofile *active;
-
-	active = get_active_aaprofile();
+	struct aaprofile *active = get_active_aaprofile();
 
 	if (active) {
 		error = aa_audit_syscallreject(active, GFP_KERNEL, "mount");
@@ -216,9 +206,7 @@ static int apparmor_sb_mount(char *dev_n
 static int apparmor_umount(struct vfsmount *mnt, int flags)
 {
 	int error = 0;
-	struct aaprofile *active;
-
-	active = get_active_aaprofile();
+	struct aaprofile *active = get_active_aaprofile();
 
 	if (active) {
 		error = aa_audit_syscallreject(active, GFP_ATOMIC, "umount");
@@ -235,60 +223,54 @@ static int apparmor_umount(struct vfsmou
 static int apparmor_inode_mkdir(struct inode *dir, struct dentry *dentry,
 				struct vfsmount *mnt, int mask)
 {
-	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || dir->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
-
-	active = get_active_aaprofile();
+	if (mnt && dir->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	if (active)
-		error = aa_perm_dir(active, dentry, mnt, "mkdir", AA_MAY_WRITE);
+		if (active)
+			error = aa_perm_dir(active, dentry, mnt, "mkdir",
+					    AA_MAY_WRITE);
 
-	put_aaprofile(active);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
 static int apparmor_inode_rmdir(struct inode *dir, struct dentry *dentry,
 				struct vfsmount *mnt)
 {
-	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || dir->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
-
-	active = get_active_aaprofile();
+	if (mnt && dir->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	if (active)
-		error = aa_perm_dir(active, dentry, mnt, "rmdir", AA_MAY_WRITE);
+		if (active)
+			error = aa_perm_dir(active, dentry, mnt, "rmdir",
+					    AA_MAY_WRITE);
 
-	put_aaprofile(active);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
 static int apparmor_inode_create(struct inode *inode, struct dentry *dentry,
 				 struct vfsmount *mnt, int mask)
 {
-	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt)
-		goto out;
+	if (mnt) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	active = get_active_aaprofile();
+		/* At a minimum, need write perm to create */
+		if (active)
+			error = aa_perm(active, dentry, mnt, MAY_WRITE);
 
-	/* At a minimum, need write perm to create */
-	if (active)
-		error = aa_perm(active, dentry, mnt, MAY_WRITE);
+		put_aaprofile(active);
+	}
 
-	put_aaprofile(active);
-out:
 	return error;
 }
 
@@ -298,20 +280,17 @@ static int apparmor_inode_link(struct de
 			       struct vfsmount *new_mnt)
 {
 	int error = 0;
-	struct aaprofile *active;
 
-	if (!old_mnt || !new_mnt || dir->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
+	if (old_mnt && new_mnt && dir->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	active = get_active_aaprofile();
-
-	if (active)
-		error = aa_link(active, new_dentry, new_mnt,
-				old_dentry, old_mnt);
+		if (active)
+			error = aa_link(active, new_dentry, new_mnt,
+					old_dentry, old_mnt);
 
-	put_aaprofile(active);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
@@ -319,40 +298,34 @@ static int apparmor_inode_unlink(struct 
 				 struct dentry *dentry,
 				 struct vfsmount *mnt)
 {
-	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || dentry->d_inode->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
+	if (mnt && dentry->d_inode->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	active = get_active_aaprofile();
-
-	if (active)
-		error = aa_perm(active, dentry, mnt, MAY_WRITE);
+		if (active)
+			error = aa_perm(active, dentry, mnt, MAY_WRITE);
 
-	put_aaprofile(active);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
 static int apparmor_inode_mknod(struct inode *dir, struct dentry *dentry,
 				struct vfsmount *mnt, int mode, dev_t dev)
 {
-	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || dir->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
-
-	active = get_active_aaprofile();
+	if (mnt && dir->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	if (active)
-		error = aa_perm(active, dentry, mnt, MAY_WRITE);
+		if (active)
+			error = aa_perm(active, dentry, mnt, MAY_WRITE);
 
-	put_aaprofile(active);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
@@ -397,9 +370,8 @@ static int apparmor_inode_permission(str
 	 * Same as apparmor_file_permission
 	 */
 	if (nd && inode->i_sb->s_security == AA_MEDIATE_FS) {
-		struct aaprofile *active;
+		struct aaprofile *active = get_active_aaprofile();
 
-		active = get_active_aaprofile();
 		if (active)
 			error = aa_perm(active, nd->dentry, nd->mnt, mask);
 		put_aaprofile(active);
@@ -412,23 +384,20 @@ static int apparmor_inode_setattr(struct
 				  struct iattr *iattr)
 {
 	int error = 0;
-	struct aaprofile *active;
-
-	if (!mnt || dentry->d_inode->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
 
-	active = get_active_aaprofile();
+	if (mnt && dentry->d_inode->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	/*
-	 * Mediate any attempt to change attributes of a file
-	 * (chmod, chown, chgrp, etc)
-	 */
-	if (active)
-		error = aa_attr(active, dentry, mnt, iattr);
+		/*
+		 * Mediate any attempt to change attributes of a file
+		 * (chmod, chown, chgrp, etc)
+		 */
+		if (active)
+			error = aa_attr(active, dentry, mnt, iattr);
 
-	put_aaprofile(active);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
@@ -437,18 +406,15 @@ static int apparmor_inode_setxattr(struc
 				   int flags)
 {
 	int error = 0;
-	struct aaprofile *active;
-
-	if (!mnt || dentry->d_inode->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
 
-	active = get_active_aaprofile();
-	if (active)
-		error = aa_perm_xattr(active, dentry, mnt, name, "xattr set",
-				      AA_MAY_WRITE);
-	put_aaprofile(active);
+	if (mnt && dentry->d_inode->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
+		if (active)
+			error = aa_perm_xattr(active, dentry, mnt, name,
+					      "xattr set", AA_MAY_WRITE);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
@@ -456,36 +422,31 @@ static int apparmor_inode_getxattr(struc
 				   char *name)
 {
 	int error = 0;
-	struct aaprofile *active;
-
-	if (!mnt || dentry->d_inode->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
 
+	if (mnt && dentry->d_inode->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	active = get_active_aaprofile();
-	if (active)
-		error = aa_perm_xattr(active, dentry, mnt, name, "xattr get",
-				      AA_MAY_READ);
-	put_aaprofile(active);
+		if (active)
+			error = aa_perm_xattr(active, dentry, mnt, name,
+					      "xattr get", AA_MAY_READ);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 static int apparmor_inode_listxattr(struct dentry *dentry, struct vfsmount *mnt)
 {
 	int error = 0;
-	struct aaprofile *active;
 
-	if (!mnt || dentry->d_inode->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
+	if (mnt && dentry->d_inode->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	active = get_active_aaprofile();
-	if (active)
-		error = aa_perm_xattr(active, dentry, mnt, NULL, "xattr list",
-				      AA_MAY_READ);
-	put_aaprofile(active);
+		if (active)
+			error = aa_perm_xattr(active, dentry, mnt, NULL,
+					      "xattr list", AA_MAY_READ);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
@@ -493,29 +454,28 @@ static int apparmor_inode_removexattr(st
 				      struct vfsmount *mnt, char *name)
 {
 	int error = 0;
-	struct aaprofile *active;
 
-	if (!mnt || dentry->d_inode->i_sb->s_security != AA_MEDIATE_FS)
-		goto out;
+	if (mnt && dentry->d_inode->i_sb->s_security == AA_MEDIATE_FS) {
+		struct aaprofile *active = get_active_aaprofile();
 
-	active = get_active_aaprofile();
-	if (active)
-		error = aa_perm_xattr(active, dentry, mnt, name, "xattr remove",
-				      AA_MAY_WRITE);
-	put_aaprofile(active);
+		if (active)
+			error = aa_perm_xattr(active, dentry, mnt, name,
+					      "xattr remove", AA_MAY_WRITE);
+		put_aaprofile(active);
+	}
 
-out:
 	return error;
 }
 
 static int apparmor_file_permission(struct file *file, int mask)
 {
-	struct aaprofile *active;
 	int error = 0;
 
 	if (file->f_vfsmnt->mnt_sb->s_security == AA_MEDIATE_FS &&
 	    file->f_security) {
-		active = get_active_aaprofile();
+		struct aaprofile *active = get_active_aaprofile();
+
+		/* FIXME: Q: what's going on here? */
 		if (active && (struct aaprofile*)file->f_security != active)
 			error = aa_perm(active, file->f_dentry, file->f_vfsmnt,
 					mask & (MAY_EXEC|MAY_WRITE|MAY_READ));
@@ -527,9 +487,8 @@ static int apparmor_file_permission(stru
 
 static int apparmor_file_alloc_security(struct file *file)
 {
-	struct aaprofile *active;
+	struct aaprofile *active = get_active_aaprofile();
 
-	active = get_active_aaprofile();
 	if (active)
 		file->f_security = get_aaprofile(active);
 
@@ -549,23 +508,23 @@ static inline int aa_mmap(struct file *f
 	int error = 0, mask = 0;
 	struct aaprofile *active;
 
+	if (!file || file->f_vfsmnt->mnt_sb->s_security != AA_MEDIATE_FS)
+		goto out;
 	active = get_active_aaprofile();
-	if (!active || !file ||
-	    file->f_vfsmnt->mnt_sb->s_security != AA_MEDIATE_FS)
+	if (!active)
 		goto out;
 
 	if (prot & PROT_READ)
 		mask |= MAY_READ;
-
-	/* Private mappings don't require write perms since they don't
-	 * write back to the files */
-	if (prot & PROT_WRITE && !(flags & MAP_PRIVATE))
+	/*
+	 *Private mappings don't require write perms since they don't
+	 * write back to the files.
+	 */
+	if ((prot & PROT_WRITE) && !(flags & MAP_PRIVATE))
 		mask |= MAY_WRITE;
 	if (prot & PROT_EXEC)
 		mask |= AA_EXEC_MMAP;
 
-	AA_DEBUG("%s: 0x%x\n", __FUNCTION__, mask);
-
 	if (mask)
 		error = aa_perm(active, file->f_dentry, file->f_vfsmnt, mask);
 
@@ -588,14 +547,14 @@ static int apparmor_file_mprotect(struct
 		       !(vma->vm_flags & VM_SHARED) ? MAP_PRIVATE : 0);
 }
 
-static int apparmor_task_alloc_security(struct task_struct *p)
+static int apparmor_task_alloc_security(struct task_struct *task)
 {
-	return aa_fork(p);
+	return aa_fork(task);
 }
 
-static void apparmor_task_free_security(struct task_struct *p)
+static void apparmor_task_free_security(struct task_struct *task)
 {
-	aa_release(p);
+	aa_release(task);
 }
 
 static int apparmor_task_post_setuid(uid_t id0, uid_t id1, uid_t id2,
@@ -604,41 +563,33 @@ static int apparmor_task_post_setuid(uid
 	return cap_task_post_setuid(id0, id1, id2, flags);
 }
 
-static void apparmor_task_reparent_to_init(struct task_struct *p)
+static void apparmor_task_reparent_to_init(struct task_struct *task)
 {
-	cap_task_reparent_to_init(p);
+	cap_task_reparent_to_init(task);
 	return;
 }
 
-static int apparmor_getprocattr(struct task_struct *p, char *name, void *value,
-				size_t size)
+static int apparmor_getprocattr(struct task_struct *task, char *name,
+				void *value, size_t size)
 {
 	int error;
-	struct aaprofile *active;
-	char *str = value;
 
 	/* AppArmor only supports the "current" process attribute */
-	if (strcmp(name, "current") != 0) {
-		error = -EINVAL;
-		goto out;
-	}
+	if (strcmp(name, "current") != 0)
+		return -EINVAL;
 
-	/* must be task querying itself or admin */
-	if (current != p && !capable(CAP_SYS_ADMIN)) {
-		error = -EPERM;
-		goto out;
+	error = -EPERM;
+	if (task == current || capable(CAP_SYS_ADMIN)) {
+		struct aaprofile *active = get_task_active_aaprofile(task);
+		error = aa_getprocattr(active, (char *) value, size);
+		put_aaprofile(active);
 	}
 
-	active = get_task_active_aaprofile(p);
-	error = aa_getprocattr(active, str, size);
-	put_aaprofile(active);
-
-out:
 	return error;
 }
 
-static int apparmor_setprocattr(struct task_struct *p, char *name, void *value,
-				 size_t size)
+static int apparmor_setprocattr(struct task_struct *task, char *name,
+				void *value, size_t size)
 {
 	const char *cmd_changehat = "changehat ",
 		   *cmd_setprofile = "setprofile ";
@@ -664,15 +615,15 @@ static int apparmor_setprocattr(struct t
 		size_t infosize = size - strlen(cmd_changehat);
 
 		/* Only the current process may change it's hat */
-		if (current != p) {
+		if (current != task) {
 			AA_WARN("%s: Attempt by foreign task %s(%d) "
 				"[user %d] to changehat of task %s(%d)\n",
 				__FUNCTION__,
 				current->comm,
 				current->pid,
 				current->uid,
-				p->comm,
-				p->pid);
+				task->comm,
+				task->pid);
 
 			error = -EACCES;
 			goto out;
@@ -699,8 +650,8 @@ static int apparmor_setprocattr(struct t
 				current->comm,
 				current->pid,
 				current->uid,
-				p->comm,
-				p->pid);
+				task->comm,
+				task->pid);
 			error = -EACCES;
 			goto out;
 		}
@@ -710,7 +661,7 @@ static int apparmor_setprocattr(struct t
 			char *profile = cmd + strlen(cmd_setprofile);
 			size_t profilesize = size - strlen(cmd_setprofile);
 
-			error = aa_setprocattr_setprofile(p, profile, profilesize);
+			error = aa_setprocattr_setprofile(task, profile, profilesize);
 			if (error == 0)
 				/* success,
 				 * set return to #bytes in orig request
@@ -723,8 +674,8 @@ static int apparmor_setprocattr(struct t
 				current->comm,
 				current->pid,
 				current->uid,
-				p->comm,
-				p->pid);
+				task->comm,
+				task->pid);
 
 			error = -EACCES;
 		}
@@ -739,8 +690,8 @@ static int apparmor_setprocattr(struct t
 			current->comm,
 			current->pid,
 			current->uid,
-			p->comm,
-			p->pid);
+			task->comm,
+			task->pid);
 
 		error = -EINVAL;
 	}
