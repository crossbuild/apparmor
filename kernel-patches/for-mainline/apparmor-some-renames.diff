Rename directory inodes arguments from <inode> to <dir> in the lsm hooks
as suggested in apparmor-novalidfstype.diff.

Rename VALID_FSTYPE() to mediated_filesystem().

Index: b/security/apparmor/apparmor.h
===================================================================
--- a/security/apparmor/apparmor.h
+++ b/security/apparmor/apparmor.h
@@ -25,8 +25,10 @@ extern int apparmor_debug;
 extern int apparmor_audit;
 extern int apparmor_logsyscall;
 
-#define VALID_FSTYPE(inode) \
-	(!((inode)->i_sb->s_flags & MS_NOUSER))
+static inline int mediated_filesystem(struct inode *inode)
+{
+	return !(inode->i_sb->s_flags & MS_NOUSER);
+}
 
 #define PROFILE_COMPLAIN(_profile) \
 	(apparmor_complain == 1 || ((_profile) && (_profile)->flags.complain))
Index: b/security/apparmor/lsm.c
===================================================================
--- a/security/apparmor/lsm.c
+++ b/security/apparmor/lsm.c
@@ -248,13 +248,13 @@ static int apparmor_umount(struct vfsmou
 	return error;
 }
 
-static int apparmor_inode_mkdir(struct inode *inode, struct dentry *dentry,
+static int apparmor_inode_mkdir(struct inode *dir, struct dentry *dentry,
 				struct vfsmount *mnt, int mask)
 {
 	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || !VALID_FSTYPE(inode))
+	if (!mnt || !mediated_filesystem(dir))
 		goto out;
 
 	active = get_active_aaprofile();
@@ -268,13 +268,13 @@ out:
 	return error;
 }
 
-static int apparmor_inode_rmdir(struct inode *inode, struct dentry *dentry,
+static int apparmor_inode_rmdir(struct inode *dir, struct dentry *dentry,
 				struct vfsmount *mnt)
 {
 	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || !VALID_FSTYPE(inode))
+	if (!mnt || !mediated_filesystem(dir))
 		goto out;
 
 	active = get_active_aaprofile();
@@ -288,13 +288,13 @@ out:
 	return error;
 }
 
-static int apparmor_inode_create(struct inode *inode, struct dentry *dentry,
+static int apparmor_inode_create(struct inode *dir, struct dentry *dentry,
 				 struct vfsmount *mnt, int mask)
 {
 	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || !VALID_FSTYPE(inode))
+	if (!mnt || !mediated_filesystem(dir))
 		goto out;
 
 	active = get_active_aaprofile();
@@ -309,14 +309,14 @@ out:
 }
 
 static int apparmor_inode_link(struct dentry *old_dentry,
-			       struct vfsmount *old_mnt, struct inode *inode,
+			       struct vfsmount *old_mnt, struct inode *dir,
 			       struct dentry *new_dentry,
 			       struct vfsmount *new_mnt)
 {
 	int error = 0;
 	struct aaprofile *active;
 
-	if (!old_mnt || !new_mnt || !VALID_FSTYPE(inode))
+	if (!old_mnt || !new_mnt || !mediated_filesystem(dir))
 		goto out;
 
 	active = get_active_aaprofile();
@@ -338,7 +338,7 @@ static int apparmor_inode_unlink(struct 
 	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || !VALID_FSTYPE(dir))
+	if (!mnt || !mediated_filesystem(dir))
 		goto out;
 
 	active = get_active_aaprofile();
@@ -352,13 +352,13 @@ out:
 	return error;
 }
 
-static int apparmor_inode_mknod(struct inode *inode, struct dentry *dentry,
+static int apparmor_inode_mknod(struct inode *dir, struct dentry *dentry,
 				struct vfsmount *mnt, int mode, dev_t dev)
 {
 	struct aaprofile *active;
 	int error = 0;
 
-	if (!mnt || !VALID_FSTYPE(inode))
+	if (!mnt || !mediated_filesystem(dir))
 		goto out;
 
 	active = get_active_aaprofile();
@@ -372,17 +372,17 @@ out:
 	return error;
 }
 
-static int apparmor_inode_rename(struct inode *old_inode,
+static int apparmor_inode_rename(struct inode *old_dir,
 				 struct dentry *old_dentry,
 				 struct vfsmount *old_mnt,
-				 struct inode *new_inode,
+				 struct inode *new_dir,
 				 struct dentry *new_dentry,
 				 struct vfsmount *new_mnt)
 {
 	struct aaprofile *active;
 	int error = 0;
 
-	if ((!old_mnt && !new_mnt) || !VALID_FSTYPE(old_inode))
+	if ((!old_mnt && !new_mnt) || !mediated_filesystem(old_dir))
 		goto out;
 
 	active = get_active_aaprofile();
@@ -404,14 +404,14 @@ out:
 }
 
 static int apparmor_inode_permission(struct inode *inode, int mask,
-				      struct nameidata *nd)
+				     struct nameidata *nd)
 {
 	int error = 0;
 
 	/* Do not perform check on pipes or sockets
 	 * Same as apparmor_file_permission
 	 */
-	if (nd && VALID_FSTYPE(inode)) {
+	if (nd && mediated_filesystem(inode)) {
 		struct aaprofile *active;
 
 		active = get_active_aaprofile();
@@ -431,7 +431,7 @@ static int apparmor_inode_setattr(struct
 	if (!mnt)
 		goto out;
 
-	if (VALID_FSTYPE(dentry->d_inode)) {
+	if (mediated_filesystem(dentry->d_inode)) {
 		struct aaprofile *active;
 
 		active = get_active_aaprofile();
@@ -458,7 +458,7 @@ static int apparmor_inode_setxattr(struc
 	if (!mnt)
 		goto out;
 
-	if (VALID_FSTYPE(dentry->d_inode)) {
+	if (mediated_filesystem(dentry->d_inode)) {
 		struct aaprofile *active;
 
 		active = get_active_aaprofile();
@@ -480,7 +480,7 @@ static int apparmor_inode_getxattr(struc
 	if (!mnt)
 		goto out;
 
-	if (VALID_FSTYPE(dentry->d_inode)) {
+	if (mediated_filesystem(dentry->d_inode)) {
 		struct aaprofile *active;
 
 		active = get_active_aaprofile();
@@ -500,7 +500,7 @@ static int apparmor_inode_listxattr(stru
 	if (!mnt)
 		goto out;
 
-	if (VALID_FSTYPE(dentry->d_inode)) {
+	if (mediated_filesystem(dentry->d_inode)) {
 		struct aaprofile *active;
 
 		active = get_active_aaprofile();
@@ -522,7 +522,7 @@ static int apparmor_inode_removexattr(st
 	if (!mnt)
 		goto out;
 
-	if (VALID_FSTYPE(dentry->d_inode)) {
+	if (mediated_filesystem(dentry->d_inode)) {
 		struct aaprofile *active;
 
 		active = get_active_aaprofile();
@@ -543,7 +543,7 @@ static int apparmor_file_permission(stru
 	int error = 0;
 
 	/* bail out early if this isn't a mediated file */
-	if (!file_profile || !VALID_FSTYPE(file->f_dentry->d_inode))
+	if (!file_profile || !mediated_filesystem(file->f_dentry->d_inode))
 		goto out;
 
 	active = get_active_aaprofile();
@@ -562,7 +562,7 @@ static int apparmor_file_alloc_security(
 {
 	struct aaprofile *active;
 
-	if (!VALID_FSTYPE(file->f_dentry->d_inode))
+	if (!mediated_filesystem(file->f_dentry->d_inode))
 		return 0;
 
 	active = get_active_aaprofile();
@@ -589,7 +589,7 @@ static inline int aa_mmap(struct file *f
 	struct aaprofile *active;
 
 	active = get_active_aaprofile();
-	if (!active || !file || !VALID_FSTYPE(file->f_dentry->d_inode))
+	if (!active || !file || !mediated_filesystem(file->f_dentry->d_inode))
 		goto out;
 
 	if (prot & PROT_READ)
