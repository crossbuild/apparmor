The whole way how audit messages are generated is crap, but it's a bad
time to fix it right now. Anyway, here are some minor changes that make
it slightly less ugly:

 - the xattr name is not use din aa_audit, so don't pass it through.
 - convert the huge if in aa_audit into a case statement.
 - get rid of the pval, and put the particular fields into the union
   instead.
 - use name2 for the operation.
 - put some more fields never used together in the union as well.

---
 security/apparmor/apparmor.h |   13 ++----
 security/apparmor/lsm.c      |   21 ++++------
 security/apparmor/main.c     |   84 +++++++++++++++++++------------------------
 3 files changed, 52 insertions(+), 66 deletions(-)

--- a/security/apparmor/apparmor.h
+++ b/security/apparmor/apparmor.h
@@ -163,15 +163,12 @@ struct aa_audit {
 	unsigned int result;
 	gfp_t gfp_mask;
 	int error_code;
-
-	const char *operation;
 	const char *name;
 	union {
-		int capability;
 		int mask;
-	};
-	union {
-		const void *pval;
+		int capability;
+		const char *name2;
+		struct iattr *iattr;
 		va_list vaval;
 	};
 };
@@ -223,8 +220,8 @@ extern int aa_audit(struct aa_profile *p
 extern int aa_attr(struct aa_profile *profile, struct dentry *dentry,
 		   struct vfsmount *mnt, struct iattr *iattr);
 extern int aa_perm_xattr(struct aa_profile *profile, struct dentry *dentry,
-			 struct vfsmount *mnt, const char *operation,
-			 const char *xattr_xattr, int mask, int check);
+			 struct vfsmount *mnt, const char *operation, int mask,
+			 int check);
 extern int aa_capability(struct aa_task_context *cxt, int cap);
 extern int aa_perm(struct aa_profile *profile, struct dentry *dentry,
 		   struct vfsmount *mnt, int mask, int check);
--- a/security/apparmor/lsm.c
+++ b/security/apparmor/lsm.c
@@ -393,8 +393,8 @@ out:
 }
 
 static int aa_xattr_permission(struct dentry *dentry, struct vfsmount *mnt,
-			       const char *name, const char *operation,
-			       int mask, struct file *file)
+			       const char *operation, int mask,
+			       struct file *file)
 {
 	int error = 0;
 
@@ -403,8 +403,8 @@ static int aa_xattr_permission(struct de
 		int check = file ? AA_CHECK_FD : 0;
 
 		if (profile)
-			error = aa_perm_xattr(profile, dentry, mnt, name,
-					      operation, mask, check);
+			error = aa_perm_xattr(profile, dentry, mnt, operation,
+					      mask, check);
 		aa_put_profile(profile);
 	}
 
@@ -415,30 +415,27 @@ static int apparmor_inode_setxattr(struc
 				   char *name, void *value, size_t size,
 				   int flags, struct file *file)
 {
-	return aa_xattr_permission(dentry, mnt, name, "xattr set", MAY_WRITE,
-				   file);
+	return aa_xattr_permission(dentry, mnt, "xattr set", MAY_WRITE, file);
 }
 
 static int apparmor_inode_getxattr(struct dentry *dentry, struct vfsmount *mnt,
 				   char *name, struct file *file)
 {
-	return aa_xattr_permission(dentry, mnt, name, "xattr get", MAY_READ,
-				   file);
+	return aa_xattr_permission(dentry, mnt, "xattr get", MAY_READ, file);
 }
 
 static int apparmor_inode_listxattr(struct dentry *dentry, struct vfsmount *mnt,
 				    struct file *file)
 {
-	return aa_xattr_permission(dentry, mnt, NULL, "xattr list", MAY_READ,
-				   file);
+	return aa_xattr_permission(dentry, mnt, "xattr list", MAY_READ, file);
 }
 
 static int apparmor_inode_removexattr(struct dentry *dentry,
 				      struct vfsmount *mnt, char *name,
 				      struct file *file)
 {
-	return aa_xattr_permission(dentry, mnt, name, "xattr remove",
-				   MAY_WRITE, file);
+	return aa_xattr_permission(dentry, mnt, "xattr remove", MAY_WRITE,
+				   file);
 }
 
 static int apparmor_file_permission(struct file *file, int mask)
--- a/security/apparmor/main.c
+++ b/security/apparmor/main.c
@@ -404,8 +404,6 @@ int aa_audit(struct aa_profile *profile,
 
 	const gfp_t gfp_mask = sa->gfp_mask;
 
-	WARN_ON(sa->type >= AA_AUDITTYPE__END);
-
 	/*
 	 * sa->result:	  1 success, 0 failure
 	 * sa->error_code: success: 0
@@ -480,7 +478,8 @@ int aa_audit(struct aa_profile *profile,
 
 	audit_log_format(ab, "%s ", logcls);	/* REJECTING/ALLOWING/etc */
 
-	if (sa->type == AA_AUDITTYPE_FILE) {
+	switch(sa->type) {
+	case AA_AUDITTYPE_FILE: {
 		int perm = audit ? sa->mask : sa->error_code;
 
 		audit_log_format(ab, "%s%s%s%s%s access to %s ",
@@ -492,12 +491,13 @@ int aa_audit(struct aa_profile *profile,
 				 sa->name);
 
 		opspec_error = -EPERM;
-
-	} else if (sa->type == AA_AUDITTYPE_DIR) {
-		audit_log_format(ab, "%s on %s ", sa->operation, sa->name);
-
-	} else if (sa->type == AA_AUDITTYPE_ATTR) {
-		struct iattr *iattr = (struct iattr*)sa->pval;
+		break;
+	}
+	case AA_AUDITTYPE_DIR:
+		audit_log_format(ab, "%s on %s ", sa->name2, sa->name);
+		break;
+	case AA_AUDITTYPE_ATTR: {
+		struct iattr *iattr = sa->iattr;
 
 		audit_log_format(ab,
 			"attribute (%s%s%s%s%s%s%s) change to %s ",
@@ -511,32 +511,27 @@ int aa_audit(struct aa_profile *profile,
 			 (iattr->ia_valid & ATTR_MTIME)) ? "mtime," : "",
 			iattr->ia_valid & ATTR_CTIME ? "ctime," : "",
 			sa->name);
-
-	} else if (sa->type == AA_AUDITTYPE_XATTR) {
-		/* FIXME: how are special characters in sa->name escaped? */
-		/* FIXME: check if this can be handled on the stack
-			  with an inline varargs function. */
-		audit_log_format(ab, "%s on %s ", sa->operation, sa->name);
-
-	} else if (sa->type == AA_AUDITTYPE_LINK) {
-		audit_log_format(ab,
-			"link access from %s to %s ",
-			sa->name,
-			(char*)sa->pval);
-
-	} else if (sa->type == AA_AUDITTYPE_CAP) {
-		audit_log_format(ab,
-			"access to capability '%s' ",
+		break;
+	}
+	case AA_AUDITTYPE_XATTR:
+		audit_log_format(ab, "%s on %s ", sa->name2, sa->name);
+		break;
+	case AA_AUDITTYPE_LINK:
+		audit_log_format(ab, "link access from %s to %s ", sa->name,
+			sa->name2);
+		break;
+	case AA_AUDITTYPE_CAP:
+		audit_log_format(ab, "access to capability '%s' ",
 			capability_names[sa->capability]);
-
 		opspec_error = -EPERM;
-	} else if (sa->type == AA_AUDITTYPE_SYSCALL) {
+		break;
+	case AA_AUDITTYPE_SYSCALL:
 		audit_log_format(ab, "access to syscall '%s' ", sa->name);
-
 		opspec_error = -EPERM;
-	} else {
-		/* -EINVAL -- will WARN_ON above */
-		goto out;
+		break;
+	default:
+		WARN_ON(1);
+		return error;
 	}
 
 	audit_log_format(ab, "(%s(%d) profile %s active %s)",
@@ -549,7 +544,6 @@ int aa_audit(struct aa_profile *profile,
 		error = 0;
 	else
 		error = sa->result ? 0 : opspec_error;
-
 out:
 	return error;
 }
@@ -569,7 +563,7 @@ int aa_attr(struct aa_profile *profile, 
 	struct aa_audit sa;
 
 	sa.type = AA_AUDITTYPE_ATTR;
-	sa.pval = iattr;
+	sa.iattr = iattr;
 	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 
@@ -590,21 +584,19 @@ int aa_attr(struct aa_profile *profile, 
  * @dentry: dentry of the file to check
  * @mnt: vfsmount of the file to check
  * @operation: xattr operation being done
- * @xattr_name: name of xattr to check
  * @mask: access mode requested
  * @check: kind of check to perform
  */
 int aa_perm_xattr(struct aa_profile *profile, struct dentry *dentry,
 		  struct vfsmount *mnt, const char *operation,
-		  const char *xattr_name, int mask, int check)
+		  int mask, int check)
 {
 	struct inode *inode = dentry->d_inode;
 	int error;
 	struct aa_audit sa;
 
 	sa.type = AA_AUDITTYPE_XATTR;
-	sa.operation = operation;
-	sa.pval = xattr_name;
+	sa.name2 = operation;
 	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 
@@ -675,7 +667,7 @@ int aa_perm_dir(struct aa_profile *profi
 	struct aa_audit sa;
 
 	sa.type = AA_AUDITTYPE_DIR;
-	sa.operation = operation;
+	sa.name2 = operation;
 	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 
@@ -745,24 +737,24 @@ int aa_link(struct aa_profile *profile,
 	    struct dentry *link, struct vfsmount *link_mnt,
 	    struct dentry *target, struct vfsmount *target_mnt)
 {
-	char *name_buffer = NULL, *pval_buffer = NULL;
+	char *name_buffer = NULL, *name2_buffer = NULL;
 	int denied_mask = -EPERM, error;
 	struct aa_audit sa;
 
 	sa.name = aa_get_name(link, link_mnt, &name_buffer, 0);
-	sa.pval = aa_get_name(target, target_mnt, &pval_buffer, 0);
+	sa.name2 = aa_get_name(target, target_mnt, &name2_buffer, 0);
 
 	if (IS_ERR(sa.name)) {
 		denied_mask = PTR_ERR(sa.name);
 		sa.name = NULL;
 	}
-	if (IS_ERR(sa.pval)) {
-		denied_mask = PTR_ERR(sa.pval);
-		sa.pval = NULL;
+	if (IS_ERR(sa.name2)) {
+		denied_mask = PTR_ERR(sa.name2);
+		sa.name2 = NULL;
 	}
 
-	if (sa.name && sa.pval)
-		denied_mask = aa_link_denied(profile, sa.name, sa.pval);
+	if (sa.name && sa.name2)
+		denied_mask = aa_link_denied(profile, sa.name, sa.name2);
 
 	aa_permerror2result(denied_mask, &sa);
 
@@ -773,7 +765,7 @@ int aa_link(struct aa_profile *profile,
 	error = aa_audit(profile, &sa);
 
 	aa_put_name_buffer(name_buffer);
-	aa_put_name_buffer(pval_buffer);
+	aa_put_name_buffer(name2_buffer);
 
 	return error;
 }
