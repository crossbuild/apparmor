---
 security/apparmor/apparmor.h |    2 -
 security/apparmor/main.c     |   84 +++++++++++++------------------------------
 security/apparmor/procattr.c |   20 +++-------
 3 files changed, 34 insertions(+), 72 deletions(-)

--- a/security/apparmor/apparmor.h
+++ b/security/apparmor/apparmor.h
@@ -215,7 +215,7 @@ extern int aa_clone(struct task_struct *
 extern int aa_register(struct linux_binprm *bprm);
 extern void aa_release(struct task_struct *task);
 extern int aa_change_hat(const char *id, u64 hat_magic);
-extern int aa_change_profile(const char *name, u64 cookie, int permanent);
+extern int aa_change_profile(const char *name, u64 cookie);
 extern struct aa_profile *__aa_find_profile(const char *name,
 					    struct list_head *list);
 extern struct aa_profile *__aa_find_profile2(const char *name,
--- a/security/apparmor/main.c
+++ b/security/apparmor/main.c
@@ -934,10 +934,8 @@ repeat:
 	}
 }
 
-enum { change_profile, permanent_change_profile, restore_profile };
-
 static int do_change_profile(struct aa_profile *expected, const char *name,
-			     u64 cookie, int mode, struct aa_audit *sa)
+			     u64 cookie, struct aa_audit *sa)
 {
 	struct aa_profile *profile = NULL, *previous_profile = NULL;
 	struct aa_task_context *new_cxt, *cxt;
@@ -949,9 +947,11 @@ static int do_change_profile(struct aa_p
 	if (!new_cxt)
 		return -ENOMEM;
 
-	profile = aa_find_profile(name);
-	if (!profile && mode != restore_profile)
-		profile = aa_dup_profile(null_complain_profile);
+	if (name) {
+		profile = aa_find_profile(name);
+		if (!profile)
+			profile = aa_dup_profile(null_complain_profile);
+	}
 
 	cxt = lock_task_and_profiles(current, profile);
 	if (!cxt) {
@@ -968,23 +968,24 @@ static int do_change_profile(struct aa_p
 		if (cxt->cookie != cookie) {
 			error = -EACCES;
 			sa->info = "killing process";
-			aa_audit_reject(profile, sa);
+			aa_audit_reject(cxt->profile, sa);
 			/* terminate process */
 			(void)send_sig_info(SIGKILL, NULL, current);
 			goto out;
 		}
 
-		previous_profile = cxt->previous_profile;
+		if (name)
+			previous_profile = cxt->previous_profile;
+		else
+			/* profile is null - returning to previous_profile */
+			profile = aa_dup_profile(cxt->previous_profile);
+	} else if (!name) {
+		/* ignore return when their is no previous_profile */
+		goto out;
 	} else {
 		previous_profile = cxt->profile;
 	}
 
-	if (mode == permanent_change_profile) {
-		previous_profile = NULL;
-		cookie = 0;
-		sa->info = "permanent";
-	}
-
 	if ((current->ptrace & PT_PTRACED) && aa_may_ptrace(cxt, profile)) {
 		error = -EACCES;
 		goto out;
@@ -1001,11 +1002,13 @@ static int do_change_profile(struct aa_p
 
 	if (APPARMOR_AUDIT(cxt))
 		aa_audit_message(cxt->profile, sa, AUDIT_APPARMOR_AUDIT);
-	if (mode == restore_profile)
-		aa_change_task_context(current, new_cxt, profile, 0, NULL);
-	else
+
+	if (name && cookie)
 		aa_change_task_context(current, new_cxt, profile, cookie,
 				       previous_profile);
+	else
+		/* either return to previous_profile, or a permanent change */
+		aa_change_task_context(current, new_cxt, profile, 0, NULL);
 
 out:
 	if (aa_task_context(current) != new_cxt)
@@ -1020,7 +1023,6 @@ out:
  * aa_change_profile - change profile to/from previous stored profile
  * @name: name of profile to change to
  * @cookie: magic value to validate the profile change
- * @permanent: whether the profile change is permanent
  *
  * Change to new profile @name, and store the @cookie in the current task
  * context.  If the new @name is %NULL and the @cookie matches that
@@ -1028,7 +1030,7 @@ out:
  *
  * Returns %0 on success, error otherwise.
  */
-int aa_change_profile(const char *name, u64 cookie, int permanent)
+int aa_change_profile(const char *name, u64 cookie)
 {
 	struct aa_profile *profile;
 	struct aa_audit sa;
@@ -1052,31 +1054,9 @@ repeat:
 			aa_put_profile(profile);
 			return -EACCES;
 		}
-		if (permanent)
-			error = do_change_profile(profile, name, cookie,
-						  permanent_change_profile,
-						  &sa);
-		else
-			error = do_change_profile(profile, name, cookie,
-						  change_profile, &sa);
-	} else {
-		struct aa_profile *previous_profile;
-		task_lock(current);
-		previous_profile =
-		    aa_dup_profile(aa_task_context(current)->previous_profile);
-		task_unlock(current);
-
-		if (previous_profile)
-			error = do_change_profile(profile,
-						  previous_profile->name,
-						  cookie, restore_profile,
-						  &sa);
-		aa_put_profile(previous_profile);
-		/* else
-		 * Ignore change_profile to restore_previous profile when
-		 * it doesn't exist
-		 */
-	}
+		error = do_change_profile(profile, name, cookie, &sa);
+	} else
+		error = do_change_profile(profile, NULL, cookie, &sa);
 
 	aa_put_profile(profile);
 	if (error == -ESTALE)
@@ -1137,20 +1117,10 @@ repeat:
 			goto out;
 		}
 		sprintf(name, "%s//%s", profile_name, hat_name);
-		error = do_change_profile(profile, name, cookie,
-					  change_profile, &sa);
+		error = do_change_profile(profile, name, cookie, &sa);
 		kfree(name);
-	} else {
-		if (previous_profile)
-			error = do_change_profile(profile,
-						  previous_profile->name,
-						  cookie, restore_profile,
-						  &sa);
-		/* else
-		 * Ignore change_hat to restore profile when there is
-		 * no profile to restore
-		 */
-	}
+	} else
+		error = do_change_profile(profile, NULL, cookie, &sa);
 
 out:
 	aa_put_profile(previous_profile);
--- a/security/apparmor/procattr.c
+++ b/security/apparmor/procattr.c
@@ -27,7 +27,6 @@ int aa_getprocattr(struct aa_profile *pr
 		str = kmalloc(*len, GFP_ATOMIC);
 		if (!str)
 			return -ENOMEM;
-		/* FIXME: do we want to report ^ instead of // for hatnames */
 
 		memcpy(str, profile->name, name_len);
 		str += name_len;
@@ -50,20 +49,16 @@ int aa_getprocattr(struct aa_profile *pr
 	return 0;
 }
 
-static char *split_token_from_name(const char *op, int *cookie_set,
-				   char *args, u64 *cookie)
+static char *split_token_from_name(const char *op, char *args, u64 *cookie)
 {
 	char *name;
 
 	*cookie = simple_strtoull(args, &name, 16);
-	if ((name == args && *cookie_set) || *name != '^') {
+	if ((name == args) || *name != '^') {
 		AA_ERROR("%s: Invalid input '%s'", op, args);
 		return ERR_PTR(-EINVAL);
-	} else if (name == args) {
-		*cookie_set = 0;
-	} else {
-		*cookie_set = 1;
 	}
+
 	name++;  /* skip ^ */
 	if (!*name)
 		name = NULL;
@@ -74,9 +69,8 @@ int aa_setprocattr_changehat(char *args)
 {
 	char *hat;
 	u64 cookie;
-	int cookie_set = 1;
 
-	hat = split_token_from_name("change_hat", &cookie_set, args, &cookie);
+	hat = split_token_from_name("change_hat", args, &cookie);
 	if (IS_ERR(hat))
 		return PTR_ERR(hat);
 
@@ -95,14 +89,12 @@ int aa_setprocattr_changeprofile(char *a
 {
 	char *name;
 	u64 cookie;
-	int cookie_set = 0;
 
-	name = split_token_from_name("change_profile", &cookie_set, args,
-				     &cookie);
+	name = split_token_from_name("change_profile", args, &cookie);
 	if (IS_ERR(name))
 		return PTR_ERR(name);
 
-	return aa_change_profile(name, cookie, !cookie_set);
+	return aa_change_profile(name, cookie);
 }
 
 int aa_setprocattr_setprofile(struct task_struct *task, char *args)
