Index: linux-2.6.19.1/fs/dcache.c
===================================================================
--- linux-2.6.19.1.orig/fs/dcache.c
+++ linux-2.6.19.1/fs/dcache.c
@@ -1732,6 +1732,8 @@ shouldnt_be_hashed:
  * @buffer: buffer to return value in
  * @buflen: buffer length
  * @flags: flags indicating what should be in the path
+ * @pcons: if none null will contain flags indicating path lookup conditions
+ *         that may affect the path name.
  *
  * Convert a dentry into an ASCII path name.
  * If the entry has been deleted and the DPATH_DELETED flag is set the
@@ -1745,21 +1747,25 @@ shouldnt_be_hashed:
  */
 static char * __d_path( struct dentry *dentry, struct vfsmount *vfsmnt,
 			struct dentry *root, struct vfsmount *rootmnt,
-			char *buffer, int buflen, unsigned int flags)
+			char *buffer, int buflen, unsigned int flags,
+			unsigned int *pconds)
 {
 	char * end = buffer+buflen;
 	char * retval;
+	unsigned int lpconds = 0;
 	int namelen;
 
 	*--end = '\0';
 	buflen--;
-	if ((flags & DPATH_DELETED) &&
-	    !IS_ROOT(dentry) && d_unhashed(dentry)) {
-		buflen -= 10;
-		end -= 10;
-		if (buflen < 0)
-			goto Elong;
-		memcpy(end, " (deleted)", 10);
+	if (!IS_ROOT(dentry) && d_unhashed(dentry)) {
+		if (flags & DPATH_DELETED) {
+			buflen -= 10;
+			end -= 10;
+			if (buflen < 0)
+				goto Elong;
+			memcpy(end, " (deleted)", 10);
+		}
+		lpconds |= DPATH_DELETED;
 	}
 
 	if (buflen < 1)
@@ -1771,9 +1777,11 @@ static char * __d_path( struct dentry *d
 	for (;;) {
 		struct dentry * parent;
 
-		if (!(flags & DPATH_NSROOT) &&
-		    dentry == root && vfsmnt == rootmnt)
-			break;
+		if (dentry == root && vfsmnt == rootmnt) {
+		    if (!(flags & DPATH_NSROOT))
+				break;
+			lpconds |= DPATH_NSROOT;
+		}
 		if (dentry == vfsmnt->mnt_root || IS_ROOT(dentry)) {
 			/* Global root? */
 			spin_lock(&vfsmount_lock);
@@ -1799,6 +1807,8 @@ static char * __d_path( struct dentry *d
 		dentry = parent;
 	}
 
+	if (lpconds)
+		*pconds = lpconds;
 	return retval;
 
 global_root:
@@ -1808,6 +1818,8 @@ global_root:
 		goto Elong;
 	retval -= namelen-1;	/* hit the slash */
 	memcpy(retval, dentry->d_name.name, namelen);
+	if (lpconds)
+		*pconds = lpconds;
 	return retval;
 Elong:
 	return ERR_PTR(-ENAMETOOLONG);
@@ -1815,7 +1827,8 @@ Elong:
 
 /* write full pathname into buffer and return start of pathname */
 char * d_path_flags(struct dentry *dentry, struct vfsmount *vfsmnt,
-		    char *buf, int buflen, unsigned int flags)
+		    char *buf, int buflen, unsigned int flags,
+		    unsigned int *pconds)
 {
 	char *res;
 	struct vfsmount *rootmnt = NULL;
@@ -1828,7 +1841,8 @@ char * d_path_flags(struct dentry *dentr
 		read_unlock(&current->fs->lock);
 	}
 	spin_lock(&dcache_lock);
-	res = __d_path(dentry, vfsmnt, root, rootmnt, buf, buflen, flags);
+	res = __d_path(dentry, vfsmnt, root, rootmnt, buf, buflen, flags,
+		       pconds);
 	spin_unlock(&dcache_lock);
 	if (!(flags & DPATH_NSROOT)) {
 		dput(root);
@@ -1858,6 +1872,7 @@ char * d_path_flags(struct dentry *dentr
 asmlinkage long sys_getcwd(char __user *buf, unsigned long size)
 {
 	int error;
+	unsigned int conds;
 	struct vfsmount *pwdmnt, *rootmnt;
 	struct dentry *pwd, *root;
 	char *page = (char *) __get_free_page(GFP_USER);
@@ -1880,7 +1895,7 @@ asmlinkage long sys_getcwd(char __user *
 		char * cwd;
 
 		cwd = __d_path(pwd, pwdmnt, root, rootmnt, page, PAGE_SIZE,
-			       DPATH_DELETED);
+			       DPATH_DELETED, &conds);
 		spin_unlock(&dcache_lock);
 
 		error = PTR_ERR(cwd);
Index: linux-2.6.19.1/include/linux/dcache.h
===================================================================
--- linux-2.6.19.1.orig/include/linux/dcache.h
+++ linux-2.6.19.1/include/linux/dcache.h
@@ -297,10 +297,10 @@ extern struct dentry * d_hash_and_lookup
 /* validate "insecure" dentry pointer */
 extern int d_validate(struct dentry *, struct dentry *);
 
-#define d_path(D, V, B, BL) d_path_flags(D, V, B, BL, DPATH_DELETED)
+#define d_path(D, V, B, BL) d_path_flags(D, V, B, BL, DPATH_DELETED, NULL)
 
 extern char * d_path_flags(struct dentry *, struct vfsmount *, char *, int,
-			   unsigned int);
+			   unsigned int, unsigned int *);
   
 /* Allocation counts.. */
 
