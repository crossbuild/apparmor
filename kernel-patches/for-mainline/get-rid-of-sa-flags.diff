---
 security/apparmor/apparmor.h |    7 +------
 security/apparmor/main.c     |   20 +-------------------
 2 files changed, 2 insertions(+), 25 deletions(-)

--- a/security/apparmor/apparmor.h
+++ b/security/apparmor/apparmor.h
@@ -145,7 +145,7 @@ extern struct aa_profile *null_complain_
  */
 
 struct aa_audit {
-	unsigned short type, flags;
+	unsigned short type;
 	unsigned int result;
 	gfp_t gfp_mask;
 	int error_code;
@@ -175,11 +175,6 @@ struct aa_audit {
 #define AA_AUDITTYPE_MSG	7
 #define AA_AUDITTYPE_SYSCALL	8
 
-/* audit flags */
-#define AA_AUDITFLAG_AUDITSS_SYSCALL 1 /* log syscall context */
-#define AA_AUDITFLAG_LOGERR	     2 /* log operations that failed due to
-					   non permission errors  */
-
 /* Flags for the permission check functions */
 #define AA_CHECK_FD	1  /* coming from a file descriptor */
 #define AA_CHECK_DIR	2  /* file type is directory */
--- a/security/apparmor/main.c
+++ b/security/apparmor/main.c
@@ -367,7 +367,6 @@ int aa_audit_message(struct aa_profile *
 	sa.type = AA_AUDITTYPE_MSG;
 	sa.name = fmt;
 	va_start(sa.vaval, fmt);
-	sa.flags = 0;
 	sa.gfp_mask = gfp;
 	sa.error_code = 0;
 	sa.result = 0;	/* fake failure: force message to be logged */
@@ -392,7 +391,6 @@ int aa_audit_syscallreject(struct aa_pro
 
 	sa.type = AA_AUDITTYPE_SYSCALL;
 	sa.name = msg;
-	sa.flags = 0;
 	sa.gfp_mask = gfp;
 	sa.error_code = 0;
 	sa.result = 0; /* failure */
@@ -411,7 +409,6 @@ int aa_audit(struct aa_profile *profile,
 	struct audit_context *audit_cxt;
 
 	const char *logcls;
-	unsigned int flags;
 	int audit = 0,
 	    complain = 0,
 	    error = -EINVAL,
@@ -453,21 +450,13 @@ int aa_audit(struct aa_profile *profile,
 		logcls = complain ? "PERMITTING" : "REJECTING";
 	}
 
-	/* In future extend w/ per-profile flags
-	 * (flags |= sa->profile->flags)
-	 */
-	flags = sa->flags;
-	if (apparmor_logsyscall)
-		flags |= AA_AUDITFLAG_AUDITSS_SYSCALL;
-
-
 	/* Force full audit syscall logging regardless of global setting if
 	 * we are rejecting a syscall
 	 */
 	if (sa->type == AA_AUDITTYPE_SYSCALL) {
 		audit_cxt = current->audit_context;
 	} else {
-		audit_cxt = (flags & AA_AUDITFLAG_AUDITSS_SYSCALL) ?
+		audit_cxt = apparmor_logsyscall ?
 			current->audit_context : NULL;
 	}
 
@@ -593,7 +582,6 @@ int aa_attr(struct aa_profile *profile, 
 
 	sa.type = AA_AUDITTYPE_ATTR;
 	sa.iattr = iattr;
-	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 
 	check = 0;
@@ -626,7 +614,6 @@ int aa_perm_xattr(struct aa_profile *pro
 
 	sa.type = AA_AUDITTYPE_XATTR;
 	sa.name2 = operation;
-	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 
 	if (inode && S_ISDIR(inode->i_mode))
@@ -659,7 +646,6 @@ int aa_perm(struct aa_profile *profile, 
 
 	sa.type = AA_AUDITTYPE_FILE;
 	sa.mask = mask;
-	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 	error = aa_perm_dentry(profile, dentry, mnt, &sa, mask, check);
 
@@ -686,7 +672,6 @@ int aa_perm_dir(struct aa_profile *profi
 
 	sa.type = AA_AUDITTYPE_DIR;
 	sa.name2 = operation;
-	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 
 	return aa_perm_dentry(profile, dentry, mnt, &sa, mask, AA_CHECK_DIR);
@@ -699,7 +684,6 @@ int aa_perm_path(struct aa_profile *prof
 
 	sa.type = AA_AUDITTYPE_FILE;
 	sa.mask = mask;
-	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 	sa.name = name;
 
@@ -739,7 +723,6 @@ int aa_capability(struct aa_task_context
 	sa.type = AA_AUDITTYPE_CAP;
 	sa.name = NULL;
 	sa.capability = cap;
-	sa.flags = 0;
 	sa.error_code = 0;
 	sa.result = !error;
 	sa.gfp_mask = GFP_ATOMIC;
@@ -795,7 +778,6 @@ again:
 	aa_permerror2result(denied_mask, &sa);
 
 	sa.type = AA_AUDITTYPE_LINK;
-	sa.flags = 0;
 	sa.gfp_mask = GFP_KERNEL;
 
 	error = aa_audit(profile, &sa);
