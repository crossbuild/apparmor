 * Rip out AA_WARN() and replace it with direct calls to aa_audit_message().

---
 security/apparmor/apparmor.h         |    2 -
 security/apparmor/apparmorfs.c       |    8 +++----
 security/apparmor/lsm.c              |   17 +++++++---------
 security/apparmor/main.c             |    8 +++----
 security/apparmor/module_interface.c |   10 ++++-----
 security/apparmor/procattr.c         |   37 ++++++++++++++++-------------------
 6 files changed, 38 insertions(+), 44 deletions(-)

--- a/security/apparmor/apparmor.h
+++ b/security/apparmor/apparmor.h
@@ -71,8 +71,6 @@ extern unsigned int apparmor_path_max;
 		printk(KERN_INFO "AppArmor: " fmt "\n", ##args); \
 		aa_audit_message(NULL, (gfp), fmt, ##args); \
 	} while (0)
-#define AA_WARN(gfp, fmt, args...) \
-	aa_audit_message(NULL, (gfp), fmt, ##args);
 
 #define AA_ERROR(fmt, args...)	printk(KERN_ERR "AppArmor: " fmt, ##args)
 
--- a/security/apparmor/apparmorfs.c
+++ b/security/apparmor/apparmorfs.c
@@ -38,10 +38,10 @@ static char *aa_simple_write_to_buffer(c
 	 */
 	profile = aa_get_profile(current);
 	if (profile) {
-		AA_WARN(GFP_KERNEL, "REJECTING access to profile %s (%d "
-			"profile %s active %s)",
-			msg, current->pid,
-			profile->parent->name, profile->name);
+		aa_audit_message(NULL, GFP_KERNEL, "REJECTING access to "
+				 "profile %s (%d profile %s active %s)",
+				 msg, current->pid, profile->parent->name,
+				 profile->name);
 		aa_put_profile(profile);
 
 		data = ERR_PTR(-EPERM);
--- a/security/apparmor/lsm.c
+++ b/security/apparmor/lsm.c
@@ -126,9 +126,9 @@ static int apparmor_ptrace(struct task_s
 	child_cxt = aa_task_context(child);
 	child_profile = child_cxt ? child_cxt->profile : NULL;
 	if (cxt && (parent->nsproxy != child->nsproxy)) {
-		AA_WARN(GFP_ATOMIC,
-			"REJECTING ptrace across namespace of %d by %d",
-			parent->pid, child->pid);
+		aa_audit_message(NULL, GFP_ATOMIC, "REJECTING ptrace across "
+				 "namespace of %d by %d",
+				 parent->pid, child->pid);
 		error = -EPERM;
 	} else {
 		error = aa_may_ptrace(cxt, child_profile);
@@ -622,12 +622,11 @@ static int apparmor_setprocattr(struct t
 		profile = aa_get_profile(current);
 		if (profile) {
 			aa_put_profile(profile);
-			AA_WARN(GFP_KERNEL,
-				"Attempt by confined task %d "
-				"[user %d] to assign profile to task %d",
-				current->pid,
-				current->uid,
-				task->pid);
+			aa_audit_message(NULL, GFP_KERNEL, "Attempt by "
+					 "confined task %d [user %d] to "
+					 "assign profile to task %d",
+					 current->pid, current->uid,
+					 task->pid);
 			return -EACCES;
 		}
 		error = aa_setprocattr_setprofile(task, args);
--- a/security/apparmor/main.c
+++ b/security/apparmor/main.c
@@ -1024,7 +1024,6 @@ repeat:
 		if (PTR_ERR(old_profile) == -ESTALE)
 			goto repeat;
 		if (PTR_ERR(old_profile) == -EPERM) {
-			filename = mangle(filename, buffer);
 			aa_audit_message(profile, GFP_KERNEL,
 					 "REJECTING exec(2) of image '%s'. "
 					 "Unable to change profile, ptraced by "
@@ -1191,9 +1190,10 @@ int aa_change_hat(const char *hat_name, 
 
 	/* Dump out above debugging in WARN mode if we are in AUDIT mode */
 	if (APPARMOR_AUDIT(aa_task_context(current))) {
-		AA_WARN(GFP_KERNEL, "change_hat %s, 0x%llx (pid %d)",
-			hat_name ? hat_name : "NULL",
-			hat_magic, current->pid);
+		aa_audit_message(NULL, GFP_KERNEL, "change_hat %s, 0x%llx "
+				 "(pid %d)",
+				 hat_name ? hat_name : "NULL", hat_magic,
+				 current->pid);
 	}
 
 	new_cxt = aa_alloc_task_context(GFP_KERNEL);
--- a/security/apparmor/module_interface.c
+++ b/security/apparmor/module_interface.c
@@ -304,8 +304,8 @@ static struct aa_profile *aa_unpack_prof
 	return profile;
 
 fail:
-	AA_WARN(GFP_KERNEL, "Invalid profile %s",
-		profile && profile->name ? profile->name : "unknown");
+	aa_audit_message(NULL, GFP_KERNEL, "Invalid profile %s",
+			 profile && profile->name ? profile->name : "unknown");
 
 	if (profile)
 		free_aa_profile(profile);
@@ -345,14 +345,14 @@ static int aa_verify_header(struct aa_ex
 {
 	/* get the interface version */
 	if (!aa_is_u32(e, &e->version, "version")) {
-		AA_WARN(GFP_KERNEL, "Interface version missing");
+		aa_audit_message(NULL, GFP_KERNEL, "Interface version missing");
 		return -EPROTONOSUPPORT;
 	}
 
 	/* check that the interface version is currently supported */
 	if (e->version != 3) {
-		AA_WARN(GFP_KERNEL,
-			"Unsupported interface version (%d)", e->version);
+		aa_audit_message(NULL, GFP_KERNEL, "Unsupported interface "
+				 "version (%d)", e->version);
 		return -EPROTONOSUPPORT;
 	}
 	return 0;
--- a/security/apparmor/procattr.c
+++ b/security/apparmor/procattr.c
@@ -91,10 +91,10 @@ repeat:
 	else {
 		new_profile = aa_find_profile(args);
 		if (!new_profile) {
-			AA_WARN(GFP_KERNEL,
-				"Unable to switch task %d to profile"
-				"'%s'. No such profile.",
-				task->pid, args);
+			aa_audit_message(NULL, GFP_KERNEL, "Unable to switch "
+					 "task %d to profile '%s'. No such "
+					 "profile.",
+					 task->pid, args);
 
 			return -EINVAL;
 		}
@@ -112,25 +112,22 @@ repeat:
 	}
 
 	if (new_profile) {
-		AA_WARN(GFP_KERNEL,
-			"Switching task %d profile %s "
-			"active %s to new profile %s",
-			task->pid,
-			old_profile ? old_profile->parent->name :
-				"unconfined",
-			old_profile ? old_profile->name : "unconfined",
-			args);
+		aa_audit_message(NULL, GFP_KERNEL, "Switching task %d profile "
+				 "%s active %s to new profile %s",
+				 task->pid, old_profile ?
+				 old_profile->parent->name : "unconfined",
+				 old_profile ? old_profile->name : "unconfined",
+				 args);
 	} else {
 		if (old_profile) {
-			AA_WARN(GFP_KERNEL,
-				"Unconfining task %d profile %s active %s",
-				task->pid,
-				old_profile->parent->name,
-				old_profile->name);
+			aa_audit_message(NULL, GFP_KERNEL, "Unconfining task "
+					 "%d profile %s active %s",
+					 task->pid, old_profile->parent->name,
+					 old_profile->name);
 		} else {
-			AA_WARN(GFP_KERNEL,
-				"task %d is already unconfined",
-				task->pid);
+			aa_audit_message(NULL, GFP_KERNEL, "task %d is already "
+					 "unconfined",
+					 task->pid);
 		}
 	}
 
