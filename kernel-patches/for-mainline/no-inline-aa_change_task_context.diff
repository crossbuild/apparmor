Index: b/security/apparmor/apparmor.h
===================================================================
--- a/security/apparmor/apparmor.h
+++ b/security/apparmor/apparmor.h
@@ -244,6 +244,9 @@ extern struct aa_profile *aa_replace_pro
 					     u32 hat_magic);
 extern struct aa_task_context *lock_task_and_profiles(struct task_struct *task,
 						      struct aa_profile *profile);
+extern void aa_change_task_context(struct task_struct *task,
+				   struct aa_task_context *new_cxt,
+				   struct aa_profile *profile, u64 hat_magic);
 
 /* list.c */
 extern void aa_profilelist_release(void);
Index: b/security/apparmor/inline.h
===================================================================
--- a/security/apparmor/inline.h
+++ b/security/apparmor/inline.h
@@ -61,34 +61,6 @@ static inline struct aa_profile *aa_find
 	return profile;
 }
 
-/**
- * aa_change_task_context - switch a tasks to use a new context and profile
- * @task: task that is having its aa_task_context changed
- * @new_cxt: new aa_task_context to use after the switch
- * @profile: new profile to use after the switch
- * @hat_magic: hat value to switch to (0 for no hat)
- */
-static inline void
-aa_change_task_context(struct task_struct *task,
-		       struct aa_task_context *new_cxt,
-		       struct aa_profile *profile, u64 hat_magic)
-{
-	struct aa_task_context *old_cxt = aa_task_context(task);
-
-	if (old_cxt) {
-		list_del_init(&old_cxt->list);
-		call_rcu(&old_cxt->rcu, free_aa_task_context_rcu_callback);
-	}
-	if (new_cxt) {
-		new_cxt->caps_logged = CAP_EMPTY_SET;
-		new_cxt->hat_magic = hat_magic;
-		new_cxt->task = task;
-		new_cxt->profile = aa_dup_profile(profile);
-		list_move(&new_cxt->list, &profile->parent->task_contexts);
-	}
-	rcu_assign_pointer(task->security, new_cxt);
-}
-
 static inline struct aa_task_context *aa_alloc_task_context(void)
 {
 	struct aa_task_context *cxt;
Index: b/security/apparmor/main.c
===================================================================
--- a/security/apparmor/main.c
+++ b/security/apparmor/main.c
@@ -1270,3 +1270,31 @@ repeat:
 	rcu_read_unlock();
 	return cxt;
 }
+
+/**
+ * aa_change_task_context - switch a tasks to use a new context and profile
+ * @task: task that is having its aa_task_context changed
+ * @new_cxt: new aa_task_context to use after the switch
+ * @profile: new profile to use after the switch
+ * @hat_magic: hat value to switch to (0 for no hat)
+ */
+void aa_change_task_context(struct task_struct *task,
+			    struct aa_task_context *new_cxt,
+			    struct aa_profile *profile, u64 hat_magic)
+{
+	struct aa_task_context *old_cxt = aa_task_context(task);
+
+	if (old_cxt) {
+		list_del_init(&old_cxt->list);
+		call_rcu(&old_cxt->rcu, free_aa_task_context_rcu_callback);
+	}
+	if (new_cxt) {
+		new_cxt->caps_logged = CAP_EMPTY_SET;
+		new_cxt->hat_magic = hat_magic;
+		new_cxt->task = task;
+		new_cxt->profile = aa_dup_profile(profile);
+		list_move(&new_cxt->list, &profile->parent->task_contexts);
+	}
+	rcu_assign_pointer(task->security, new_cxt);
+}
+
