Index: b/security/apparmor/main.c
===================================================================
--- a/security/apparmor/main.c
+++ b/security/apparmor/main.c
@@ -1087,7 +1087,7 @@ void aa_release(struct task_struct *task
 
 /**
  * do_change_hat - actually switch hats
- * @hat_name: name of hat to swtich to
+ * @hat_name: name of hat to switch to
  * @cxt: current aa_task_context
  *
  * Switch to a new hat.  Return %0 on success, error otherwise.
Index: b/security/apparmor/inline.h
===================================================================
--- a/security/apparmor/inline.h
+++ b/security/apparmor/inline.h
@@ -60,7 +60,7 @@ static inline struct aa_profile *aa_get_
  * profile.  The cxt_lock must be held to ensure consistency against
  * other writers.  Some write paths (ex. aa_register) require
  * cxt->profile not to change over several operations, so the calling
- * function is responsible for grabing the cxt_lock to meet its
+ * function is responsible for grabbing the cxt_lock to meet its
  * consistency constraints before calling aa_switch_to_profile
  */
 static inline void aa_switch_to_profile(struct aa_task_context *cxt,
