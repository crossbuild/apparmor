---
 fs/ecryptfs/inode.c |   26 +++++++++++---------------
 fs/namei.c          |   14 ++++++++------
 fs/nfsd/vfs.c       |   22 ++++++++++++----------
 include/linux/fs.h  |    2 +-
 4 files changed, 32 insertions(+), 32 deletions(-)

--- a/fs/ecryptfs/inode.c
+++ b/fs/ecryptfs/inode.c
@@ -410,25 +410,21 @@ out:
 static int ecryptfs_link(struct dentry *old_dentry, struct inode *dir,
 			 struct dentry *new_dentry)
 {
-	struct dentry *lower_old_dentry;
-	struct vfsmount *lower_old_mnt;
+	struct nameidata2 old_nd = {};
+	struct nameidata2 new_parent = {};
 	struct dentry *lower_new_dentry;
-	struct vfsmount *lower_new_mnt;
-	struct dentry *lower_dir_dentry;
 	u64 file_size_save;
 	int rc;
 
 	file_size_save = i_size_read(old_dentry->d_inode);
-	lower_old_dentry = ecryptfs_dentry_to_lower(old_dentry);
-	lower_old_mnt = ecryptfs_dentry_to_lower_mnt(old_dentry);
+	old_nd.dentry = ecryptfs_dentry_to_lower(old_dentry);
+	old_nd.mnt = ecryptfs_dentry_to_lower_mnt(old_dentry);
 	lower_new_dentry = ecryptfs_dentry_to_lower(new_dentry);
-	lower_new_mnt = ecryptfs_dentry_to_lower_mnt(new_dentry);
-	dget(lower_old_dentry);
+	new_parent.mnt = ecryptfs_dentry_to_lower_mnt(new_dentry);
+	dget(old_nd.dentry);
 	dget(lower_new_dentry);
-	lower_dir_dentry = lock_parent(lower_new_dentry);
-	rc = vfs_link(lower_old_dentry, lower_old_mnt,
-		      lower_dir_dentry->d_inode, lower_new_dentry,
-		      lower_new_mnt);
+	new_parent.dentry = lock_parent(lower_new_dentry);
+	rc = vfs_link(&old_nd, lower_new_dentry, &new_parent);
 	if (rc || !lower_new_dentry->d_inode)
 		goto out_lock;
 	rc = ecryptfs_interpose(lower_new_dentry, new_dentry, dir->i_sb, 0);
@@ -440,10 +436,10 @@ static int ecryptfs_link(struct dentry *
 		ecryptfs_inode_to_lower(old_dentry->d_inode)->i_nlink;
 	i_size_write(new_dentry->d_inode, file_size_save);
 out_lock:
-	unlock_dir(lower_dir_dentry);
+	unlock_dir(new_parent.dentry);
 	dput(lower_new_dentry);
-	dput(lower_old_dentry);
-	d_drop(lower_old_dentry);
+	dput(old_nd.dentry);
+	d_drop(old_nd.dentry);
 	d_drop(new_dentry);
 	d_drop(old_dentry);
 	return rc;
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -2255,15 +2255,18 @@ asmlinkage long sys_symlink(const char _
 	return sys_symlinkat(oldname, AT_FDCWD, newname);
 }
 
-int vfs_link(struct dentry *old_dentry, struct vfsmount *old_mnt, struct inode *dir, struct dentry *new_dentry, struct vfsmount *new_mnt)
+int vfs_link(struct nameidata2 *old_nd, struct dentry *new_dentry,
+	     struct nameidata2 *new_parent)
 {
+	struct dentry *old_dentry = old_nd->dentry;
 	struct inode *inode = old_dentry->d_inode;
+	struct inode *dir = new_parent->dentry->d_inode;
 	int error;
 
 	if (!inode)
 		return -ENOENT;
 
-	error = may_create(dir, new_dentry, NULL);
+	error = may_create(dir, new_dentry, new_parent);
 	if (error)
 		return error;
 
@@ -2280,8 +2283,8 @@ int vfs_link(struct dentry *old_dentry, 
 	if (S_ISDIR(old_dentry->d_inode->i_mode))
 		return -EPERM;
 
-	error = security_inode_link(old_dentry, old_mnt, dir, new_dentry,
-				    new_mnt);
+	error = security_inode_link(old_dentry, old_nd->mnt, dir, new_dentry,
+				    new_parent->mnt);
 	if (error)
 		return error;
 
@@ -2334,8 +2337,7 @@ asmlinkage long sys_linkat(int olddfd, c
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto out_unlock;
-	error = vfs_link(old_nd.dentry, old_nd.mnt, nd.dentry->d_inode,
-			 new_dentry, nd.mnt);
+	error = vfs_link(ND2(&old_nd), new_dentry, ND2(&nd));
 	dput(new_dentry);
 out_unlock:
 	mutex_unlock(&nd.dentry->d_inode->i_mutex);
--- a/fs/nfsd/vfs.c
+++ b/fs/nfsd/vfs.c
@@ -1517,8 +1517,10 @@ __be32
 nfsd_link(struct svc_rqst *rqstp, struct svc_fh *ffhp,
 				char *name, int len, struct svc_fh *tfhp)
 {
-	struct dentry	*ddir, *dnew, *dold;
-	struct inode	*dirp, *dest;
+	struct nameidata2 old_nd = {};
+	struct nameidata2 new_parent = {};
+	struct dentry	*dnew;
+	struct inode	*dest;
 	__be32		err;
 	int		host_err;
 
@@ -1537,22 +1539,22 @@ nfsd_link(struct svc_rqst *rqstp, struct
 		goto out;
 
 	fh_lock_nested(ffhp, I_MUTEX_PARENT);
-	ddir = ffhp->fh_dentry;
-	dirp = ddir->d_inode;
+	new_parent.dentry = ffhp->fh_dentry;
+	new_parent.mnt = ffhp->fh_export->ex_mnt;
 
-	dnew = lookup_one_len(name, ddir, len);
+	dnew = lookup_one_len(name, new_parent.dentry, len);
 	host_err = PTR_ERR(dnew);
 	if (IS_ERR(dnew))
 		goto out_nfserr;
 
-	dold = tfhp->fh_dentry;
-	dest = dold->d_inode;
+	old_nd.dentry = tfhp->fh_dentry;
+	old_nd.mnt = tfhp->fh_export->ex_mnt;
+	dest = old_nd.dentry->d_inode;
 
-	host_err = vfs_link(dold, tfhp->fh_export->ex_mnt, dirp,
-			    dnew, ffhp->fh_export->ex_mnt);
+	host_err = vfs_link(&old_nd, dnew, &new_parent);
 	if (!host_err) {
 		if (EX_ISSYNC(ffhp->fh_export)) {
-			err = nfserrno(nfsd_sync_dir(ddir));
+			err = nfserrno(nfsd_sync_dir(new_parent.dentry));
 			write_inode_now(dest, 1);
 		}
 		err = 0;
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -987,7 +987,7 @@ extern int vfs_create(struct nameidata2 
 extern int vfs_mkdir(struct nameidata2 *, struct dentry *, int);
 extern int vfs_mknod(struct nameidata2 *, struct dentry *, int, dev_t);
 extern int vfs_symlink(struct nameidata2 *, struct dentry *, const char *, int);
-extern int vfs_link(struct dentry *, struct vfsmount *, struct inode *, struct dentry *, struct vfsmount *);
+extern int vfs_link(struct nameidata2 *, struct dentry *, struct nameidata2 *);
 extern int vfs_rmdir(struct inode *, struct dentry *, struct vfsmount *);
 extern int vfs_unlink(struct inode *, struct dentry *, struct vfsmount *);
 extern int vfs_rename(struct inode *, struct dentry *, struct vfsmount *, struct inode *, struct dentry *, struct vfsmount *);
