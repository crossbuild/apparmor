Index: b/security/apparmor/apparmor.h
===================================================================
--- a/security/apparmor/apparmor.h
+++ b/security/apparmor/apparmor.h
@@ -72,8 +72,14 @@ static inline int mediated_filesystem(st
 		if (apparmor_debug)					\
 			printk(KERN_DEBUG "AppArmor: " fmt, ##args);	\
 	} while (0)
-#define AA_INFO(fmt, args...)	printk(KERN_INFO "AppArmor: " fmt, ##args)
-#define AA_WARN(fmt, args...)	printk(KERN_WARNING "AppArmor: " fmt, ##args)
+#define AA_INFO(gfp, fmt, args...) \
+	do { \
+		printk(KERN_INFO "AppArmor: " fmt, ##args); \
+		aa_audit_message(NULL, gfp, 0, fmt, ##args); \
+	} while (0)
+#define AA_WARN(gfp, fmt, args...) \
+	aa_audit_message(NULL, gfp, 0, fmt, ##args);
+
 #define AA_ERROR(fmt, args...)	printk(KERN_ERR "AppArmor: " fmt, ##args)
 
 /* basic AppArmor data structures */
Index: b/security/apparmor/apparmorfs.c
===================================================================
--- a/security/apparmor/apparmorfs.c
+++ b/security/apparmor/apparmorfs.c
@@ -166,7 +166,7 @@ static char *aa_simple_write_to_buffer(c
 	 */
 	profile = aa_get_profile(current);
 	if (profile) {
-		AA_WARN("REJECTING access to profile %s (%s(%d) "
+		AA_WARN(GFP_KERNEL, "REJECTING access to profile %s (%s(%d) "
 			"profile %s active %s)\n",
 			msg, current->comm, current->pid,
 			profile->parent->name, profile->name);
Index: b/security/apparmor/lsm.c
===================================================================
--- a/security/apparmor/lsm.c
+++ b/security/apparmor/lsm.c
@@ -628,7 +628,8 @@ static int apparmor_setprocattr(struct t
 
 		/* Only the current process may change it's hat */
 		if (current != task) {
-			AA_WARN("%s: Attempt by foreign task %s(%d) "
+			AA_WARN(GFP_KERNEL,
+				"%s: Attempt by foreign task %s(%d) "
 				"[user %d] to changehat of task %s(%d)\n",
 				__FUNCTION__,
 				current->comm,
@@ -655,7 +656,8 @@ static int apparmor_setprocattr(struct t
 		 */
 
 		if (!capable(CAP_SYS_ADMIN)) {
-			AA_WARN("%s: Unprivileged attempt by task %s(%d) "
+			AA_WARN(GFP_KERNEL,
+				"%s: Unprivileged attempt by task %s(%d) "
 				"[user %d] to assign profile to task %s(%d)\n",
 				__FUNCTION__,
 				current->comm,
@@ -679,7 +681,8 @@ static int apparmor_setprocattr(struct t
 				 */
 				error = size;
 		} else {
-			AA_WARN("%s: Attempt by confined task %s(%d) "
+			AA_WARN(GFP_KERNEL,
+				"%s: Attempt by confined task %s(%d) "
 				"[user %d] to assign profile to task %s(%d)\n",
 				__FUNCTION__,
 				current->comm,
@@ -693,8 +696,9 @@ static int apparmor_setprocattr(struct t
 		aa_put_profile(profile);
 	} else {
 		/* unknown operation */
-		AA_WARN("%s: Unknown setprocattr command '%.*s' by task %s(%d) "
-			"[user %d] for task %s(%d)\n",
+		AA_WARN(GFP_KERNEL,
+			"%s: Unknown setprocattr command '%.*s' by task %s(%d)"
+			" [user %d] for task %s(%d)\n",
 			__FUNCTION__,
 			size < 16 ? (int)size : 16,
 			cmd,
@@ -780,7 +784,7 @@ static int __init apparmor_init(void)
 		goto register_security_out;
 	}
 
-	AA_INFO("AppArmor initialized%s\n",
+	AA_INFO(GFP_KERNEL, "AppArmor initialized%s\n",
 		apparmor_complain ? complainmsg : "");
 	aa_audit_message(NULL, GFP_KERNEL, 0,
 		"AppArmor initialized%s\n",
@@ -833,9 +837,10 @@ static void __exit apparmor_exit(void)
 	destroy_apparmorfs();
 
 	if (unregister_security(&apparmor_ops))
-		AA_WARN("Unable to properly unregister AppArmor\n");
+		AA_INFO(GFP_KERNEL, "Unable to properly unregister "
+			"AppArmor\n");
 
-	AA_INFO("AppArmor protection removed\n");
+	AA_INFO(GFP_KERNEL, "AppArmor protection removed\n");
 	aa_audit_message(NULL, GFP_KERNEL, 0,
 		"AppArmor protection removed\n");
 }
Index: b/security/apparmor/main.c
===================================================================
--- a/security/apparmor/main.c
+++ b/security/apparmor/main.c
@@ -807,7 +807,7 @@ aa_register_find(struct aa_profile *prof
 
 			profile = aa_dup_profile(null_complain_profile);
 		} else {
-			AA_WARN("REJECTING exec(2) of image '%s'. "
+			AA_WARN(GFP_KERNEL, "REJECTING exec(2) of image '%s'. "
 				"Profile mandatory and not found "
 				"(%s(%d) profile %s active %s)\n",
 				name,
@@ -844,7 +844,8 @@ int aa_register(struct linux_binprm *bpr
 
 	filename = aa_get_name(filp->f_dentry, filp->f_vfsmnt, &buffer, 0);
 	if (IS_ERR(filename)) {
-		AA_WARN("%s: Failed to get filename\n", __FUNCTION__);
+		AA_WARN(GFP_KERNEL, "%s: Failed to get filename\n",
+			__FUNCTION__);
 		return -ENOENT;
 	}
 
@@ -907,7 +908,8 @@ repeat:
 			new_profile = aa_dup_profile(null_complain_profile);
 			exec_mode |= AA_EXEC_UNSAFE;
 		} else {
-			AA_WARN("%s: Rejecting exec(2) of image '%s'. "
+			AA_WARN(GFP_KERNEL,
+				"%s: Rejecting exec(2) of image '%s'. "
 				"Unable to determine exec qualifier "
 				"(%s (pid %d) profile %s active %s)\n",
 				__FUNCTION__,
@@ -1094,7 +1096,7 @@ int aa_change_hat(const char *hat_name, 
 
 	/* Dump out above debugging in WARN mode if we are in AUDIT mode */
 	if (APPARMOR_AUDIT(aa_task_context(current))) {
-		AA_WARN("%s: %s, 0x%llx (pid %d)\n",
+		AA_WARN(GFP_KERNEL, "%s: %s, 0x%llx (pid %d)\n",
 			__FUNCTION__, hat_name ? hat_name : "NULL",
 			hat_magic, current->pid);
 	}
Index: b/security/apparmor/module_interface.c
===================================================================
--- a/security/apparmor/module_interface.c
+++ b/security/apparmor/module_interface.c
@@ -288,7 +288,7 @@ static struct aa_profile *aa_unpack_prof
 	return profile;
 
 fail:
-	AA_WARN("Invalid profile %s\n",
+	AA_WARN(GFP_KERNEL, "Invalid profile %s\n",
 		profile && profile->name ? profile->name : "unknown");
 
 	if (profile)
@@ -329,13 +329,14 @@ static int aa_verify_header(struct aa_ex
 {
 	/* get the interface version */
 	if (!aa_is_u32(e, &e->version, "version")) {
-		AA_WARN("Interface version missing\n");
+		AA_WARN(GFP_KERNEL, "Interface version missing\n");
 		return -EPROTONOSUPPORT;
 	}
 
 	/* check that the interface version is currently supported */
 	if (e->version != 3) {
-		AA_WARN("Unsupported interface version (%d)\n", e->version);
+		AA_WARN(GFP_KERNEL,
+			"Unsupported interface version (%d)\n", e->version);
 		return -EPROTONOSUPPORT;
 	}
 	return 0;
Index: b/security/apparmor/procattr.c
===================================================================
--- a/security/apparmor/procattr.c
+++ b/security/apparmor/procattr.c
@@ -86,7 +86,8 @@ int aa_setprocattr_changehat(char *hatin
 
 	magic = simple_strtoull(token, &hat, 16);
 	if (hat == token || *hat != '^') {
-		AA_WARN("%s: Invalid input '%s'\n", __FUNCTION__, token);
+		AA_WARN(GFP_KERNEL, "%s: Invalid input '%s'\n",
+			__FUNCTION__, token);
 		goto out;
 	}
 
@@ -97,7 +98,8 @@ int aa_setprocattr_changehat(char *hatin
 		hat = NULL;
 
 	if (!hat && !magic) {
-		AA_WARN("%s: Invalid input, NULL hat and NULL magic\n",
+		AA_WARN(GFP_KERNEL,
+			"%s: Invalid input, NULL hat and NULL magic\n",
 			__FUNCTION__);
 		goto out;
 	}
@@ -145,7 +147,8 @@ repeat:
 	if (strcmp(name_copy, "unconfined") != 0) {
 		new_profile = aa_find_profile(name_copy);
 		if (!new_profile) {
-			AA_WARN("%s: Unable to switch task %s(%d) to profile"
+			AA_WARN(GFP_KERNEL,
+				"%s: Unable to switch task %s(%d) to profile"
 				"'%s'. No such profile.\n",
 				__FUNCTION__,
 				task->comm, task->pid,
@@ -167,7 +170,8 @@ repeat:
 	}
 
 	if (new_profile) {
-		AA_WARN("%s: Switching task %s(%d) "
+		AA_WARN(GFP_KERNEL,
+			"%s: Switching task %s(%d) "
 			"profile %s active %s to new profile %s\n",
 			__FUNCTION__,
 			task->comm, task->pid,
@@ -177,14 +181,16 @@ repeat:
 			name_copy);
 	} else {
 		if (old_profile) {
-			AA_WARN("%s: Unconfining task %s(%d) "
+			AA_WARN(GFP_KERNEL,
+				"%s: Unconfining task %s(%d) "
 				"profile %s active %s\n",
 				__FUNCTION__,
 				task->comm, task->pid,
 				old_profile->parent->name,
 				old_profile->name);
 		} else {
-			AA_WARN("%s: task %s(%d) "
+			AA_WARN(GFP_KERNEL,
+				"%s: task %s(%d) "
 				"is already unconfined\n",
 				__FUNCTION__, task->comm, task->pid);
 		}
