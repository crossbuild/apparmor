We always call remove_suid for a specific struct file *. Pass this
struct down into remove_suid and children instead of the dentry
of the file, so that we can call notify_change() with the vfsmount
and dentry of the file.

Index: linux-2.6.19/mm/filemap.c
===================================================================
--- linux-2.6.19.orig/mm/filemap.c
+++ linux-2.6.19/mm/filemap.c
@@ -1872,9 +1872,9 @@ repeat:
  *	if suid or (sgid and xgrp)
  *		remove privs
  */
-int should_remove_suid(struct dentry *dentry)
+int should_remove_suid(struct file *file)
 {
-	mode_t mode = dentry->d_inode->i_mode;
+	mode_t mode = file->f_dentry->d_inode->i_mode;
 	int kill = 0;
 
 	/* suid always must be killed */
@@ -1894,20 +1894,20 @@ int should_remove_suid(struct dentry *de
 	return 0;
 }
 
-int __remove_suid(struct dentry *dentry, int kill)
+int __remove_suid(struct file *file, int kill)
 {
 	struct iattr newattrs;
 
 	newattrs.ia_valid = ATTR_FORCE | kill;
-	return notify_change(dentry, &newattrs);
+	return notify_change(file->f_dentry, &newattrs);
 }
 
-int remove_suid(struct dentry *dentry)
+int remove_suid(struct file *file)
 {
-	int kill = should_remove_suid(dentry);
+	int kill = should_remove_suid(file);
 
 	if (unlikely(kill))
-		return __remove_suid(dentry, kill);
+		return __remove_suid(file, kill);
 
 	return 0;
 }
@@ -2269,7 +2269,7 @@ __generic_file_aio_write_nolock(struct k
 	if (count == 0)
 		goto out;
 
-	err = remove_suid(file->f_dentry);
+	err = remove_suid(file);
 	if (err)
 		goto out;
 
Index: linux-2.6.19/fs/ntfs/file.c
===================================================================
--- linux-2.6.19.orig/fs/ntfs/file.c
+++ linux-2.6.19/fs/ntfs/file.c
@@ -2162,7 +2162,7 @@ static ssize_t ntfs_file_aio_write_noloc
 		goto out;
 	if (!count)
 		goto out;
-	err = remove_suid(file->f_dentry);
+	err = remove_suid(file);
 	if (err)
 		goto out;
 	file_update_time(file);
Index: linux-2.6.19/fs/reiserfs/file.c
===================================================================
--- linux-2.6.19.orig/fs/reiserfs/file.c
+++ linux-2.6.19/fs/reiserfs/file.c
@@ -1378,7 +1378,7 @@ static ssize_t reiserfs_file_write(struc
 	if (count == 0)
 		goto out;
 
-	res = remove_suid(file->f_dentry);
+	res = remove_suid(file);
 	if (res)
 		goto out;
 
Index: linux-2.6.19/fs/splice.c
===================================================================
--- linux-2.6.19.orig/fs/splice.c
+++ linux-2.6.19/fs/splice.c
@@ -844,7 +844,7 @@ generic_file_splice_write_nolock(struct 
 	ssize_t ret;
 	int err;
 
-	err = remove_suid(out->f_dentry);
+	err = remove_suid(out);
 	if (unlikely(err))
 		return err;
 
@@ -890,10 +890,10 @@ generic_file_splice_write(struct pipe_in
 	ssize_t ret;
 	int err;
 
-	err = should_remove_suid(out->f_dentry);
+	err = should_remove_suid(out);
 	if (unlikely(err)) {
 		mutex_lock(&inode->i_mutex);
-		err = __remove_suid(out->f_dentry, err);
+		err = __remove_suid(out, err);
 		mutex_unlock(&inode->i_mutex);
 		if (err)
 			return err;
Index: linux-2.6.19/fs/xfs/linux-2.6/xfs_lrw.c
===================================================================
--- linux-2.6.19.orig/fs/xfs/linux-2.6/xfs_lrw.c
+++ linux-2.6.19/fs/xfs/linux-2.6/xfs_lrw.c
@@ -805,7 +805,7 @@ start:
 	     !capable(CAP_FSETID)) {
 		error = xfs_write_clear_setuid(xip);
 		if (likely(!error))
-			error = -remove_suid(file->f_dentry);
+			error = -remove_suid(file);
 		if (unlikely(error)) {
 			xfs_iunlock(xip, iolock);
 			goto out_unlock_mutex;
Index: linux-2.6.19/include/linux/fs.h
===================================================================
--- linux-2.6.19.orig/include/linux/fs.h
+++ linux-2.6.19/include/linux/fs.h
@@ -1712,9 +1712,9 @@ extern void __iget(struct inode * inode)
 extern void clear_inode(struct inode *);
 extern void destroy_inode(struct inode *);
 extern struct inode *new_inode(struct super_block *);
-extern int __remove_suid(struct dentry *, int);
-extern int should_remove_suid(struct dentry *);
-extern int remove_suid(struct dentry *);
+extern int __remove_suid(struct file *, int);
+extern int should_remove_suid(struct file *);
+extern int remove_suid(struct file *);
 extern void remove_dquot_ref(struct super_block *, int, struct list_head *);
 
 extern void __insert_inode_hash(struct inode *, unsigned long hashval);
Index: linux-2.6.19/mm/filemap_xip.c
===================================================================
--- linux-2.6.19.orig/mm/filemap_xip.c
+++ linux-2.6.19/mm/filemap_xip.c
@@ -379,7 +379,7 @@ xip_file_write(struct file *filp, const 
 	if (count == 0)
 		goto out_backing;
 
-	ret = remove_suid(filp->f_dentry);
+	ret = remove_suid(filp);
 	if (ret)
 		goto out_backing;
 
Index: linux-2.6.19/mm/shmem.c
===================================================================
--- linux-2.6.19.orig/mm/shmem.c
+++ linux-2.6.19/mm/shmem.c
@@ -1442,7 +1442,7 @@ shmem_file_write(struct file *file, cons
 	if (err || !count)
 		goto out;
 
-	err = remove_suid(file->f_dentry);
+	err = remove_suid(file);
 	if (err)
 		goto out;
 
