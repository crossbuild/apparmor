Index: linux-2.6.19/fs/namei.c
===================================================================
--- linux-2.6.19.orig/fs/namei.c
+++ linux-2.6.19/fs/namei.c
@@ -1854,7 +1854,7 @@ int vfs_mknod(struct inode *dir, struct 
 	if (!dir->i_op || !dir->i_op->mknod)
 		return -EPERM;
 
-	error = security_inode_mknod(dir, dentry, mode, dev);
+	error = security_inode_mknod(dir, mnt, dentry, mode, dev);
 	if (error)
 		return error;
 
Index: linux-2.6.19/include/linux/security.h
===================================================================
--- linux-2.6.19.orig/include/linux/security.h
+++ linux-2.6.19/include/linux/security.h
@@ -322,6 +322,7 @@ struct request_sock;
  *	is being done for a regular file, then the create hook will be called
  *	and not this hook.
  *	@dir contains the inode structure of parent of the new file.
+ *	@mnt is the vfsmount of the new dentry (may be NULL)
  *	@dentry contains the dentry structure of the new file.
  *	@mode contains the mode of the new file.
  *	@dev contains the the device number.
@@ -1225,8 +1226,8 @@ struct security_operations {
 	int (*inode_mkdir) (struct inode *dir, struct vfsmount *mnt,
 			    struct dentry *dentry, int mode);
 	int (*inode_rmdir) (struct inode *dir, struct dentry *dentry);
-	int (*inode_mknod) (struct inode *dir, struct dentry *dentry,
-	                    int mode, dev_t dev);
+	int (*inode_mknod) (struct inode *dir, struct vfsmount *mnt,
+			    struct dentry *dentry, int mode, dev_t dev);
 	int (*inode_rename) (struct inode *old_dir, struct dentry *old_dentry,
 	                     struct inode *new_dir, struct dentry *new_dentry);
 	int (*inode_readlink) (struct dentry *dentry);
@@ -1678,12 +1679,13 @@ static inline int security_inode_rmdir (
 }
 
 static inline int security_inode_mknod (struct inode *dir,
+					struct vfsmount *mnt,
 					struct dentry *dentry,
 					int mode, dev_t dev)
 {
 	if (unlikely (IS_PRIVATE (dir)))
 		return 0;
-	return security_ops->inode_mknod (dir, dentry, mode, dev);
+	return security_ops->inode_mknod (dir, mnt, dentry, mode, dev);
 }
 
 static inline int security_inode_rename (struct inode *old_dir,
@@ -2396,6 +2398,7 @@ static inline int security_inode_rmdir (
 }
 
 static inline int security_inode_mknod (struct inode *dir,
+					struct vfsmount *mnt,
 					struct dentry *dentry,
 					int mode, dev_t dev)
 {
Index: linux-2.6.19/security/dummy.c
===================================================================
--- linux-2.6.19.orig/security/dummy.c
+++ linux-2.6.19/security/dummy.c
@@ -298,8 +298,8 @@ static int dummy_inode_rmdir (struct ino
 	return 0;
 }
 
-static int dummy_inode_mknod (struct inode *inode, struct dentry *dentry,
-			      int mode, dev_t dev)
+static int dummy_inode_mknod (struct inode *inode, struct vfsmount *mnt,
+			      struct dentry *dentry, int mode, dev_t dev)
 {
 	return 0;
 }
Index: linux-2.6.19/security/selinux/hooks.c
===================================================================
--- linux-2.6.19.orig/security/selinux/hooks.c
+++ linux-2.6.19/security/selinux/hooks.c
@@ -2171,11 +2171,12 @@ static int selinux_inode_rmdir(struct in
 	return may_link(dir, dentry, MAY_RMDIR);
 }
 
-static int selinux_inode_mknod(struct inode *dir, struct dentry *dentry, int mode, dev_t dev)
+static int selinux_inode_mknod(struct inode *dir, struct vfsmount *mnt,
+			       struct dentry *dentry, int mode, dev_t dev)
 {
 	int rc;
 
-	rc = secondary_ops->inode_mknod(dir, dentry, mode, dev);
+	rc = secondary_ops->inode_mknod(dir, mnt, dentry, mode, dev);
 	if (rc)
 		return rc;
 
