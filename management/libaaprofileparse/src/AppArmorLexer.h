/** \file
 *  This C header file was generated by $ANTLR version 3.0.1
 *
 *     -  From the grammar source file : AppArmor.g
 *     -                            On : 2007-08-19 11:55:24
 *     -                 for the lexer : AppArmorLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 * View this file with tabs set to 8 (:set ts=8 in gvim) and indent at 4 (:set sw=4 in gvim)
 *
 * The lexer AppArmorLexerhas the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pAppArmorLexer, which is returned from a call to AppArmorLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the entry points are provided anyway.
 * * The entry points for AppArmorLexer are  as follows:
 *
 *  - void      pAppArmorLexer->T32(pAppArmorLexer)
 *  - void      pAppArmorLexer->T33(pAppArmorLexer)
 *  - void      pAppArmorLexer->T34(pAppArmorLexer)
 *  - void      pAppArmorLexer->T35(pAppArmorLexer)
 *  - void      pAppArmorLexer->T36(pAppArmorLexer)
 *  - void      pAppArmorLexer->T37(pAppArmorLexer)
 *  - void      pAppArmorLexer->T38(pAppArmorLexer)
 *  - void      pAppArmorLexer->T39(pAppArmorLexer)
 *  - void      pAppArmorLexer->T40(pAppArmorLexer)
 *  - void      pAppArmorLexer->T41(pAppArmorLexer)
 *  - void      pAppArmorLexer->T42(pAppArmorLexer)
 *  - void      pAppArmorLexer->T43(pAppArmorLexer)
 *  - void      pAppArmorLexer->T44(pAppArmorLexer)
 *  - void      pAppArmorLexer->T45(pAppArmorLexer)
 *  - void      pAppArmorLexer->T46(pAppArmorLexer)
 *  - void      pAppArmorLexer->T47(pAppArmorLexer)
 *  - void      pAppArmorLexer->T48(pAppArmorLexer)
 *  - void      pAppArmorLexer->T49(pAppArmorLexer)
 *  - void      pAppArmorLexer->T50(pAppArmorLexer)
 *  - void      pAppArmorLexer->T51(pAppArmorLexer)
 *  - void      pAppArmorLexer->T52(pAppArmorLexer)
 *  - void      pAppArmorLexer->T53(pAppArmorLexer)
 *  - void      pAppArmorLexer->T54(pAppArmorLexer)
 *  - void      pAppArmorLexer->T55(pAppArmorLexer)
 *  - void      pAppArmorLexer->T56(pAppArmorLexer)
 *  - void      pAppArmorLexer->T57(pAppArmorLexer)
 *  - void      pAppArmorLexer->T58(pAppArmorLexer)
 *  - void      pAppArmorLexer->T59(pAppArmorLexer)
 *  - void      pAppArmorLexer->T60(pAppArmorLexer)
 *  - void      pAppArmorLexer->T61(pAppArmorLexer)
 *  - void      pAppArmorLexer->T62(pAppArmorLexer)
 *  - void      pAppArmorLexer->T63(pAppArmorLexer)
 *  - void      pAppArmorLexer->T64(pAppArmorLexer)
 *  - void      pAppArmorLexer->T65(pAppArmorLexer)
 *  - void      pAppArmorLexer->T66(pAppArmorLexer)
 *  - void      pAppArmorLexer->T67(pAppArmorLexer)
 *  - void      pAppArmorLexer->T68(pAppArmorLexer)
 *  - void      pAppArmorLexer->T69(pAppArmorLexer)
 *  - void      pAppArmorLexer->T70(pAppArmorLexer)
 *  - void      pAppArmorLexer->T71(pAppArmorLexer)
 *  - void      pAppArmorLexer->T72(pAppArmorLexer)
 *  - void      pAppArmorLexer->T73(pAppArmorLexer)
 *  - void      pAppArmorLexer->T74(pAppArmorLexer)
 *  - void      pAppArmorLexer->T75(pAppArmorLexer)
 *  - void      pAppArmorLexer->T76(pAppArmorLexer)
 *  - void      pAppArmorLexer->T77(pAppArmorLexer)
 *  - void      pAppArmorLexer->T78(pAppArmorLexer)
 *  - void      pAppArmorLexer->T79(pAppArmorLexer)
 *  - void      pAppArmorLexer->T80(pAppArmorLexer)
 *  - void      pAppArmorLexer->T81(pAppArmorLexer)
 *  - void      pAppArmorLexer->T82(pAppArmorLexer)
 *  - void      pAppArmorLexer->T83(pAppArmorLexer)
 *  - void      pAppArmorLexer->T84(pAppArmorLexer)
 *  - void      pAppArmorLexer->T85(pAppArmorLexer)
 *  - void      pAppArmorLexer->T86(pAppArmorLexer)
 *  - void      pAppArmorLexer->T87(pAppArmorLexer)
 *  - void      pAppArmorLexer->T88(pAppArmorLexer)
 *  - void      pAppArmorLexer->T89(pAppArmorLexer)
 *  - void      pAppArmorLexer->T90(pAppArmorLexer)
 *  - void      pAppArmorLexer->T91(pAppArmorLexer)
 *  - void      pAppArmorLexer->T92(pAppArmorLexer)
 *  - void      pAppArmorLexer->T93(pAppArmorLexer)
 *  - void      pAppArmorLexer->T94(pAppArmorLexer)
 *  - void      pAppArmorLexer->T95(pAppArmorLexer)
 *  - void      pAppArmorLexer->T96(pAppArmorLexer)
 *  - void      pAppArmorLexer->T97(pAppArmorLexer)
 *  - void      pAppArmorLexer->NEWLINE(pAppArmorLexer)
 *  - void      pAppArmorLexer->LESS_THAN(pAppArmorLexer)
 *  - void      pAppArmorLexer->GREATER_THAN(pAppArmorLexer)
 *  - void      pAppArmorLexer->LEFT_BRACE(pAppArmorLexer)
 *  - void      pAppArmorLexer->RIGHT_BRACE(pAppArmorLexer)
 *  - void      pAppArmorLexer->AT(pAppArmorLexer)
 *  - void      pAppArmorLexer->DOLLAR(pAppArmorLexer)
 *  - void      pAppArmorLexer->LEFT_PAREN(pAppArmorLexer)
 *  - void      pAppArmorLexer->RIGHT_PAREN(pAppArmorLexer)
 *  - void      pAppArmorLexer->PLUS(pAppArmorLexer)
 *  - void      pAppArmorLexer->EQUALS(pAppArmorLexer)
 *  - void      pAppArmorLexer->COMMENT_OR_INCLUDE(pAppArmorLexer)
 *  - void      pAppArmorLexer->INCLUDE(pAppArmorLexer)
 *  - void      pAppArmorLexer->SOL_COMMENT(pAppArmorLexer)
 *  - void      pAppArmorLexer->EOL_COMMENT(pAppArmorLexer)
 *  - void      pAppArmorLexer->COMMENT(pAppArmorLexer)
 *  - void      pAppArmorLexer->ANYTHING_NOT_QUOTED(pAppArmorLexer)
 *  - void      pAppArmorLexer->QUOTED_STRING(pAppArmorLexer)
 *  - void      pAppArmorLexer->PATH(pAppArmorLexer)
 *  - void      pAppArmorLexer->UNQUOTED_PATH(pAppArmorLexer)
 *  - void      pAppArmorLexer->LIST_VAR_START(pAppArmorLexer)
 *  - void      pAppArmorLexer->BOOL_VAR_START(pAppArmorLexer)
 *  - void      pAppArmorLexer->RULE(pAppArmorLexer)
 *  - void      pAppArmorLexer->IDENT_START(pAppArmorLexer)
 *  - void      pAppArmorLexer->IDENT_CONTINUE(pAppArmorLexer)
 *  - void      pAppArmorLexer->REAL_IDENT(pAppArmorLexer)
 *  - void      pAppArmorLexer->IDENT(pAppArmorLexer)
 *  - void      pAppArmorLexer->WS(pAppArmorLexer)
 *  - void      pAppArmorLexer->Tokens(pAppArmorLexer)
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_AppArmorLexer_H
#define _AppArmorLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "libaaprofileparse.h"
#include "antlr/antlr3collections.h"

void init_stream_vector(void);
void close_streams (void);


#ifdef	WIN32
// Disable: Unreferenced parameter,                - Rules with parameters that are not used
//          constant conditional,                  - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable        - tree rewrite vairables declared but not needed
//          Unreferenced local variable            - lexer rulle decalres but does not always use _type
//          potentially unitialized variable used  - retval always returned from a rule 
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */



/** Context tracking structure for AppArmorLexer
 */
typedef struct AppArmorLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

    void (*mT32)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT33)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT34)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT35)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT36)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT37)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT38)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT39)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT40)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT41)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT42)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT43)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT44)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT45)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT46)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT47)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT48)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT49)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT50)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT51)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT52)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT53)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT54)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT55)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT56)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT57)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT58)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT59)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT60)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT61)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT62)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT63)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT64)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT65)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT66)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT67)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT68)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT69)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT70)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT71)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT72)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT73)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT74)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT75)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT76)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT77)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT78)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT79)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT80)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT81)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT82)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT83)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT84)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT85)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT86)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT87)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT88)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT89)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT90)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT91)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT92)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT93)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT94)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT95)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT96)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mT97)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mNEWLINE)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mLESS_THAN)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mGREATER_THAN)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mLEFT_BRACE)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mRIGHT_BRACE)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mAT)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mDOLLAR)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mLEFT_PAREN)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mRIGHT_PAREN)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mPLUS)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mEQUALS)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mCOMMENT_OR_INCLUDE)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mINCLUDE)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mSOL_COMMENT)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mEOL_COMMENT)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mCOMMENT)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mANYTHING_NOT_QUOTED)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mQUOTED_STRING)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mPATH)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mUNQUOTED_PATH)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mLIST_VAR_START)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mBOOL_VAR_START)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mRULE)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mIDENT_START)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mIDENT_CONTINUE)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mREAL_IDENT)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mIDENT)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mWS)	(struct AppArmorLexer_Ctx_struct * ctx);
    void (*mTokens)	(struct AppArmorLexer_Ctx_struct * ctx);
    unsigned char * (*getGrammarFileName)();
    void	    (*free)   (struct AppArmorLexer_Ctx_struct * ctx);
        
}
    AppArmorLexer, * pAppArmorLexer;

/* Function protoypes for the lexer functions that external translation units
 * may wish to call.
 */
ANTLR3_API pAppArmorLexer AppArmorLexerNew         (pANTLR3_INPUT_STREAM     instream);/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define GREATER_THAN      11
#define EOL_COMMENT      5
#define LESS_THAN      8
#define T70      70
#define COMMENT_OR_INCLUDE      25
#define T74      74
#define T85      85
#define NEWLINE      6
#define INCLUDE      7
#define T32      32
#define T81      81
#define REAL_IDENT      30
#define PLUS      15
#define T41      41
#define AT      22
#define T62      62
#define LEFT_PAREN      18
#define IDENT      9
#define LIST_VAR_START      13
#define T68      68
#define T73      73
#define T84      84
#define T33      33
#define IDENT_START      28
#define T78      78
#define WS      31
#define SOL_COMMENT      4
#define T42      42
#define UNQUOTED_PATH      10
#define DOLLAR      23
#define T96      96
#define T71      71
#define T72      72
#define T94      94
#define T76      76
#define EQUALS      16
#define T75      75
#define BOOL_VAR_START      17
#define T89      89
#define T67      67
#define T60      60
#define T82      82
#define T49      49
#define PATH      27
#define RIGHT_BRACE      14
#define T79      79
#define T36      36
#define T58      58
#define T93      93
#define T35      35
#define RULE      21
#define T83      83
#define T61      61
#define T45      45
#define T34      34
#define T64      64
#define T91      91
#define T37      37
#define T86      86
#define T51      51
#define T46      46
#define T77      77
#define T38      38
#define T69      69
#define T39      39
#define LEFT_BRACE      20
#define T44      44
#define T55      55
#define T95      95
#define T50      50
#define T92      92
#define T43      43
#define T40      40
#define T66      66
#define ANYTHING_NOT_QUOTED      26
#define COMMENT      24
#define T88      88
#define T63      63
#define T57      57
#define T65      65
#define T56      56
#define T87      87
#define T80      80
#define IDENT_CONTINUE      29
#define T59      59
#define T97      97
#define T48      48
#define QUOTED_STRING      12
#define T54      54
#define EOF      -1
#define T47      47
#define Tokens      98
#define T53      53
#define T52      52
#define T90      90
#define RIGHT_PAREN      19
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

/* End of token definitions for AppArmorLexer
 * =============================================================================
 */
/** \} */

#endif
/* END - Note:Keep extra linefeed to satisfy UNIX systems */
