/* ------------------------------------------------------------------
*
*    Copyright (C) 2002-2006 Novell/SUSE
*
*    This program is free software; you can redistribute it and/or
*    modify it under the terms of version 2 of the GNU General Public
*    License published by the Free Software Foundation.
*
  ------------------------------------------------------------------*/
{
  import "Label";
  import "Wizard";
  import "Popup";
  import "Sequencer";
  include "subdomain/apparmor_packages.ycp";
  include "subdomain/apparmor_profile_check.ycp";
  textdomain  "yast2-apparmor";

  boolean done  = false;
  string type   = "";
  string status = "";

  map CMDS = $[ ];
  CMDS["CMD_ALLOW"]          = _("&Allow");
  CMDS["CMD_DENY"]           = _("&Deny");
  CMDS["CMD_ABORT"]          = _("Abo&rt");
  CMDS["CMD_FINISHED"]       = _("&Finish");
  CMDS["CMD_INHERIT"]        = _("&Inherit");
  CMDS["CMD_PROFILE"]        = _("&Profile");
  CMDS["CMD_UNCONFINED"]     = _("&Unconfined");
  CMDS["CMD_NEW"]            = _("&Edit");
  CMDS["CMD_GLOB"]           = _("&Glob");
  CMDS["CMD_GLOBEXT"]        = _("Glob w/E&xt");
  CMDS["CMD_ADDHAT"]         = _("&Add Requested Hat");
  CMDS["CMD_USEDEFAULT"]     = _("&Use Default Hat");
  CMDS["CMD_SCAN"]           = _("&Scan system log for AppArmor events");
  CMDS["CMD_VIEW_REPO"]      = _("&View Profile");
  CMDS["CMD_USE_REPO"]       = _("&Use Profile");
  CMDS["CMD_CREATE_PROFILE"] = _("&Create New Profile");

  if (!installAppArmorPackages()) {
    return;
  }
  if (!checkProfileSyntax()) {
    return;
  }

  // initiate the handshake with the backend agent
  map agent_data = (map) SCR::Read(.logprof);

  // is the backend just starting up?
  type   = (string) agent_data["type"]:"handshake_error";
  status = (string) agent_data["status"]:"handshake_error";
  if((type != "initial_handshake") || (status != "backend_starting")) {
    Popup::Error(_("Synchronization error between frontend and backend."));
    done = true;
    return;
  }

  // tell the backend tht we're just starting also...
  agent_data["status"] = "frontend_starting";
  SCR::Write(.logprof, agent_data);

  // open up the initial form window...
  Wizard::CreateDialog();

  // start our main event
  repeat {

    agent_data  = (map) SCR::Read(.logprof);

    string type = (string) agent_data["type"]:"error";
    if(type == "initial_handshake") {
      Popup::Error(_("Synchronization error between frontend and backend."));
      done = true;
      return;
    }

    if(type == "wizard") {

      string command = "CMD_ABORT";

      string title             = agent_data["title"]:_("AppArmor Profile Wizard");
      string helptext          = agent_data["helptext"]:_("     <b>AppArmor Profiling Wizard</b><br>
       This wizard presents entries generated by the AppArmor access control module. You can generate highly optimized and robust security profiles by using the suggestions made by AppArmor. AppArmor suggests that you allow or deny access to specific resources or define execute permission for entries. These questions that display were logged during the normal application execution test previously performed. <br>
       The following help text describes the detail of the security profile syntax used by AppArmor. <br><br>At any stage, you may customize the profile entry by overriding the suggestion. This overview will assist you in your options. Refer to the Admin Guide for step-by-step instructions.
<br><br>

       <b>Access Modes</b><br>

       File permission access modes consists of combinations of
       the following six modes:

<ul>   <li>r    - read</li>
       <li>w    - write</li>
       <li>m    - mmap PROT_EXEC</li>
       <li>px   - discrete profile execute</li>
       <li>ux   - unconfined execute</li>
       <li>ix   - inherit execute</li>
       <li>l    - link</li>
</ul>
<p><br>
       <b>Details for Access Modes</b>
<br><br>
       <b>Read mode</b><br>
           Allows the program to have read access to the
           resource. Read access is required for shell scripts
           and other interpreted content, and determines if an
           executing process can core dump or be attached to with
           ptrace(2).  (ptrace(2) is used by utilities such as
           strace(1), ltrace(1), and gdb(1).)
       <br>
       <br>
       <b>Write mode</b><br>
           Allows the program to have write access to the
           resource. Files must have this permission if they are
           to be unlinked (removed.)
       <br>
       <br>
       <b>Mmap PROT_EXEC mode</b><br>
           Allows the program to call mmap with PROT_EXEC on the
           resource. 
       <br>
       <br>


       <b>Unconfined execute mode</b><br>

           Allows the program to execute the resource without any
           AppArmor profile being applied to the executed
           resource. Requires listing execute mode as well.
           Incompatible with Inherit and Discrete Profile execute
           entries.
       <br><br>

           This mode is useful when a confined program needs to
           be able to perform a privileged operation, such as
           rebooting the machine. By placing the privileged section
           in another executable and granting unconfined execution rights,
	   it is possible to bypass the mandatory
           constraints imposed on all confined processes.
           For more information on what is constrained, see the
           subdomain(7) man page.
<br><br>     <b>Discrete Profile execute mode</b><br>
           This mode requires that a discrete security profile is
           defined for a resource executed at a AppArmor domain
           transition.  If there is no profile defined then the
           access will be denied.  Incompatible with Inherit and
           Unconstrained execute entries.
       <br>
   <br>
    <b>Link mode</b><br>
           Allows the program to be able to create and remove a
           link with this name (including symlinks). When a link
           is created, the file that is being linked to MUST have
           the same access permissions as the link being created
           (with the exception that the destination does not have
           to have link access.) Link access is required for
           unlinking a file.
       <br>
       <br>
                 <b>Globbing</b>
  <br>
       <br>
       File resources may be specified with a globbing syntax
       similar to that used by popular shells, such as csh(1),
       bash(1), zsh(1).
       <br>

       <ul>
        <li><b>*</b>   can substitute for any number of characters, excepting
          '/'<li>

        <li><b>**</b>  can substitute for any number of characters, including         '/'</li>


       <li><b>?</b>   can substitute for any single character excepting '/'</li>
       <li><b>[abc]</b> will substitute for the single character a, b, or c</li>
       <li><b>[a-c]</b> will substitute for the single character a, b, or c</li>
       <li><b>{ab,cd}</b> will expand to one rule to match ab, one rule to match           cd</li>\n
       </ul>

        <br>
        <br>
       <b>Clean Exec - for sanitized execution</b>
   <br>
        <br>
        The Clean Exec option for the discrete profile and unconstrained 
        execute permissions provide added security by stripping the 
        enviroment that is inherited by the child program of specific 
        variables. You will be prompted to choose whether you want to sanitize the
        enviroment if you choose 'p' or 'u' during the profiling process.
        The variables are:
        <ul> 
        <li>GCONV_PATH</li>
        <li>GETCONF_DIR</li>
        <li>HOSTALIASES</li>
        <li>LD_AUDIT</li>
        <li>LD_DEBUG</li>
        <li>LD_DEBUG_OUTPUT</li>
        <li>LD_DYNAMIC_WEAK</li>
        <li>LD_LIBRARY_PATH</li>
        <li>LD_ORIGIN_PATH</li>
        <li>LD_PRELOAD</li>
        <li>LD_PROFILE</li>
        <li>LD_SHOW_AUXV</li>
        <li>LD_USE_LOAD_BIAS</li>
        <li>LOCALDOMAIN</li>
        <li>LOCPATH</li>
        <li>MALLOC_TRACE</li>
        <li>NLSPATH</li>
        <li>RESOLV_HOST_CONF</li>
        <li>RES_OPTION</li>
        <li>TMPDIR</li>
        <li>TZDIR</li> </ul>

");
                                            
      list<string> headers     = agent_data["headers"]:[];
      list<string> options     = agent_data["options"]:[];
      list<string> functions   = agent_data["functions"]:["CMD_ABORT"];
      string explanation       = agent_data["explanation"]:"";
      string default_button    = agent_data["default"]:"NO_DEFAULT";
      integer selected         = agent_data["selected"]:0;

      integer idx = 0;

      // build up the list of headers
      term ui_headers = `VBox(`VSpacing(0.5));
      while(idx < size(headers)) {
        string field = headers[idx]:"MISSING FIELD";
        string value = (string) tostring(headers[idx+1]:"MISSING VALUE");
        ui_headers = add(ui_headers, `Left(`HBox(`Heading(field), `HSpacing(0.5), `HWeight(75, `Label(value)))));
        idx = idx + 2;
      }
      ui_headers = add(ui_headers, `VSpacing(0.5));

      // build up the option list if we have one
      idx = 0;
      term ui_options = `VBox(`VSpacing(0.5));
      foreach (string option, options, ``{
        ui_options = add(ui_options, `Left(`RadioButton(`id(idx), option)));
        idx = idx + 1;
      });
      ui_options = add(ui_options, `VSpacing(0.5));

      // build up the set of buttons for the different actions we support
      term ui_functions = `HBox( `HSpacing(`opt(`hstretch), 0.1) );
      foreach (string function, functions, ``{
        if((function != "CMD_ABORT") && (function != "CMD_FINISHED")) {
          string buttontext = CMDS[function]:"MISSING BUTTON TEXT";
          ui_functions = add(ui_functions, `HCenter(`PushButton(`id(function), buttontext)));
        }
      });
      ui_functions = add(ui_functions, `HSpacing(`opt(`hstretch), 0.1));

      // throw it all together
      term contents = `VBox(
                        `Top(
                          `VBox(
                            ui_headers,
                            `Label(explanation),
                            `RadioButtonGroup(ui_options),
                            `VSpacing(`opt(`vstretch), 1),
                            ui_functions
                          )
                        )
                      );

      // update the ui to reflect our new form state...
      Wizard::SetContents(title, contents, helptext, false, true);
      // fix up the label on the next/finish button
      Wizard::SetNextButton(`next, Label::FinishButton() );

      // select and enable to correct buttons
      idx = 0;
      foreach (string option, options, ``{
        UI::ChangeWidget (`id(idx), `Value, selected == idx);
        idx = idx + 1;
      });

      // set the focus to be the default action, if we have one
      if(default_button != "NO_DEFAULT") {
        UI::SetFocus(`id (default_button));
      }

      // wait for user input
      any ret = Wizard::UserInput();

      map answers = $[ ];

      // figure out which button they pressed
      if (ret == `abort) {
        answers["selection"] = "CMD_ABORT";
      } else if (ret == `next) {
        answers["selection"] = "CMD_FINISHED";
      } else {
        foreach (string function, functions, ``{
          if(ret == function) {
            answers["selection"] = function;
          }
        });
      }

      // figure out which option was selected
      idx = 0;
      foreach (string option, options, ``{
        if(UI::QueryWidget(`id(idx), `Value) == true) {
          answers["selected"] = idx;
        }
        idx = idx + 1;
      });

      // tell the backend what they did
      SCR::Write(.logprof, answers);

    } else if (type == "dialog-view-profile") {

      string user = agent_data["user"]:"MISSING USER";
      string profile = agent_data["profile"]:"MISSING PROFILE";
      string default_ans  = agent_data["default"]:"b";

      symbol focus = `focus_yes;
      if (default_ans == "b") {
        focus = `focus_no;
      }
      map answers = $[ ];
      if (Popup::AnyQuestion(_("Profile created by user ") + user,
        profile, _("&Use Profile"), _("&Back"), focus)) {
        answers["answer"] = "u";
      } else {
        answers["answer"] = "b";
      }
      // write the answers for the last dialog
      boolean written = SCR::Write(.logprof, answers);


    } else if (type == "dialog-yesno") {

      string question = agent_data["question"]:"MISSING QUESTION";
      string default_ans  = agent_data["default"]:"n";

      symbol focus = `focus_no;
      if(default_ans == "y") {
        focus = `focus_yes;
      }

      map answers = $[ ];
      if(Popup::AnyQuestion(Popup::NoHeadline(), question, _("&Yes"), _("&No"), focus)) {
        answers["answer"] = "y";
      } else {
        answers["answer"] = "n";
      }

      # write the answers for the last dialog
      boolean written = SCR::Write(.logprof, answers);

    } else if (type == "dialog-getstring") {

      string label = agent_data["label"]:"MISSING LABEL";
      string default_value = agent_data["default"]:"MISSING DEFAULT";

      term dialog = `VBox(
                    `TextEntry(`id (`stringfield), label, default_value),
                    `HBox(
                      `HWeight(1, `PushButton(`id(`okay), `opt(`default, `key_F10), _("&Okay"))),
                      `HSpacing(2),
                      `HWeight(1, `PushButton(`id(`cancel), `opt(`key_F9), _("&Cancel")))
                      )
                  );


      UI::OpenDialog(dialog);
      UI::SetFocus(`id(`stringfield));

      any poo = UI::UserInput();

      map answers = $[ ];
      if(poo == `okay) {
        answers["string"] = (string) UI::QueryWidget(`id(`stringfield), `Value);
      } else {
        answers["string"] = "";
      }

      UI::CloseDialog();

      # write the answers for the last dialog
      boolean written = SCR::Write(.logprof, answers);

    } else if (type == "dialog-getfile") {

      string description  = agent_data["description"]:"GETFILE: MISSING DESCRIPTION";
      string file_label   = agent_data["file_label"]:"GETFILE: MISSING FILE:LABEL";
      string okay_label   = agent_data["okay_label"]:"GETFILE: MISSING OKAY_LABEL";
      string cancel_label = agent_data["cancel_label"]:"GETFILE: MISSING CANCEL_LABEL";
      string browse_desc  = agent_data["browse_desc"]:"GETFILE: MISSING BROWSE_DESC";

      term dialog = `VBox(
                      `Top(
                        `VBox(
                          `VSpacing(1),
                          `Left(`Label(description)),
                          `VSpacing(0.5),
                          `Left(`TextEntry(`id(`filename), file_label, "")),
                          `VSpacing(`opt(`vstretch), 0.25)
                        )
                      ),
                      `HBox( `HCenter(`PushButton(`id(`browse), _("&Browse")))),
                      `HBox(
                        `HSpacing(`opt(`hstretch), 0.1),
                        `HCenter(`PushButton(`id(`okay), `opt(`default), okay_label)),
                        `HCenter(`PushButton(`id(`cancel), cancel_label)),
                        `HSpacing(`opt(`hstretch), 0.1),
                        `VSpacing(1)
                      )
                    );


      UI::OpenDialog(dialog);

      map<string,string> answers = $[ ];
      any poo = false;
      repeat {
        UI::SetFocus(`id(`filename));

        poo = UI::UserInput();
        if(poo == `okay) {
          answers["answer"]   = "okay";
          answers["filename"] = (string) UI::QueryWidget(`id(`filename), `Value);
        } else if(poo == `cancel) {
          answers["answer"]   = "cancel";
        } else if ( poo == `browse ) {
          string selectfilename = UI::AskForExistingFile( "/", "", browse_desc);
          UI::ChangeWidget(`id(`filename), `Value, selectfilename);
        }
      } until ((poo == `okay) || (poo == `cancel));

      UI::CloseDialog();

      // tell the backend what they picked
      boolean written = SCR::Write(.logprof, answers);

    } else if (type == "dialog-error") {

      string message = agent_data["message"]:"MISSING QUESTION";

      Popup::Error(message);

      map answers = $[ ];
      answers["answer"] = "okay";

      // tell the backend that the user has acknowledged the error
      boolean written = SCR::Write(.logprof, answers);

    } else if (type == "final_shutdown") {
      done = true;

      map answers = $[ ];
      answers["type"]   = "shutdown_acknowledge";
      answers["status"] = "shutting_down";

      // tell the backend that we're shutting down also
      boolean written = SCR::Write(.logprof, answers);

    } else {

      string errortext = "Email support@novell.com: " + type;
      Popup::Error(errortext);
      done = true;

    }


  } until ( done == true);

  Wizard::CloseDialog();

}
