/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/apparmor-reports/dialogs.ycp
 * Package:	Configuration of apparmor-reports
 * Summary:	Dialogs definitions
 * Authors:	David Drewelow <ddrewelow@suse.de>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "yast2-apparmor";

import "CWM";
import "CWMTab";
import "Label";
import "Wizard";
import "AppArmorReports";
import "Popup";

include "apparmor-reports/helps.ycp";

/*
	******************************************************************
	Variables
	******************************************************************
*/
list<string> capList = [
	"CAP_CHOWN",
	"CAP_DAC_OVERRIDE",
	"CAP_DAC_READ_SEARCH",
	"CAP_FOWNER",
	"CAP_FSETID",
	"CAP_KILL",
	"CAP_SETGID",
	"CAP_SETUID",
	"CAP_SETPCAP",
	"CAP_LINUX_IMMUTABLE",
	"CAP_NET_BIND_SERVICE",
	"CAP_NET_BROADCAST",
	"CAP_NET_ADMIN",
	"CAP_NET_RAW",
	"CAP_IPC_LOCK",
	"CAP_IPC_OWNER",
	"CAP_SYS_MODULE",
	"CAP_SYS_RAWIO",
	"CAP_SYS_CHROOT",
	"CAP_SYS_PTRACE",
	"CAP_SYS_PACCT",
	"CAP_SYS_ADMIN",
	"CAP_SYS_BOOT",
	"CAP_SYS_NICE",
	"CAP_SYS_RESOURCE",
	"CAP_SYS_TIME",
	"CAP_SYS_TTY_CONFIG",
	"CAP_MKNOD",
	"CAP_LEASE"
];


/*
	******************************************************************
	Utility Functions
	******************************************************************
*/
boolean TrulyAbort() {
    return !AppArmorReports::Modified() || Popup::ReallyAbort(true);
}

define void disableEventType() {
	UI::ChangeWidget(`id(`event_type_read), `Value, false);
	UI::ChangeWidget(`id(`event_type_write), `Value, false);
	UI::ChangeWidget(`id(`event_type_link), `Value, false);
	UI::ChangeWidget(`id(`event_type_exec), `Value, false);
	UI::ChangeWidget(`id(`event_type_mmap), `Value, false);
	UI::ChangeWidget(`id(`replaceEventType), `Enabled, true);
}

define void disableMode() {
	UI::ChangeWidget(`id(`mode_read), `Value, false);
	UI::ChangeWidget(`id(`mode_write), `Value, false);
	UI::ChangeWidget(`id(`mode_link), `Value, false);
	UI::ChangeWidget(`id(`mode_exec), `Value, false);
	UI::ChangeWidget(`id(`mode_mmap), `Value, false);
	UI::ChangeWidget(`id(`replaceMode), `Enabled, true);
}


// Return last page number of report (1000 records = 1 page)
define integer getLastPage(string type, map Settings, string name) {

    if ( type == "sir" || type == "sir" ) {
        if ( name != nil && name != "" ) {
            Settings["name"] = name;
        } else {
            y2error(_("No name provided for retrieving SIR report page count."));
            return 1;       // return a page count of 1
        }
    }

    Settings["type"] = type;
    Settings["getLastPage"] = "1";
    map<any,any> page = $[];
    page = (map) SCR::Read (.reports_parse, Settings);
    integer lastPage =  page["numPages"]:1;

    return lastPage;
}

// Check that aa-eventd is on
define boolean checkEventDb() {

    boolean dbActivated = false;
    integer dbOn = (integer) SCR::Read( .reports_parse, $["checkDb":"1"]);
    if ( dbOn == 1 ) dbActivated = true;

    return dbActivated;
}

define string unI18n(string weekday) {
    if ( weekday == _("Mon") ) { weekday = "Mon"; }
    if ( weekday == _("Tue") ) { weekday = "Tue"; }
    if ( weekday == _("Wed") ) { weekday = "Wed"; }
    if ( weekday == _("Thu") ) { weekday = "Thu"; }
    if ( weekday == _("Fri") ) { weekday = "Fri"; }
    if ( weekday == _("Sat") ) { weekday = "Sat"; }
    if ( weekday == _("Sun") ) { weekday = "Sun"; }

    return weekday;
}

/*
	******************************************************************
	Forms and Dialogs
	******************************************************************
*/

define term monthDateBox(map<string,any> repDb) {

    return (
    `ComboBox(`id(`monthdate), `opt(`notify), _("Day of Month"),  [
        `item(`id(`md_00)), _("All"),
        `item(`id(`md_01)), "1", `item(`id(`md_02)), "2", `item(`id(`md_03)), "3",
        `item(`id(`md_04)), "4", `item(`id(`md_05)), "5", `item(`id(`md_06)), "6",
        `item(`id(`md_07)), "7", `item(`id(`md_08)), "8", `item(`id(`md_09)), "9",
        `item(`id(`md_10)), "10", `item(`id(`md_11)), "11", `item(`id(`md_12)), "12",
        `item(`id(`md_13)), "13", `item(`id(`md_14)), "14", `item(`id(`md_15)), "15",
        `item(`id(`md_16)), "16", `item(`id(`md_17)), "17", `item(`id(`md_18)), "18",
        `item(`id(`md_19)), "19", `item(`id(`md_20)), "20", `item(`id(`md_21)), "21",
        `item(`id(`md_22)), "22", `item(`id(`md_23)), "23", `item(`id(`md_24)), "24",
        `item(`id(`md_25)), "25", `item(`id(`md_26)), "26", `item(`id(`md_27)), "27",
        `item(`id(`md_28)), "28", `item(`id(`md_29)), "29", `item(`id(`md_30)), "30",
        `item(`id(`md_31)), "31" ]
    ));

}

define term displayEmptyRep() {

    string myLabel = _("Events DB Not Initialized.");

    term newPage =

    `Frame( `id(`newpage), myLabel,

        `VBox(
            `HBox(
                `VSpacing(10),
                `Label( _("The events database has not been populated.  No records exist.")),
                `VSpacing(0.5)
            ),
            `HSpacing(`opt(`hstretch), 1.0),
            `VSpacing(1)
    ));


    return newPage;
}

term profileFilterForm =`VBox(

        `VSpacing( 0.5 ),
        `HBox(
            `TextEntry(`id(`prog), _("Program name")),
            `TextEntry(`id(`prof), _("Profile name")),
			`HStretch()
        ),
        `VSpacing( 0.5 ),
        `HBox(
            `TextEntry(`id(`pid), _("PID number")),
            `TextEntry(`id(`res), _("Detail")),
			`HStretch()
        ),
        `VSpacing( 1.0 ),
        `VBox(
        `HBox(
			`CheckBoxFrame(`id(`enable_mode_filter), _("Select Event Type"), false,
            `VBox(
                `VSpacing(0.5),
                `Left(`CheckBox(`id(`event_type_permit), `opt(`notify, `immediate ), _("Permit"), false)),
                `Left(`CheckBox(`id(`event_type_reject), `opt(`notify, `immediate ), _("Reject"), false)),
                `Left(`CheckBox(`id(`event_type_audit), `opt(`notify, `immediate ), _("Audit"), false)),
                `VSpacing(0.5)
            ))
		),
        `HSpacing( `opt(`hstretch), 1)
        ),
		`VSpacing( 1 ),
		`VBox(
            `Left(`ComboBox(`id(`sev), _("Severity"),  [
                _("All"), _("U"), _("00"), _("01"), _("02"), _("03"), _("04"),
                _("05"), _("06"), _("07"), _("08"), _("09"), _("10")

            ]))),
        `VSpacing( 1 ),
		`VStretch()
);

// Main (first) reporting form
define term viewSchedForm(list itemList) {

    string frame_label = _("Scheduled Reports");
    string verbose_info = "Pre-Configured";
    boolean has_restart = true;

    term vForm =
    `HBox(
    `HSpacing(1.5),
    `VBox(
        `VSpacing(0.4),
        `Frame(frame_label, `HBox(
        `HSpacing(0.5),
        `VBox(
            `Table(`id(`table), `opt(`notify), `header(_("Report Name"),
            _("Schedule"), _("Time"), _("Day"), _("Enabled")), itemList)
        ),
        `HSpacing(0.5)
        )),
        `VSpacing(0.3),
        `ReplacePoint(`id(`verboseBox), `RichText(verbose_info)),
        `HBox(
            `PushButton(`id(`add), _("Add")),
            `PushButton(`id(`edit), _("Edit")),
            `Left(`PushButton(`id(`del), _("Delete"))),

            `MenuButton( "&Other", [
                `item(`id(`runreport), _("Run Report") ),
                `item(`id(`viewreport),  _("View Report") )
            ])
        ),
        `VSpacing(0.4)
    ),
    `HSpacing(1.5)
    );

    return vForm;
}

term advFilterForm = `HBox(

	`CheckBoxFrame(`id(`enable_event_filter), _("Select Mode"), false,
    `VBox(
        `VSpacing(0.5),
        `Left(`CheckBox(`id(`mode_r), `opt(`notify, `immediate ), _("Read"), false)),
        `Left(`CheckBox(`id(`mode_w), `opt(`notify, `immediate ), _("Write"), false)),
        `Left(`CheckBox(`id(`mode_l), `opt(`notify, `immediate ), _("Link"), false)),
        `Left(`CheckBox(`id(`mode_m), `opt(`notify, `immediate ), _("MMap"), false)),
        `Left(`CheckBox(`id(`mode_ix), `opt(`notify, `immediate ), _("Inherit Execute"), false)),
        `Left(`CheckBox(`id(`mode_px), `opt(`notify, `immediate ), _("Profile Execute"), false)),
        `Left(`CheckBox(`id(`mode_Px), `opt(`notify, `immediate ), _("Profile Execute (clean env)"), false)),
        `Left(`CheckBox(`id(`mode_ux), `opt(`notify, `immediate ), _("Unconstrained Execute"), false)),
        `Left(`CheckBox(`id(`mode_Ux), `opt(`notify, `immediate ), _("Unconstrained Execute (clean env)"), false)),
        `VSpacing(0.5),
		`VStretch()
    )),
	`CheckBoxFrame(`id(`enable_cap_filter), _("Select Capabilities"), false,
	    `VBox(
			`MultiSelectionBox( "",  capList)
			/*
	        `Left(`CheckBox(`id(`cap_chown), `opt(`notify, `immediate ), _("CAP_CHOWN"), false)),
	        `Left(`CheckBox(`id(`cap_dac_override), `opt(`notify, `immediate ), _("CAP_DAC_OVERRIDE"), false)),
	        `Left(`CheckBox(`id(`cap_dac_read_search), `opt(`notify, `immediate ), _("CAP_DAC_READ_SEARCH"), false)),
	        `Left(`CheckBox(`id(`cap_fowner), `opt(`notify, `immediate ), _("CAP_FOWNER"), false)),
	        `Left(`CheckBox(`id(`cap_fsetid), `opt(`notify, `immediate ), _("CAP_FSETID"), false)),
	        `Left(`CheckBox(`id(`cap_kill), `opt(`notify, `immediate ), _("CAP_KILL"), false)),
	        `Left(`CheckBox(`id(`cap_setgid), `opt(`notify, `immediate ), _("CAP_SETGID"), false)),
	        `Left(`CheckBox(`id(`cap_setuid), `opt(`notify, `immediate ), _("CAP_SETUID"), false)),
	        `Left(`CheckBox(`id(`cap_setpcap), `opt(`notify, `immediate ), _("CAP_SETPCAP"), false)),
	        `Left(`CheckBox(`id(`cap_lnx_immu), `opt(`notify, `immediate ), _("CAP_LINUX_IMMUTABLE"), false)),
	        `Left(`CheckBox(`id(`cap_net_bind), `opt(`notify, `immediate ), _("CAP_NET_BIND_SERVICE"), false)),
	        `Left(`CheckBox(`id(`cap_net_cast), `opt(`notify, `immediate ), _("CAP_NET_BROADCAST"), false)),
	        `Left(`CheckBox(`id(`cap_net_adm), `opt(`notify, `immediate ), _("CAP_NET_ADMIN"), false)),
	        `Left(`CheckBox(`id(`cap_net_raw), `opt(`notify, `immediate ), _("CAP_NET_RAW"), false)),
	        `Left(`CheckBox(`id(`cap_ipc_lock), `opt(`notify, `immediate ), _("CAP_IPC_LOCK"), false)),
	        `Left(`CheckBox(`id(`cap_ipc_own), `opt(`notify, `immediate ), _("CAP_IPC_OWNER"), false)),
	        `Left(`CheckBox(`id(`cap_sys_mod), `opt(`notify, `immediate ), _("CAP_SYS_MODULE"), false)),
	        `Left(`CheckBox(`id(`cap_sys_io), `opt(`notify, `immediate ), _("CAP_SYS_RAWIO"), false)),
	        `Left(`CheckBox(`id(`cap_sys_chroot), `opt(`notify, `immediate ), _("CAP_SYS_CHROOT"), false)),
	        `Left(`CheckBox(`id(`cap_sys_ptrace), `opt(`notify, `immediate ), _("CAP_SYS_PTRACE"), false)),
	        `Left(`CheckBox(`id(`cap_sys_pacct), `opt(`notify, `immediate ), _("CAP_SYS_PACCT"), false)),
	        `Left(`CheckBox(`id(`cap_sys_adm), `opt(`notify, `immediate ), _("CAP_SYS_ADMIN"), false)),
	        `Left(`CheckBox(`id(`cap_sys_boot), `opt(`notify, `immediate ), _("CAP_SYS_BOOT"), false)),
	        `Left(`CheckBox(`id(`cap_sys_nice), `opt(`notify, `immediate ), _("CAP_SYS_NICE"), false)),
	        `Left(`CheckBox(`id(`cap_sys_res), `opt(`notify, `immediate ), _("CAP_SYS_RESOURCE"), false)),
	        `Left(`CheckBox(`id(`cap_sys_time), `opt(`notify, `immediate ), _("CAP_SYS_TIME"), false)),
	        `Left(`CheckBox(`id(`cap_sys_tty), `opt(`notify, `immediate ), _("CAP_SYS_TTY_CONFIG"), false)),
	        `Left(`CheckBox(`id(`cap_mknod), `opt(`notify, `immediate ), _("CAP_MKNOD"), false)),
	        `Left(`CheckBox(`id(`cap_lease), `opt(`notify, `immediate ), _("CAP_LEASE"), false)),
			*/
		)
	),
    `VSpacing( 1 ),
	`VStretch()
);


term AddFilterForm () {
	return(
     `VBox(
        `HBox(
            `HWeight( 5, `TextEntry(`id(`prog), _("Program name") )),
            `HWeight( 5, `TextEntry(`id(`prof), _("Profile name") ))
        ),
        `VSpacing(0.5),
        `HBox(
            `HWeight( 5, `TextEntry(`id(`pid), _("PID number") )),
            `HWeight( 5, `TextEntry(`id(`res), _("Detail") ) ),
            `HWeight( 5, `ComboBox(`id(`sev), _("Severity"),  [
                _("All"), _("U"), _("00"), _("01"), _("02"), _("03"), _("04"),
                _("05"), _("06"), _("07"), _("08"), _("09"), _("10")
            ]) )
        ),
        `VSpacing(2),
        `HBox(
			profileFilterForm
		)
    ));
}

// Here we save the newly created report config
any AddFilterDialog() {

    string caption = _("Add Report Filters");
    Wizard::SetContentsButtons( _("Create New Report - Set Filters "), AddFilterForm(), "Add Filter Text Here",
    Label::BackButton(), Label::SaveButton());

	// Turn off mode filtering by default
	UI::ChangeWidget(`id(`replaceEventType), `Enabled, false);
	UI::ChangeWidget(`id(`replaceMode), `Enabled, false);

    any ret = nil;

    while(true) {

        ret = UI::UserInput();

        if(ret == `abort || ret == `cancel) {
		    if(TrulyAbort()) break;
		    else continue;
        } else if(ret == `save || ret == `back) {
            break;
		} else if (ret == `event_type) {
			if (UI::QueryWidget(`id(`event_type), `Value) == true) {
				disableEventType();
			} else {
				UI::ChangeWidget(`id(`replaceEventType), `Enabled, false);
			}
		} else if (ret == `modeEnabled) {
			if (UI::QueryWidget(`id(`modeEnabled), `Value) == true) {
				disableMode();
			} else {
				UI::ChangeWidget(`id(`replaceMode), `Enabled, false);
			}
		} else if (ret == `modeEnabled) {
			Popup::Message("Unfinished for ret = modeenabled, dialogs.ycp");
            //AppArmorReports::configSettings();
            //AppArmorReports::addFilterSettings();

			// Set and save the new report info
			/*
            any error = (any) SCR::Write(.reports_sched, newRep);

            if (is(error, string)) {
                string erStr = tostring(error);
                Popup::Error("Error: " + erStr);
            }
			*/
			break;
		} else if (ret == `next) {
			AppArmorReports::PutSettings();
            //map<string,string> newRep = AppArmorReports::GetSettings();
			// FIXME - what to do?
			break;
        } else {
			string sret = tostring(ret);
			Popup::Message("Weird return in AddEditDialog: " + sret);
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

	if (ret == `next) ret = `restart;
	string sret = tostring(ret);
	Popup::Message("AddFiltRet: " + sret);
    return ret;
}

/**
 * Configure1 dialog
 * @return dialog result
 */
any Configure1Dialog () {

    /* AppArmorReports configure1 dialog caption */
    string caption = _("AppArmor Report Configuration");

    /* AppArmorReports configure1 dialog contents */
    term contents = `Label (_("Configuration of AppArmor Reports - Step 1"));

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(TrulyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Configure2 dialog
 * @return dialog result
 */
any Configure2Dialog () {

    /* AppArmorReports configure2 dialog caption */
    string caption = _("AppArmor Report Configuration");

    /* AppArmorReports configure2 dialog contents */
    term contents = `Label (_("Configuration of AppArmor Reports - Step 2"));

    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(TrulyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

define term filterArchForm() {        //was reportConfigForm in 1.1

    string expPath = "/var/log/apparmor/reports-exported";

    term arForm =

     `Top(`VBox(
         `Left( `CheckBox( `id(`bydate), `opt(`notify), _("Filter By Date Range") )),
         `Frame( `id(`bydate_frame), _(" Select Date Range ") ,
            `VBox(
                `Label( _("Enter Starting Date/Time") ),
                    `HBox(
                        `HSpacing( `opt(`hstretch), 1),
                        `IntField(`id(`startHours), _("Hours"), 0, 23, 0),
                        `IntField(`id(`startMins), _("Minutes"), 0, 59, 0),
                        `IntField(`id(`startDay), _("Day"), 1, 31, 1),
                        `IntField(`id(`startMonth), _("Month"), 1, 12, 1),
                        `IntField(`id(`startYear), _("Year"), 2005, 2020, 2005)
                    ),
                    `VSpacing(1.0),
                    `Label( _("Enter Ending Date") ),
                    `HBox(
                        `HSpacing( `opt(`hstretch), 1),
                        `IntField(`id(`endHours), _("Hours"), 0, 23, 0),
                        `IntField(`id(`endMins), _("Minutes"), 0, 59, 0),
                        `IntField(`id(`endDay), _("Day"), 1, 31, 1),
                        `IntField(`id(`endMonth), _("Month"), 1, 12, 1),
                        `IntField(`id(`endYear), _("Year"), 2005, 2020, 2005)
                    ),
                    `VSpacing(1.0)
        )),
        `VSpacing( 1.0 ),
        `HBox(
            `HWeight( 4, `TextEntry(`id(`prog), _("Program name") )),
            `HWeight( 4, `TextEntry(`id(`prof), _("Profile name") )),
            `HWeight( 3, `TextEntry(`id(`pid), _("PID number") )),
            `HWeight( 2,
            `ComboBox(`id(`sev), _("Severity"),  [
                _("All"), _("U"), "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10"
            ]) ),
            `HSpacing( `opt(`hstretch), 5)
        ),
        `HBox(
            `HWeight( 3, `TextEntry(`id(`res), _("Detail") )),
            `HWeight( 3, `ReplacePoint(`id(`replace_event_type), `PushButton(`id(`event_type), _("Event Type: R") ))),
            `HWeight( 3, `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), _("Mode: All")  ))),
            `HSpacing( `opt(`hstretch), 5)
        ),
        `VSpacing( 0.5 ),

		`HBox(
            `VSpacing(0.5),
            `ComboBox(`id(`expType), `opt(`notify, `immediate), _("Export Type"),  [
                _("None"), _("csv"), _("html"), _("Both")
            ]),
            `TextEntry(`id(`expPath), _("Location to store log."), expPath ),
            `Bottom( `VWeight( 1, `PushButton(`id(`accept), _("&Accept")) )),
            `Bottom( `VWeight( 1, `PushButton(`id(`browse), _("&Browse")) ))
        )
	));

	return arForm;
}

define map<any,any> setArchFilter() {

    map<any,any> Settings = $[];

    term archForm = filterArchForm();
    Wizard::SetContentsButtons( _("Report Configuration Dialog"), archForm,
	setArchHelp, _("Back"), _("&Next") );

    UI::ChangeWidget(`id(`bydate_frame), `Enabled, false);

    string mode = _("All");
    string event_type = _("R");

    map event = $[];
    any id    = nil;

    while ( true ) {

        event = UI::WaitForEvent();
        id    = event["ID"]:nil;

        if ( id == `bydate ) {

            UI::ChangeWidget(`id(`bydate_frame), `Enabled, true);

        } else if ( id == `next || id == `save ) {

            boolean bydate = (boolean) UI::QueryWidget(`id(`bydate), `Value);

            if ( bydate == true ) {
                integer startDay   = (integer) UI::QueryWidget(`id(`startDay), `Value);
                integer startMonth = (integer) UI::QueryWidget(`id(`startMonth), `Value);
                integer startYear = (integer) UI::QueryWidget(`id(`startYear), `Value);
                integer startHours = (integer) UI::QueryWidget(`id(`startHours), `Value);
                integer startMins = (integer) UI::QueryWidget(`id(`startMins), `Value);
                integer endDay   = (integer) UI::QueryWidget(`id(`endDay), `Value);
                integer endMonth = (integer) UI::QueryWidget(`id(`endMonth), `Value);
                integer endYear = (integer) UI::QueryWidget(`id(`endYear), `Value);
                integer endHours = (integer) UI::QueryWidget(`id(`endHours), `Value);
                integer endMins = (integer) UI::QueryWidget(`id(`endMins), `Value);

                // start_day & start_month are mutually exclusive
                if ( id == `startDay ) {
                    UI::ChangeWidget(`id(`startMonth), `Value, 0);
                } else if ( id == `startMonth ) {
                    UI::ChangeWidget(`id(`startDay), `Value, 0);
                }

                // start_day & start_month are mutually exclusive
                if ( id == `endDay ) {
                    UI::ChangeWidget(`id(`endMonth), `Value, 0);
                } else if ( id == `endMonth ) {
                    UI::ChangeWidget(`id(`endDay), `Value, 0);
                }

                // Check that start date values are reasonable
                if (startDay > 28 && startMonth == 2 && startYear != 2008 && startYear != 2012) {
                    Popup::Error(_("February only has 28 days!  Fixing."));
                    UI::ChangeWidget(`id(`startDay), `Value, 28);
                } else if (startDay > 29 && startMonth == 2 && (startYear==2008 || startYear==2012|| startYear==2016)) {
                    Popup::Error(_("February only has 29 days!  Fixing."));
                    UI::ChangeWidget(`id(`startDay), `Value, 29);
                } else if ( startDay == 31 ) {
                    if (startMonth==4|| startMonth==6 || startMonth==8||startMonth==10||startMonth==12) {
                        Popup::Error(_("Month only has 30 days!  Fixing."));
                        UI::ChangeWidget(`id(`startDay), `Value, 30);
                    }
                }

                // Check that end date values are reasonable
                if (endDay > 28 && endMonth == 2 && endYear != 2008 && endYear != 2012) {

                    Popup::Error(_("February only has 28 days!  Fixing."));
                    UI::ChangeWidget(`id(`endDay), `Value, 28);

                } else if (endDay > 29 && endMonth == 2 && (endYear==2008 || endYear==2012|| endYear==2016)) {

                    Popup::Error(_("February only has 29 days!"));
                    UI::ChangeWidget(`id(`endDay), `Value, 29);

                } else if ( endDay == 31 ) {

                    if (endMonth==4|| endMonth==6 || endMonth==8||endMonth==10||endMonth==12) {
                        Popup::Error(_("Month only has 30 days!  Fixing."));
                        UI::ChangeWidget(`id(`endDay), `Value, 30);
                    }
                }
                ////////////////////////////////////////////////////////////

                string startday = tostring(startDay);
                string startmonth = tostring(startMonth);
                string startyear = tostring(startYear);
                string starthours = tostring(startHours);
                string startmins = tostring(startMins);
                string endday = tostring(endDay);
                string endmonth = tostring(endMonth);
                string endyear = tostring(endYear);
                string endhours = tostring(endHours);
                string endmins = tostring(endMins);

                Settings["startday"]   = startday;
                Settings["startmonth"] = startmonth;
                Settings["startyear"]  = startyear;
                Settings["endday"]     = endday;
                Settings["endmonth"]   = endmonth;
                Settings["endyear"]    = endyear;
                Settings["starttime"]  = starthours + ":" + startmins;
                Settings["endtime"]  = endhours + ":" + endmins;

            }

            string expType = (string) UI::QueryWidget(`id(`exportType), `Value);
            string expPath = (string) UI::QueryWidget(`id(`exportPath), `Value);

            if ( expType != "" && expType != "None" ) {
                if ( expType == "csv" ) {
                    Settings["exporttext"] = "true";
                } else if ( expType == "html" ) {
                    Settings["exporthtml"] = "true";
                } else if ( expType == "both" ) {
                    Settings["exporttext"] = "true";
                    Settings["exporthtml"] = "true";
                }
            }

            string program_name = (string) UI::QueryWidget(`id(`prog), `Value);
            string profile = (string) UI::QueryWidget(`id(`prof), `Value);
            string pid = (string) UI::QueryWidget(`id(`pid), `Value);
            string sev = (string) UI::QueryWidget(`id(`sev), `Value);
            string res = (string) UI::QueryWidget(`id(`res), `Value);
            string event_type = (string) UI::QueryWidget(`id(`event_type), `Label);
            string mode = (string) UI::QueryWidget(`id(`mode), `Label);
            string exppath = (string) UI::QueryWidget(`id(`expPath), `Value);

            if (event_type == "-") { event_type = "All"; }
            if (mode == "-") { mode = "All"; }

            if ( program_name != "" ) { Settings["prog"] = program_name; }
            if ( profile != "" ) { Settings["profile"] = profile; }
            if ( pid != "" ) { Settings["pid"] = pid; }
            if ( sev != "" && sev != "All" ) { Settings["severity"] = sev; }
            if ( res != "" ) { Settings["resource"] = res; }
            if ( event_type != "" ) { Settings["sdmode"] = event_type; }
            if ( mode != "" ) { Settings["mode"] = mode; }
            if ( exppath != "" ) { Settings["exportPath"] = exppath; }

            id = nil;
            break;

        } else if ( id == `abort || id == `cancel || id == `done ) {
            Settings["break"] = "abort";
            break;
        } else if ( id == `close || id == `back) {
            Settings["break"] = "back";
            break;
        }
    }

    return Settings;

}

define term turnArchReportPage (integer curPage, integer lastPage) {

    map<string,string> Settings = $[ ];
    list<term> reportList = [];

    string currentPage = tostring( curPage );
    string slastPage = tostring( lastPage );
    Settings["page"] = currentPage;
    Settings["turnArch"] = "1";
    Settings["turnPage"] = "1";

    integer key = 1;

    list <map> db = (list <map>) SCR::Read (.logparse, Settings);

    foreach ( map record, db, {
        reportList = add( reportList, `item( `id(key), record["host"]:nil,
		record["date"]:nil, record["prog"]:nil, record["profile"]:nil,
		record["pid"]:nil, record["severity"]:nil, record["mode"]:nil,
		record["resource"]:nil, record["sdmode"]:nil ));
        key = key + 1;
    });

    string myLabel = _("Archived Security Incident Report - Page ") + currentPage + _(" of ") + slastPage;

    term odForm =

    `Frame( `id(`odframe), myLabel,
    `VBox(
	    `HBox(
            `VSpacing(10),
            `Table(`id(`table), `opt(`keepSorting, `immediate ), `header(_("Host"),
			_("Date"), _("Program"), _("Profile"), _("PID"), _("Severity"), _("Mode"),
			_("Detail"), _("Event Type") ), reportList),
            `VSpacing(0.5)
        ),
        `HSpacing(`opt(`hstretch), 1.0),
        `VSpacing(0.5),
        `HBox(
            `PushButton(`id(`prev), _("&Previous") ),
            `PushButton(`id(`psort), _("&Sort") ),
            `PushButton(`id(`fwd), _("&Forward") )
        ),
        `VSpacing(1)
    ));

    return odForm;
}


define term ShowArchForm(string tab, string logFile, map<any,any> Settings) {

    Settings["archRep"] = "1";
    Settings["logFile"] = logFile;

    Settings["type"] = "archRep";

    integer curPage = 1;
    string currentPage = "1";
    Settings["currentPage"] = currentPage;

    integer isingle = Settings["single"]:1;
    string single = "1";

    if ( isingle != nil ) {
        single = tostring(isingle);
    }
    Settings["single"] = single;

    integer lastPage = getLastPage("sir",Settings,"");
    term myPage = turnArchReportPage(curPage,lastPage);

    return myPage;
}



// Form used to select the type of archived report to list
define term ViewArchForm(map archType, list itemList, string repPath) {

    boolean sir = archType["sir"]:false;
    boolean aud = archType["aud"]:false;
    boolean ess = archType["ess"]:false;

    if ( repPath == "" ) {
        repPath = "/var/log/apparmor/reports-archived/";
    }

    if ( aud == false && ess == false ) {
        sir = true;
    }

    term vForm =
    `ReplacePoint(`id(`viewform), `VBox(
        `Label( _("View Archived Reports") ),
        `HSpacing(60),   // make the table and thus the dialog wide enough
        `HStretch(),
        `VSpacing(1),
        `Left( `HBox(
            `Frame( `id(`repFrame), _("Location of Archived Reports"),
            `HBox(
				`HWeight( 4, `TextEntry(`id(`repPath), "", repPath )),
                `HSpacing(1),
                `HWeight( 1, `Bottom( `VWeight( 1, `PushButton(`id(`browse), _("&Browse"))))),
                `HWeight( 5, `HStretch())
        )))),
        `VSpacing(0.5),
        `VWeight( 10, `HBox(
            `VSpacing(1),
            `Table(`id(`table), `opt(`notify, `immediate), `header(_("Report"), _("Date") ), itemList ) )
        ),
        `VSpacing(1),
        `HBox(
            `VSpacing(1),
            `PushButton(`id(`view), _("&View")),
            `Left(`PushButton(`id(`viewall), _("View &All")))
        )
    ));

    return vForm;
}

term date_filter_contents =
	`VBox(
		`CheckBoxFrame(`id(`enable_date), _("Filter by Date"), false,
		`VBox(
		`Frame( _("Enter Starting Date/Time"),
        `HBox(
            `HWeight( 1, `IntField(`id(`startHours), _("Hours"), 0, 23, 0)),
            `HWeight( 1, `IntField(`id(`startMins), _("Minutes"), 0, 59, 0)),
			`HWeight(1, `IntField(`id(`startDate), _("Start Date"), 0, 10, 0))
			//`HWeight( 1, `Date(`id(`startDate), _("Start Date"), "2005-01-01"))
        )),
        `VSpacing(2),
        `Frame( _("Enter Ending Date"),
        `HBox(
            `HWeight( 1, `IntField(`id(`endHours), _("Hours"), 0, 23, 0)),
            `HWeight( 1, `IntField(`id(`endMins), _("Minutes"), 0, 59, 0)),
			`HWeight(1, `IntField(`id(`endDate), _("End Date"), 0, 10, 0))
			//`HWeight( 1, `Date(`id(`endDate), _("End Date"), "2005-01-01"))
        )),
        `VSpacing(1),
		`VStretch()
	)));

/**
  * Process term with the dialog, return all strings.
  * To be used as an argument for widget_names until they are obsoleted.
  * @param t term dialog containing strings
  * @return strings found in the term
  */
define list<string> StringsOfTerm (term t) {
	list<string> rets = [];
	integer args = size (t);
    integer index = 0;
    while (index < args) {

        any arg = t[index]:nil;
        symbol current = symbolof (t);
        if (current == `Frame && index == 0) {
	        y2debug ("Leaving untouched %1", arg);
        } else if (is (arg, term) && arg != nil) {
	        symbol s = symbolof ((term)arg);
	        if (contains ([ `VBox, `HBox, `Left, `Right, `Frame, `RadioButtonGroup, `HWeight, `VWeight], s)) {
	            rets = rets + StringsOfTerm ((term)arg);
	        }
        } else if (is (arg, string)) {
	        rets = add (rets, (string)arg);
        }
        index = index + 1;
    }
    return rets;
}


map<string, map<string,any> > filter_descr = $[];

filter_descr = $[
    "tab" : CWMTab::CreateWidget ( $[
	        "tab_order" : ["prof_filter", "date_filt", "adv_filt"],
	        "tabs" : $[
                "prof_filter" : $[
                    "header" : _("Profile Field Filters"),
                    "contents" : profileFilterForm,
                    "filter_names" : StringsOfTerm (profileFilterForm),
					"help": _("Profile Filter help"),
	            ],
	            "date_filt" : $[
	                "header" : _("Date Filters"),
	                "contents" : date_filter_contents,
	                "filter_names" : StringsOfTerm (date_filter_contents),
					"help": _("Date Filter Help"),
	            ],
	            "adv_filt" : $[
	                "header" : _("Advanced Filters"),
	                "contents" : advFilterForm,
	                "filter_names" : StringsOfTerm (advFilterForm),
					"help": _("Advanced Filter Help"),
	            ],
	        ],
	    "initial_tab" : "prof_filter", // check that it exists
	    "filter_descr" : filter_descr,
	    "tab_help" : _("<p>Help for all tabs</p>"), // docs: <p>
    ])
];

// Show sir report
any showReport(string name, string type) {

	Popup::Message("now I'm in showReport()");
	symbol action = `next;

	if (name == "") name = "Security.Incident.Report";
	if (type == "") type = "sir";

    list<term> reportList = [];
    map<any,any> Settings = $[ ];
    integer curPage = 1;
    integer lastPage = 1;
    string slastPage = "1";

    string formHelp = runHelp;
    map <any,any>  reportdata =  nil;

    // Force an exit if appropriate
    any breakCheck = Settings["break"]:nil;

    if ( breakCheck == "abort" ) {
        action = `abort;
    } else if ( breakCheck == "back" ) {
        action = `back;
    } else {
	    formHelp = sirHelp;
	    Settings["type"] = "onDemand";
	    Settings["turnPage"] = "0";

	    list <map> db = (list <map>) SCR::Read (.logparse, Settings);
	    integer key = 1;

	    foreach ( map repdata, db, {
	        reportList = add( reportList, `item( `id(key), repdata["host"]:nil,
			repdata["date"]:nil, repdata["prog"]:nil, repdata["profile"]:nil,
			repdata["pid"]:nil, repdata["severity"]:nil, repdata["mode"]:nil,
			repdata["resource"]:nil, repdata["sdmode"]:nil  ));
	        key = key + 1;
	    });
	}

	return action;
}

any RunFilterForm() {

	// Set everything up
    integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
    string name  = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 1, "");
    string type = "";
	any ret = nil;

    if (name == "Security.Incident.Report") {
        type = "sir";
    } else if (name == "Applications.Audit") {
        type = "aud";
    } else if ( name == "Executive.Security.Summary") {
        type = "ess";
    } else {
        type = "sir";
    }

    if ( type != "aud" ) {
        boolean dbActivated = checkEventDb();
        if ( dbActivated == false ) {
            type = "noDb";
        }
    }

	if (type == "sir") {

		// Draw the the tabbed forms
	    term contents = `VBox( "tab", `VStretch ());

	    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)filter_descr);
	    string help = CWM::MergeHelps(w);
	    contents = CWM::PrepareDialog(contents, w);

	    Wizard::SetContentsButtons(_("Configure Report Filters"), contents,
		_("Help, I'm being oppressed!"), Label::NextButton (), Label::NextButton ());
	    Wizard::HideBackButton();

	    ret = CWM::Run(w, $[ ]);
	    Wizard::RestoreBackButton ();

		Popup::Message("In RunFilter, about to save");

		// FIXME -- This section needs work
		if (ret == `next || ret == `ok) {
			AppArmorReports::PutSettings();
			AppArmorReports::SaveSchedSettings();
			//ret = `getreport;
		}

		//ret = showReport(name,type);
		ret = `ok;

	} else {
		Popup::Message("Here I am: RunFilter 'NOT sir'");
	}

	return ret;
}


/* EOF */
}

