/* ------------------------------------------------------------------
*
*    Copyright (C) 2002-2005 Novell/SUSE
*
*    This program is free software; you can redistribute it and/or
*    modify it under the terms of version 2 of the GNU General Public 
*    License published by the Free Software Foundation.
*
  ------------------------------------------------------------------*/
{
import "Wizard";
import "Popup";
include "subdomain/capabilities.ycp";
textdomain  "yast2-apparmor";

// Globalz
integer timeout_millisec = 20 * 1000;
map<string,any> Settings = $[
   "CURRENT_PROFILE"			: ""
];


define map capabilityEntryPopup( map capmap,
                                 string linuxcapname,
                                 string profile )   {
                map results = $[];
                string lpname = linnametolp[linuxcapname]:"";
                map cdef = capdefs[lpname]:nil;
                list caplist = [];
                boolean capbool = false;
                foreach( string clname, string clpname, (map<string,string>) linnametolp, {
                       if ( capmap[clpname]:nil != nil)  capbool = true;
                       caplist = add( caplist, `item( `id(clname),  clname, capbool) );
                       capbool = false;
                });
                string info =  (string) cdef["info"]:_("<b>Capability Selection</b>.
                               <br>Select desired capabilities for this profile. 
                               Select a Capability name to see information about the capability.");
                string frametitle = "  " + _("Capabilities enabled for the profile") + " " + profile + "   ";
                UI::OpenDialog(
                `VBox(
                  `HSpacing( 75 ),
                  `VSpacing( `opt(`hstretch), 1 ),
                  `HBox(
                  `VSpacing( 20 ),
                  `HSpacing( 0.5 ),
                  `Frame( frametitle,
                    `HBox(
                      `HWeight( 30,
                       `MultiSelectionBox( `id(`caps), `opt(`notify), _("Capabilities"), caplist)
                       ),
                       `HWeight( 60, `RichText( `id(`captext), info) )
                     )
                  ),
                  `HSpacing( 0.05 )
                  ),
                  `VSpacing( 0.5 ),
                  `HBox(
                    `HWeight( 50, `HCenter(`PushButton(`id(`save), _("&OK")))),
                    `HWeight( 50, `HCenter(`PushButton(`id(`cancel), _("&Cancel"))))
                  ),
                  `VSpacing( `opt(`hstretch), 0.5 )
                )
               );

               if ( linuxcapname != "" ) {
                  UI::ChangeWidget( `id(`caps), `CurrentValue, linuxcapname );
               }

               map event2 = $[];
               any id2    = nil; 
               repeat
               {
                 event2 = UI::WaitForEvent( timeout_millisec );
                 id2    = event2["ID"]:nil; // We'll need this often - cache it
                 if ( id2 == `caps ) {
                   any itemid =  UI::QueryWidget( `id(`caps), `CurrentItem );
                   list selecteditems = (list) UI::QueryWidget( `id(`caps), `SelectedItems ); 
                   string stritem = tostring( itemid );
                   string capindex = linnametolp[stritem]:""; 
                   map    cdf =  capdefs[capindex]:nil;
                   string  cdfi = cdf["info"]:"";
                   UI::ChangeWidget( `id(`captext), `Value, cdfi );
                 }
               }  until ( id2 == `save || id2 == `cancel );

               map<string, integer>  newcapmap = $[];
               if ( id2 == `save ) {
                 list<any> selectedcaps = (list<any>) UI::QueryWidget( `id(`caps), `SelectedItems ); 
                 string s = ""; 
                 foreach( any cpname, selectedcaps, {
                     s = linnametolp[tostring(cpname)]:""; 
                     newcapmap = add( newcapmap, s, 1); 
                 });
               }
               UI::CloseDialog();
               if ( id2 == `cancel ) {
                 return capmap;
               }
               return newcapmap;
}


define string networkEntryPopup( string rule )   {
    integer listnum = 0;
    list netlist = splitstring( rule, " " );
    integer netrulesize = size( netlist );
    string family = "";
    string sockettype = "";
    if ( netrulesize == 1 ) {
        family = "All";
    } else if ( netrulesize == 2 ) {
      family = netlist[1]:"";
    } else if ( netrulesize == 3 ) {
        family = netlist[1]:"";
        sockettype = netlist[2]:"";
    }

    list<term> famList =  [
        `item( `id( `allfam ), _("All") ),
        `item( `id( `inet ), "inet" ),
        `item( `id( `inet6 ), "inet6" ),
        `item( `id( `ax25 ), "ax25" ),
        `item( `id( `ipx ), "ipx" ),
        `item( `id( `appletalk ), "appletalk" ),
        `item( `id( `netrom ), "netrom" ),
        `item( `id( `bridge ), "bridge" ),
        `item( `id( `atmpvc ), "atmpvc" ),
        `item( `id( `x25 ), "x25" ),
        `item( `id( `rose ), "rose" ),
        `item( `id( `netbeui ), "netbeui" ),
        `item( `id( `security ), "security" ),
        `item( `id( `key ), "key" ),
        `item( `id( `packet ), "packet" ),
        `item( `id( `ash ), "ash" ),
        `item( `id( `econet ), "econet" ),
        `item( `id( `atmsvc ), "atmsvc" ),
        `item( `id( `sna ), "sna" ),
        `item( `id( `irda ), "irda" ),
        `item( `id( `ppox ), "pppox" ),
        `item( `id( `wanpipe ), "wanpipe" ),
        `item( `id( `bluetooth ), "bluetooth" ),
    ];

    list<term> typeList =  [
        `item( `id( `alltype ), _("All") ),
        `item( `id( `stream ), "stream" ),
        `item( `id( `dgram ), "dgram" ),
        `item( `id( `seqpacket ), "seqpacket" ),
        `item( `id( `rdm ), "rdm" ),
        `item( `id( `raw ), "raw" ),
        `item( `id( `packet ), "packet" ),
        `item( `id( `dccp ), "dccp" ),
    ];

    map results = $[];

    UI::OpenDialog(
        `VBox(
            `VSpacing( 1 ),
		    `HBox(
                `HCenter( `ComboBox( `id(`famItems),
                                     `opt(`notify),
                                       _("Network Family"),
                                       famList
                                     )
                ),
			    `HSpacing(`opt(`hstretch), 0.2),
                `HCenter( `ComboBox( `id(`typeItems),
                                     `opt(`notify),
                                        _("Socket Type"),
                                        typeList
                                     )
                )
			),
			`VSpacing(1),
            `HBox(
			    `HCenter(`PushButton(`id(`cancel), _("&Cancel"))),
			    `HCenter(`PushButton(`id(`save), _("&Save")))
            ),
			`VSpacing(0.5)
        )
    );

    if ( rule == "" || family == "All" ) {
       UI::ChangeWidget( `famItems, `Value, `allfam );
       UI::ChangeWidget( `typeItems, `Value, `alltype );
       UI::ChangeWidget( `typeItems, `Enabled, false );
    } else {
       if ( family != "" ) {
           UI::ChangeWidget( `famItems, `Value, symbolof(toterm(family)) );
       }
       if ( sockettype != "" ) {
           UI::ChangeWidget( `typeItems, `Value, symbolof(toterm(sockettype)) );
       }
    }
    map event2 = $[];
    any id2    = nil; // We'll need this often - cache it
    repeat
    {
      event2 = UI::WaitForEvent( timeout_millisec );
      id2    = event2["ID"]:nil; // We'll need this often - cache it
      if ( id2 == `famItems ) {
          if ( tostring(UI::QueryWidget( `famItems, `Value )) == "`allfam" ) {
              UI::ChangeWidget( `typeItems, `Value, `alltype );
              UI::ChangeWidget( `typeItems, `Enabled, false );
          } else {
              UI::ChangeWidget( `typeItems, `Enabled, true );
          }
      }
    }  until ( id2 == `save || id2 == `cancel );
    if ( id2 == `save ) {
        rule = "network";
        string famselection = tostring(UI::QueryWidget( `famItems, `Value ));
        string typeselection = tostring(UI::QueryWidget( `typeItems, `Value ));
        if ( famselection != "`allfam" ) {
            rule = rule + " " + regexpsub(famselection, "^`(.+)$", "\\1");
            if ( typeselection != "`alltype" ) {
                rule = rule + " " + regexpsub(typeselection, "^`(.+)$", "\\1");
            }
        }
    } else {
        rule = "";
    }
    UI::CloseDialog();
    return rule;
}


//
// Popup the Edit Profile Entry dialog
// return a map containing PERM and FILE
// for the updated permissions and filename
// for the profile entry
//

define map pathEntryPopup( string filename, string perms, string profile, string filetype  )   {
                map results = $[];
                UI::OpenDialog(
                `VBox(
                  `VSpacing( `opt(`hstretch), 1 ),
                  `HSpacing( 45 ),
                  `HBox(
                  `VSpacing( 10 ),
                  `HSpacing( 0.75 ),
                  `Frame( _("Profile Entry For ") + profile,
                  `HBox(
                    `HWeight( 60,
                       `VBox(
                        `TextEntry(`id(`filename), _("Enter or modify Filename")),
			            `HCenter(`PushButton(`id(`browse), _("&Browse") ))
                       )
                     ),
                     `HWeight( 40,
                       `MultiSelectionBox( `id(`perms), `opt(`notify), _("Permissions"),
                         [  `item( `id(`read),    _("Read"), issubstring(perms, "r")),
                            `item( `id(`write),   _("Write"), issubstring(perms, "w")),
                            `item( `id(`link),    _("Link"), issubstring(perms, "l")),
                            `item( `id(`append),  _("Append"), issubstring(perms, "a")),
                            `item( `id(`lock),    _("Lock"), issubstring(perms, "k")),
                            `item( `id(`mmap),  _("MMap PROT_EXEC"), issubstring(perms, "m")),
                            `item( `id(`execute),  _("Execute"), issubstring(perms, "x")),
                            `item( `id(`inherit),  _("Inherit"), issubstring(perms, "i")),
                            `item( `id(`profile),  _("Profile"), issubstring(perms, "p")),
                            `item( `id(`clean_profile),  _("Profile Clean Exec"), issubstring(perms, "P")),
                            `item( `id(`unconstrained),  _("Unconstrained"), issubstring(perms, "u")),
                            `item( `id(`clean_unconstrained),  _("Unconstrained Clean Exec"), issubstring(perms, "U"))
                         ]
                     )
                   )
                  )
                  ),
                  `HSpacing( 0.75 )
                  ),
                  `VSpacing( 0.5 ),
                  `HBox(
                    `HWeight( 50, `HCenter(`PushButton(`id(`save), _("&OK")))),
                    `HWeight( 50, `HCenter(`PushButton(`id(`cancel), _("&Cancel"))))
                  ),
                  `VSpacing( `opt(`hstretch), 0.5 )
                )
               );
               UI::ChangeWidget(`id(`filename), `Value, filename);
               map event2 = $[];
               any id2    = nil; // We'll need this often - cache it
               repeat
               {
                 event2 = UI::WaitForEvent( timeout_millisec );
                 id2    = event2["ID"]:nil; // We'll need this often - cache it

                 //
                 // Something clicked in the 'perms list
                 //
                 if ( id2 == `perms ) {
                   any itemid =  UI::QueryWidget( `id(`perms), `CurrentItem );
                   list selecteditems = (list) UI::QueryWidget( `id(`perms), `SelectedItems );
                   if ( itemid == `execute ) {
                   //
                   // If we turn off Execute bit then also
                   // turn off execute modifiers
                   //
                     if (  contains( selecteditems, `execute ) == false )  {
                       if ( contains( selecteditems, `inherit )) {
                         selecteditems = filter (any k, selecteditems, { return (k != `inherit); });
                         UI::ChangeWidget( `id(`perms), `SelectedItems, selecteditems );
                       }
                       if ( contains( selecteditems, `profile )) {
                         selecteditems = filter (any k, selecteditems, { return (k != `profile); });
                         UI::ChangeWidget( `id(`perms), `SelectedItems, selecteditems );
                       }
                       if ( contains( selecteditems, `unconstrained )) {
                         selecteditems = filter (any k, selecteditems, { return (k != `unconstrained); });
                         UI::ChangeWidget( `id(`perms), `SelectedItems, selecteditems );
                       }
                       if ( contains( selecteditems, `clean_unconstrained )) {
                         selecteditems = filter (any k, selecteditems, { return (k != `clean_unconstrained); });
                         UI::ChangeWidget( `id(`perms), `SelectedItems, selecteditems );
                       }
                       if ( contains( selecteditems, `clean_profile )) {
                         selecteditems = filter (any k, selecteditems, { return (k != `clean_profile); });
                         UI::ChangeWidget( `id(`perms), `SelectedItems, selecteditems );
                       }
                     } else if (!( contains( selecteditems, `inherit ) ||
                                   contains( selecteditems, `unconstrained ) ||
                                   contains( selecteditems, `clean_unconstrained ) ||
                                   contains( selecteditems, `clean_profile ) ||
                                   contains( selecteditems, `profile ))
                            ) {
                             //if you just select X alone then by default you get P
                             selecteditems = prepend( selecteditems, `profile);
                             UI::ChangeWidget( `id(`perms), `SelectedItems, selecteditems );
                     }
                  }

                  //
                  // Execute modifier is selected
                  //  -- if Execute is NOT ON then turn Execute ON
                  //  -- ensure that only one modifier is selected.
                  //
                  if (( contains( selecteditems, `inherit ) ||
                        contains( selecteditems, `clean_unconstrained ) ||
                        contains( selecteditems, `clean_profile ) ||
                        contains( selecteditems, `unconstrained ) ||
                        contains( selecteditems, `profile )) ) {
                      if ( contains( selecteditems, `execute ) == false ) {
                        selecteditems = prepend( selecteditems, `execute);
                        UI::ChangeWidget( `id(`perms), `SelectedItems, selecteditems );
                      } else if ( itemid == `profile ) {
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `inherit); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                       { return (k != `clean_unconstrained); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                             { return (k != `clean_profile); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                             { return (k != `unconstrained); });
                        UI::ChangeWidget( `id(`perms),
                                          `SelectedItems,
                                          selecteditems );
                      } else if ( itemid == `inherit ) {
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `profile); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                            { return (k != `unconstrained); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                       { return (k != `clean_unconstrained); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                             { return (k != `clean_profile); });
                        UI::ChangeWidget( `id(`perms),
                                          `SelectedItems,
                                          selecteditems );
                      } else if ( itemid == `unconstrained ) {
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `profile); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `inherit); });
                        selecteditems =
                            filter (any k,
                                    selecteditems,
                                    { return (k != `clean_unconstrained); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `clean_profile); });
                        UI::ChangeWidget( `id(`perms),
                                          `SelectedItems,
                                          selecteditems );
                      } else if ( itemid == `clean_unconstrained ) {
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `profile); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `inherit); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `unconstrained); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `clean_profile); });
                        UI::ChangeWidget( `id(`perms),
                                          `SelectedItems,
                                          selecteditems );
                      } else if ( itemid == `clean_profile ) {
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `profile); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `inherit); });
                        selecteditems =
                            filter (any k,
                                    selecteditems,
                                    { return (k != `clean_unconstrained); });
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `unconstrained); });
                        UI::ChangeWidget( `id(`perms),
                                          `SelectedItems,
                                          selecteditems );
                     }
                  }  else if ( contains( selecteditems, `execute) ) {
                        selecteditems = filter (any k,
                                                selecteditems,
                                                { return (k != `execute); });
                        UI::ChangeWidget( `id(`perms),
                                          `SelectedItems,
                                          selecteditems );
                  }
                }
                //
                // Popup a dialog to let a user browse for a file
                //
                if ( id2 == `browse ) {
                  string selectfilename = "";
                  if ( filetype == "dir" ) {
                    selectfilename = UI::AskForExistingDirectory( "/",  _("Select Directory"));
                  } else {
                    selectfilename = UI::AskForExistingFile( "/", "",  _("Select File"));
                  }
                  if ( selectfilename != nil ) {
                    UI::ChangeWidget(`id(`filename), `Value, selectfilename);
                  }
                }
               }  until ( id2 == `save || id2 == `cancel );

               if ( id2 == `cancel ) {
                 UI::CloseDialog();
                 return nil;
               }

               //
               // Update table values
               //
               if ( id2 == `save ) {
                 list selectedbits = (list) UI::QueryWidget( `id(`perms), `SelectedItems );
                 string newperms = "";
                 if  ( contains( selectedbits, `write ) ) {
                   newperms = newperms + "w" ;
                 }
                 if  ( contains(selectedbits, `mmap ) ) {
                   newperms = newperms + "m" ;
                 }
                 if  ( contains(selectedbits, `read ) )  {
                   newperms = newperms + "r" ;
                 }
                 if  ( contains(selectedbits, `link ) ) {
                   newperms = newperms + "l" ;
                 }
                 if  ( contains(selectedbits, `lock ) ) {
                   newperms = newperms + "k" ;
                 }
                 if  ( contains(selectedbits, `append ) ) {
                   newperms = newperms + "a" ;
                 }
                 if  ( contains(selectedbits, `execute) ) {
                   if  ( contains(selectedbits, `profile) ) {
                      newperms = newperms + "p" ;
                   } else if  ( contains(selectedbits, `inherit) ) {
                      newperms = newperms + "i" ;
                   } else if  ( contains(selectedbits, `unconstrained) ) {
                      newperms = newperms + "u" ;
                   } else if  ( contains(selectedbits, `clean_unconstrained) ) {
                      newperms = newperms + "U" ;
                   } else if  ( contains(selectedbits, `clean_profile) ) {
                      newperms = newperms + "P" ;
                   }
                   newperms = newperms + "x" ;
                 }
                 filename = tostring( UI::QueryWidget(`id(`filename), `Value) );
                 UI::CloseDialog();
                 if ( filename == "" || newperms == "" ) {
                   Popup::Error(_("Entry will not added. Entry name or permissions not defined."));
                   results = nil;
                 } else {
                   results = $[ "PERM": newperms, "FILE": filename ];
                 }
               }
               return results;
}

define map fileEntryPopup( string filename, string perms, string profile )   {
   return (map) pathEntryPopup( filename, perms, profile, "file" );
}

define map dirEntryPopup( string filename, string perms, string profile )   {
   return (map) pathEntryPopup( filename, perms, profile, "dir" );
}


define map deleteNetworkRule( map netRules, string rule ) {
    list netlist = splitstring( rule, " " );
    integer netrulesize = size( netlist );
    string family = "";
    string sockettype = "";

    if ( netrulesize == 1 ) {
        return ( $[] );
    } else if ( netrulesize == 2 ) {
      family = netlist[1]:"";
      netRules = remove( netRules, family );
    } else if ( netrulesize == 3 ) {
        family = netlist[1]:"";
        sockettype = netlist[2]:"";
        any fam =  netRules[family]:nil;
        if ( is( fam, map ) ) {
            fam = remove( ((map) fam), sockettype );
            netRules[family] = fam;
        } else {
            y2warning("deleteNetworkRule: deleting non-existing rule: " +
                       rule);
        }
    }
    return( netRules );
}

define map addNetworkRule( map netRules, string rule ) {
    list netlist = splitstring( rule, " " );
    integer netrulesize = size( netlist );
    string family = "";
    string sockettype = "";

    if ( netrulesize == 1 ) {
        return ( $["all":1] );
    } else if ( netrulesize == 2 ) {
        //string all_net = netRules["all"]:nil;
        if ( netRules["all"]:nil != nil ) {
            netRules = remove( netRules, "all" );
        }
        family = netlist[1]:"";
        netRules[family] = "1";
    } else if ( netrulesize == 3 ) {
        if ( netRules["all"]:nil != nil ) {
            netRules = remove( netRules, "all" );
        }
        family = netlist[1]:"";
        sockettype = netlist[2]:"";
        any any_fam = netRules[family]:nil;
        map fam = nil;
        if ( is( any_fam, map ) )  {
           fam = (map) any_fam;
        }
        if ( fam == nil ) {
            fam = $[];
        }
        fam[sockettype] = "1";
        netRules[family] = fam;
    }
    return netRules;
}

define map editNetworkRule( map netRules, string old, string new ) {
      netRules = deleteNetworkRule( netRules, old );
      netRules = addNetworkRule( netRules, new );
      return( netRules );
}

//
// generateTableContents - generate the list that is used in the table to display the profile
//

define list<term> generateTableContents( map paths, map network, map caps, map includes, map hats ) {
    list<term> newlist = [];
    integer indx = 0;

    foreach( string hatname, any hat, (map<string,map>) hats, {
      newlist = add( newlist, `item( `id(indx), "[+] ^"+ hatname, ""));
      indx = indx+1;   });
    foreach( string incname, integer incval, (map<string,integer>) includes, {
      newlist = add( newlist, `item( `id(indx), "#include "  +incname, ""));
      indx = indx+1;   });
    foreach( string capname, integer capval, (map<string,integer>) caps, {
      map capdef = capdefs[capname]:nil;
      newlist = add( newlist, `item( `id(indx), capdef["name"]:"", ""));
      indx = indx+1;   });
    foreach( string name, string val, (map<string,string>) paths, {
      newlist = add( newlist, `item( `id(indx), name, val));
      indx = indx+1;   });

    foreach( string family, any any_fam, (map<string,any>) network, {
        if ( is( any_fam, map ) ) {
            foreach( string socktype, any any_type, (map<string,any>) any_fam,  {
                newlist = add( newlist,
                               `item( `id(indx),
                                      "network " + family + " " + socktype,
                                      ""
                                    )
                             );
                indx = indx+1;
            });
        } else {
            // Check for all network
              if ( family == "all" ) {
                  newlist = add( newlist,
                                 `item( `id(indx),
                                        "network",
                                        ""
                                      )
                               );
                  indx = indx+1;
              } else {
                  newlist = add( newlist,
                                 `item( `id(indx),
                                        "network " + family,
                                        ""
                                      )
                               );
                  indx = indx+1;
              }
      }
    });
    return newlist;
}


define map collectHats(map profile, string pathname ) {
  map<string,any> hats = $[];
  y2debug("collecting hats for " + pathname);
  foreach( string resname, any resource, (map<string,any>) profile,  {
    if ( resname != pathname ) {
      map<any,any> hat = tomap(resource);
      if ( hat != nil ) {
        y2debug("HAT " + resname);
        hats = add(hats, resname, resource);
      }
    }
  });
  return hats;
}


//
// Prompts the user for a hatname
// Side-Effect: sets Settings["CURRENT_HAT"]
// returns true (hat entered)
//         false (user aborted)
//
define boolean newHatNamePopup(string parentProfile, map currentHats ) {

term intro = `VBox(
          `Top(
            `VBox(
              `VSpacing(1),
              `Left(`Label( _("Please enter the name of the Hat that you would like \nto add to the profile") + "  " + parentProfile + ".")),
              `VSpacing(0.5),
              `Left(
                `TextEntry(
                  `id(`hatname),
                  _("&Hat name to add"),
                  ""
                )
              ),
              `VSpacing(`opt(`vstretch), 0.25)
            )
          ),
          `HBox(
            `HSpacing(`opt(`hstretch), 0.1),
            `HCenter(`PushButton(`id(`create), _("&Create Hat"))),
            `HCenter(`PushButton(`id(`abort), _("&Abort"))),
            `HSpacing(`opt(`hstretch), 0.1),
            `VSpacing(1)
          )
        );

  UI::OpenDialog(intro);
  UI::SetFocus(`id(`hatname));
  while (true)  {
    any input = Wizard::UserInput();
    if(input == `create) {
      string hatname = (string) UI::QueryWidget(`id(`hatname), `Value);
      // Check for no application entry in the dialog
      if ( hatname == "" ) {
		Popup::Error(_("You have not given a name for the hat you want to add.\nPlease 
			enter a hat name to create a new hat, or press Abort to cancel this wizard."));
      } else if ( haskey( currentHats, hatname ) ) {
		Popup::Error(_("The profile already contains the provided hat name.  Please enter a different name to try again, or press Abort to cancel this wizard."));
      } else {
        Settings["CURRENT_HAT"] = hatname;
        UI::CloseDialog();
        return true;
      }
    } else  {
      UI::CloseDialog();
      return false;
    }
  }
}

define symbol DisplayProfileForm(string pathname, boolean hat) {
   map profile_map =  (map) Settings["PROFILE_MAP"]:$[];
   map profile = (map) profile_map[pathname]:$[];
   map hats = $[];
   if ( !hat ) {
     hats = collectHats( profile_map, pathname );
   }
   map paths     = (map) profile["path"]:$[];
   map caps      = (map) profile["capability"]:$[];
   map includes  = (map) profile["include"]:$[];
   map netdomain = (map) profile["netdomain"]:$[];
   list<term> profilelist = generateTableContents( paths,
                                                   netdomain,
                                                   caps,
                                                   includes,
                                                   hats );


   string help1 = _("In this form you can view and modify the contents of an individual profile. For existing entries you can double click the permissions to access a modification dialog.<p>");
   string help2 = _("<b>Permission Definitions:</b><br><code> r - read <br> w -
   write<br>l - link<br>m - mmap PROT_EXEC<br>k - file locking<br>a - file append<br>x - execute<br> i - inherit<br> p - discrete profile<br> P - discrete profile <br>      (*clean exec)<br> u - unconstrained<br> U -unconstrained<br>      (*clean exec)</code><p>");
   string help3 = _("<b>Add Entry:</b><br>Select the type of resource to add from the drop down list.<p>");
   string help4 = _("<ul><li><b>File</b><br>Add a file entry to this profile</li>");
   string help5 = _("<li><b>Directory</b><br>Add a directory entry to this profile</li>");
   string help6 = _("<li><b>Capability</b><br>Add a capability entry to this profile</li>");
   string help7 = _("<li><b>Include</b><br>Add an include entry to this profile. This option includes the profile entry contents of another file in this profile at load time.</li>");
   string help_net = _("<li><b>Network Entry</b><br>Add a network rule entry to this profile. This option will allow you to specificy network access privileges for the profile. You may specify a network address family and socket type.</li>");
   string helpHat = _("<li><b>Hat</b><br>Add a sub-profile for this profile - called a Hat. This option is analagous to manually creating a new profile, which can selected during execution only in the context of being asked for by a <b>changehat aware</b> application. For more information on changehat please see <b>man changehat</b> on your system or the Novell AppArmor User's Guide.</li>");
   string helpEdit = _("</ul><p><b>Edit Entry:</b><br>Edit the selected entry.<p>");
   string help8 = _("<b>Delete Entry:</b><br>Removes the selected entry from this profile.<p>");
   string help9 = _("<b>*Clean Exec</b><br>The Clean Exec option for the discrete profile and unconstrained execute permissions provide added security by stripping the enviroment that is inherited by the child program of specific variables. These variables are:");
   string help10 = "<ul> <li>GCONV_PATH</li><li>GETCONF_DIR</li><li>HOSTALIASES</li><li>LD_AUDIT</li><li>LD_DEBUG</li><li>LD_DEBUG_OUTPUT</li><li>LD_DYNAMIC_WEAK</li><li>LD_LIBRARY_PATH</li><li>LD_ORIGIN_PATH</li><li>LD_PRELOAD</li><li>LD_PROFILE</li><li>LD_SHOW_AUXV</li><li>LD_USE_LOAD_BIAS</li><li>LOCALDOMAIN</li><li>LOCPATH</li><li>MALLOC_TRACE</li><li>NLSPATH</li><li>RESOLV_HOST_CONF</li><li>RES_OPTION</li><li>TMPDIR</li><li>TZDIR</li></ul><p> ";


   integer listnum = 0;
   list<term> itemList =  [ `item( `id( `file ), _("&File") ),
                            `item( `id( `net ), _("Network &Rule") ),
                            `item( `id( `dir ), _("&Directory") ),
                            `item( `id( `cap ), _("&Capability") ),
                            `item( `id( `include ), _("&Include File") ),
                          ];

 
    string mainLabel = "";

    if ( hat ) {
     mainLabel = _("AppArmor profile ") + Settings["CURRENT_PROFILE"]:"" + "^" + pathname;
   } else {
     itemList = add(itemList,`item( `id( `hat ), _("&Hat") ));
     mainLabel = _("AppArmor profile for ") + pathname ;
   }
    // Define the widget contents
    // for the Wizard
    term contents_main_profile_form =
	       `VBox(
		     `Label(mainLabel),
		     `HBox(
			   `VSpacing(10),
			   `Table(`id(`table), `opt(`notify, `immediate ), `header(_("File Name"), _("Permissions")), profilelist)
			   ),
			   `VSpacing(0.5),
		     `HBox(
			   `HSpacing(`opt(`hstretch), 0.1),
                           `HCenter( `MenuButton(`id(`addMenu), _("Add Entry"), itemList)),
			   `HCenter(`PushButton(`id(`edit), _("&Edit Entry"))),
			   `HCenter(`PushButton(`id(`delete), _("&Delete Entry"))),
			   `HSpacing(`opt(`hstretch), 0.1),
			   `VSpacing(1)
			   ),
			   `VSpacing(1)
		     );
         string help = "";
         string formtitle = "";
         if ( hat ) {
           help = help1 + help2 + help3 + help4 + help5 + help6 + help7 + help_net + help8 + helpEdit + help9 + help10;
           formtitle = _("AppArmor Hat Dialog");
         } else {
           help = help1 + help2 + help3 + help4 + help5 + help6 + help7 + help_net + helpHat + helpEdit + help8 + help9 + help10;
           formtitle = _("AppArmor Profile Dialog");
         }
        Wizard::SetContentsButtons( formtitle, contents_main_profile_form, help, _("&Back"), _("&Done") );



   map event = $[];
   any id    = nil;
   while( true )
   {
        event = UI::WaitForEvent( timeout_millisec );
        id    = event["ID"]:nil; // We'll need this often - cache it
        if ( (( id == `table ) && (event["EventReason"]:nil == "Activated" )) ||
             ( id == `edit) )
        {
                // Widget activated in the table
                integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
                string rule = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 1, "");
                integer findcap = find( rule, "CAP_");
                integer findinc = find( rule, "#include");
                integer findhat = find( rule, "[+] ^");
                integer findnet = find( rule, "network");
                string oldrule = rule;
                if ( findcap == 0 ) {
                    caps = capabilityEntryPopup( caps, rule, pathname );
                    profile["capability"] = caps;
                } else if ( findinc == 0 ) {
                  Popup::Error(_("Include entries can not be edited. Please select add or delete to manage Include entries."));
                  continue;
                } else if ( findhat == 0 ) {
                  string hatToEdit = substring( rule, 5);
                  Settings["CURRENT_HAT"] = hatToEdit;
                  return `showhat;
                } else if ( findnet == 0 ) {
                  string newrule = networkEntryPopup( rule );
                  if ( newrule != "" && newrule != rule ) {
                      netdomain = editNetworkRule( netdomain, rule, newrule );
                  }
                  profile["netdomain"] = netdomain;
                } else {
                  string perms = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 2, "");
                  map results = fileEntryPopup( rule, perms, pathname );
                  string newperms = "";
                  newperms = results["PERM"]:"";
                  rule = results["FILE"]:"";
                  if ( rule != "" ) {
                    if ( rule != oldrule ) {
                     paths = remove( paths, oldrule );
                    }
                    paths = add(paths, rule, newperms );
                    profile["path"] = paths;
                  }
               }
              profile_map[pathname] = profile;
              Settings["PROFILE_MAP"] = profile_map;
              list<term> profilelist = generateTableContents( paths,
                                                              netdomain,
                                                              caps,
                                                              includes,
                                                              hats );
              UI::ChangeWidget( `id(`table), `Items, profilelist );
       } else if ( id == `delete ) {
              integer selectedid =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
              string rule = (string) select((term) UI::QueryWidget(`id(`table), `Item(selectedid)), 1, "");
              integer findcap = find( rule, "CAP_");
              integer findinc = find( rule, "#include");
              integer findhat = find( rule, "[+] ^");
              integer findnet = find( rule, "network");

              if ( findcap == 0 ) {
                 string capNameToDelete = linnametolp[rule]:"";
                 caps = remove( caps, capNameToDelete );
                 profile["capability"] = caps;
              } else if ( findinc == 0 ) {
                 string includeToRemove = substring( rule, 9);
                 includes = remove( includes, includeToRemove );
                 profile["include"] = includes;
              } else if ( findhat == 0 ) {
                 string hatToRemove = substring( rule, 5);
                 profile_map = remove( profile_map, hatToRemove );
              } else if ( findnet == 0 ) {
                  netdomain = deleteNetworkRule( netdomain, rule );
                  profile["netdomain"] = netdomain;
              } else {
                 paths = remove( paths, rule );
                 profile["path"] = paths;
              }
              profile_map[pathname] = profile;
              Settings["PROFILE_MAP"] = profile_map;
              list<term> profilelist = generateTableContents( paths,
                                                              netdomain,
                                                              caps,
                                                              includes,
                                                              hats );
              UI::ChangeWidget( `id(`table), `Items, profilelist );
       } else if ( id == `file || id == `dir ) {
              string addfname = "";
              string addperms = "";
              map newentry = nil;
              if ( id == `dir ) {
                 newentry = dirEntryPopup( "", "", pathname );
              } else {
                 newentry = fileEntryPopup( "", "", pathname );
              }
              if ( newentry == nil ) {
                continue;
              }
              addfname = newentry["FILE"]:"";
              addperms = newentry["PERM"]:"";
              // Make sure that the entry doesn't already exist
              paths = add( paths, addfname, addperms );
              profile["path"] = paths;
              profile_map[pathname] = profile;
              Settings["PROFILE_MAP"] = profile_map;
              list<term> profilelist = generateTableContents( paths,
                                                              netdomain,
                                                              caps,
                                                              includes,
                                                              hats );
              UI::ChangeWidget( `id(`table), `Items, profilelist );
       } else if ( id == `cap ) {
           caps = capabilityEntryPopup( caps, "", pathname );
           profile["capability"] = caps;
           profile_map[pathname] = profile;
           Settings["PROFILE_MAP"] = profile_map;
           list<term> profilelist = generateTableContents( paths,
                                                           netdomain,
                                                           caps,
                                                           includes,
                                                           hats );
           UI::ChangeWidget( `id(`table), `Items, profilelist );
       } else if ( id == `hat ) {
           if ( hat ) {
             Popup::Error(_("Hats can not have embedded hats."));
           }
           boolean hatCreated = newHatNamePopup( pathname, hats );
           if ( hatCreated == true ) {
             return `showhat;
           }
       } else if ( id == `include ) {
           any ci = SCR::Read(.subdomain, "custom-includes");
           list <any> customIncludes =  tolist(ci);
           string newInclude = UI::AskForExistingFile( "/etc/apparmor.d/abstractions", "",  _("Select File To Include"));
           if ( newInclude == nil || (string)newInclude == "" ) {
             continue;
           }
           list <string> validIncludes = [ "/etc/apparmor.d/abstractions", "/etc/apparmor.d/program-chunks", "/etc/apparmor.d/tunables" ];
           foreach( any incPath, (list<any>) customIncludes, {
             string incPathStr = tostring(incPath);
             validIncludes = add( validIncludes, "/etc/apparmor.d/" + incPathStr);
           });

           integer result  = 0;
           boolean includePathOK = false;
           foreach( string pathToCheck, (list<string>) validIncludes, {
             result  = find (newInclude, pathToCheck);
             if ( result != -1 ) {
               includePathOK = true;
             }
           });

           if ( ! includePathOK ) {
             string pathListMsg = "";
             foreach( string pathItem, (list<string>) validIncludes, {
               pathListMsg = pathListMsg + "\n  " + pathItem;
             });
             Popup::Error(_("Invalid #include file. Include files must be located in one of these directores: \n") + pathListMsg );
           } else {
             string includeName = substring(newInclude, 16 );
             includes = add( includes, includeName, 1 );
             profile["include"] = includes;
             profile_map[pathname] = profile;
             Settings["PROFILE_MAP"] = profile_map;
             list<term> profilelist = generateTableContents( paths,
                                                             netdomain,
                                                             caps,
                                                             includes,
                                                             hats );
             UI::ChangeWidget( `id(`table), `Items, profilelist );
           }
       } else if ( id == `net ) {
           string newrule = networkEntryPopup( "" );
           if ( newrule != "" ) {
               netdomain = addNetworkRule( netdomain, newrule );
               profile["netdomain"] = netdomain;
               profile_map[pathname] = profile;
               Settings["PROFILE_MAP"] = profile_map;
               list<term> profilelist = generateTableContents( paths,
                                                               netdomain,
                                                               caps,
                                                               includes,
                                                               hats );
               UI::ChangeWidget( `id(`table), `Items, profilelist );
           }
       } else if ( id == `abort || id == `cancel ) {
         break;
       } else if ( id == `back ) {
         break;
       } else if ( id == `next ) {
         if ( ! hat ) {
           if (Popup::YesNoHeadline(_("Save changes to the Profile"),
           _("Would you like to save the changes to this profile? \n(Note: after saving the changes the AppArmor profiles will be reloaded.)")))  {
             map argmap = $[ "PROFILE_HASH" : Settings["PROFILE_MAP"]:$[],
                             "PROFILE_NAME" : pathname
                           ];
             any result = SCR::Write(.subdomain_profiles, argmap);
             any result2 = SCR::Write(.subdomain_profiles.reload, "-");
           }
         } else {
           if ( ! haskey(hats, Settings["CURRENT_HAT"]:"") ) {
             profile["path"] = paths;
             profile["capability"] = caps;
             profile["include"] = includes;
             profile_map[pathname] = profile;
             Settings["PROFILE_MAP"] = profile_map;
           }
         }
         break;
       } else {
         y2error("Unexpected return code: %1", id);
            continue;
       }
   }
   return (symbol) id;
}


  //
  // Select a profile to edit and populate
  // Settings["CURRENT_PROFILE"]: profile name
  // Settings["PROFILE_MAP"]: map containing the profile
  //
define symbol  SelectProfileForm( map profiles, string formhelp, string formtitle, string iconname ) {
   list<term> profilelisting = [];
   integer indx = 0;
   foreach( string p, any ignore, (map<string,any>) profiles, {
     profilelisting = add( profilelisting, `item( `id(p), p));
     indx = indx+1;
   });

    term contents_select_profile_form =
     `VBox(
          `VSpacing(2),
          `SelectionBox( `id(`profilelist), `opt(`notify), _("Profile Name"), profilelisting ),
          `VSpacing(3)
          );

   //
   // Create the Dialog Window and parse user input
   //
   Wizard::CreateDialog();
   Wizard::SetContents( formtitle, contents_select_profile_form, formhelp, false, true );
   Wizard::SetTitleIcon(iconname);

   map event = $[];
   any id    = nil;
   string profilename = "";
   while( true )
   {
        event = UI::WaitForEvent( timeout_millisec );
        id    = event["ID"]:nil; // We'll need this often - cache it
        if ( id == `next  || id == `profilelist ) {
           profilename = tostring( UI::QueryWidget(`id(`profilelist), `CurrentItem) );
           if ( profilename != nil && profilename != "" ) {
             break;
           } else {
             Popup::Error(_("You must select a profile to edit"));
             continue;
           }
        } // TODO ELSE POPUP NO ENTRY SELECTED ERROR
        if(id == `abort || id == `cancel) {
            break;
        } else if(id == `back) {
            break;
        } else {
            y2error("Unexpected return code: %1", id);
            continue;
        }
    }
    if ( id == `next || id == `profilelist) {
       Settings["CURRENT_PROFILE"] =  profilename;
       Settings["PROFILE_MAP"] =  profiles[profilename]:nil;
       id = `next;
    }
    UI::CloseDialog();
    return (symbol) id;
 }

}

