/* ------------------------------------------------------------------
*
*    Copyright (C) 2002-2005 Novell/SUSE
*
*    This program is free software; you can redistribute it and/or
*    modify it under the terms of version 2 of the GNU General Public 
*    License published by the Free Software Foundation.
*
  ------------------------------------------------------------------*/

{

import "Wizard";
import "Popup";
include "subdomain/report_helptext.ycp";
include "subdomain/reporting_utils.ycp";
textdomain  "yast2-apparmor";

// Global
integer timeout_millisec = 20 * 1000;

//define term turnReportPage (integer curPage) {
define term turnArchReportPage (integer curPage, integer lastPage) {

    map<string,string> Settings = $[ ];
    list<term> reportList = [];

    string currentPage = tostring( curPage );
    string slastPage = tostring( lastPage );
    Settings["page"] = currentPage;
    Settings["turnArch"] = "1";
    Settings["turnPage"] = "1";

	reportList = getReportList("sir",Settings);

	// poor i18n
    string myLabel = _("Archived Security Incident Report - Page ") + currentPage + _(" of ") + slastPage;

    term odForm =

    `Frame( `id(`odframe), myLabel,

	`VBox(
            `HBox(
                `VSpacing(10),
				makeSirTable(reportList),
                `VSpacing(0.5)
            ),
            `HSpacing(`opt(`hstretch), 1.0),
            `VSpacing(0.5),
            `HBox(
                `PushButton(`id(`first), _("F&irst") ),
                `PushButton(`id(`prev), _("&Previous") ),
                `PushButton(`id(`psort), _("&Sort") ),
                `PushButton(`id(`fwd), _("&Forward") ),
                `PushButton(`id(`last), _("&Last") )
            ),
            `VSpacing(1)
    ));

    return odForm;
}

define term filterArchForm() {

	string expPath = "/var/log/apparmor/reports-exported";

	term arForm =

     `Top(`VBox(
         `Left( `CheckBox( `id(`bydate), `opt(`notify), _("Filter By Date Range") )),
         `Frame( `id(`bydate_frame), _(" Select Date Range ") ,
            `VBox(
                `Label( _("Enter Starting Date/Time") ),
                    `HBox(
                        `HSpacing( `opt(`hstretch), 1),
                        `IntField(`id(`startHours), _("Hours"), 0, 23, 0),
                        `IntField(`id(`startMins), _("Minutes"), 0, 59, 0),
                        `IntField(`id(`startDay), _("Day"), 1, 31, 1),
                        `IntField(`id(`startMonth), _("Month"), 1, 12, 1),
                        `IntField(`id(`startYear), _("Year"), 2005, 2020, 2005)
                    ),
                    `VSpacing(1.0),
                    `Label( _("Enter Ending Date") ),
                    `HBox(
                        `HSpacing( `opt(`hstretch), 1),
                        `IntField(`id(`endHours), _("Hours"), 0, 23, 0),
                        `IntField(`id(`endMins), _("Minutes"), 0, 59, 0),
                        `IntField(`id(`endDay), _("Day"), 1, 31, 1),
                        `IntField(`id(`endMonth), _("Month"), 1, 12, 1),
                        `IntField(`id(`endYear), _("Year"), 2005, 2020, 2005)
                    ),
                    `VSpacing(1.0)
        )),
        `VSpacing( 1.0 ),
        `HBox(
            `HWeight( 4, `TextEntry(`id(`prog), _("Program name") )),
            `HWeight( 4, `TextEntry(`id(`prof), _("Profile name") )),
            `HWeight( 3, `TextEntry(`id(`pid), _("PID number") )),
            `HWeight( 2,
            `ComboBox(`id(`sev), _("Severity"),  [
                _("All"), _("U"), "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10"
            ]) ),
            `HSpacing( `opt(`hstretch), 5)
        ),
        `HBox(
            `HWeight( 3, `TextEntry(`id(`res), _("Detail") )),
            `HWeight( 3, `ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), _("Access Type: R") ))),
            `HWeight( 3, `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), _("Mode: All")  ))),
            `HSpacing( `opt(`hstretch), 5)
        ),
        `VSpacing( 0.5 ),

     `HBox(
            `VSpacing(0.5),
            `ComboBox(`id(`expType), `opt(`notify, `immediate), _("Export Type"),  [
                _("None"), _("csv"), _("html"), _("Both")
            ]),
            `TextEntry(`id(`expPath), _("Location to store log."), expPath ),
            `Bottom( `VWeight( 1, `PushButton(`id(`accept), _("&Accept")) )),
            `Bottom( `VWeight( 1, `PushButton(`id(`browse), _("&Browse")) ))
        )
    ));

    return arForm;
}

define map<any,any> setArchFilter() {

	map<any,any> Settings = $[];

	term archForm = filterArchForm();
    Wizard::SetContentsButtons( _("Report Configuration Dialog"), archForm,
		setArchHelp, _("Back"), _("&Next") );

	UI::ChangeWidget(`id(`bydate_frame), `Enabled, false);

	string mode = "All";
	string sdmode = "R";

	map event = $[];
	any id    = nil;

	while ( true ) {

        event = UI::WaitForEvent( timeout_millisec );
        id    = event["ID"]:nil; // We'll need this often - cache it

		if ( id == `bydate ) {

			UI::ChangeWidget(`id(`bydate_frame), `Enabled, true);

		} else if ( id == `next || id == `save ) {

			boolean bydate = (boolean) UI::QueryWidget(`id(`bydate), `Value);

			if ( bydate == true ) {

		        integer startDay   = (integer) UI::QueryWidget(`id(`startDay), `Value);
		        integer startMonth = (integer) UI::QueryWidget(`id(`startMonth), `Value);
		        integer startYear = (integer) UI::QueryWidget(`id(`startYear), `Value);
		        integer startHours = (integer) UI::QueryWidget(`id(`startHours), `Value);
		        integer startMins = (integer) UI::QueryWidget(`id(`startMins), `Value);
		        integer endDay   = (integer) UI::QueryWidget(`id(`endDay), `Value);
		        integer endMonth = (integer) UI::QueryWidget(`id(`endMonth), `Value);
		        integer endYear = (integer) UI::QueryWidget(`id(`endYear), `Value);
		        integer endHours = (integer) UI::QueryWidget(`id(`endHours), `Value);
		        integer endMins = (integer) UI::QueryWidget(`id(`endMins), `Value);

		        // start_day & start_month are mutually exclusive
		        if ( id == `startDay ) {
		            UI::ChangeWidget(`id(`startMonth), `Value, 0);
		        } else if ( id == `startMonth ) {
		            UI::ChangeWidget(`id(`startDay), `Value, 0);
		        }

		        // start_day & start_month are mutually exclusive
		        if ( id == `endDay ) {
		            UI::ChangeWidget(`id(`endMonth), `Value, 0);
		        } else if ( id == `endMonth ) {
		            UI::ChangeWidget(`id(`endDay), `Value, 0);
		        }

		        if ( CheckDate(startDay,startMonth,startYear) == false ) {
		            Popup::Error( _("Illegal start date entered.  Please retry.") );
		            continue;
		        }

		        if ( CheckDate(endDay,endMonth,endYear) == false ) {
		            Popup::Error( _("Illegal end date entered.  Please retry.") );
		            continue;
		        }
				////////////////////////////////////////////////////////////

		        string startday = tostring(startDay);
		        string startmonth = tostring(startMonth);
		        string startyear = tostring(startYear);
		        string starthours = tostring(startHours);
		        string startmins = tostring(startMins);
		        string endday = tostring(endDay);
		        string endmonth = tostring(endMonth);
		        string endyear = tostring(endYear);
		        string endhours = tostring(endHours);
		        string endmins = tostring(endMins);

		        Settings["startday"]   = startday;
		        Settings["startmonth"] = startmonth;
		        Settings["startyear"]  = startyear;
		        Settings["endday"]     = endday;
		        Settings["endmonth"]   = endmonth;
		        Settings["endyear"]    = endyear;
		        Settings["starttime"]  = starthours + ":" + startmins;
		        Settings["endtime"]  = endhours + ":" + endmins;

			}

			string expType = (string) UI::QueryWidget(`id(`exportType), `Value);
			string expPath = (string) UI::QueryWidget(`id(`exportPath), `Value);

			if ( expType != "" && expType != "None" ) {

				if ( expType == "csv" ) {
	                Settings["exporttext"] = "true";
				} else if ( expType == "html" ) {
	                Settings["exporthtml"] = "true";
				} else if ( expType == "both" ) {
	                Settings["exporttext"] = "true";
	                Settings["exporthtml"] = "true";
				}
			}

            string program_name = (string) UI::QueryWidget(`id(`prog), `Value);
            string profile = (string) UI::QueryWidget(`id(`prof), `Value);
            string pid = (string) UI::QueryWidget(`id(`pid), `Value);
            string sev = (string) UI::QueryWidget(`id(`sev), `Value);
            string res = (string) UI::QueryWidget(`id(`res), `Value);
            string sdmode = (string) UI::QueryWidget(`id(`sdmode), `Label);
            string mode = (string) UI::QueryWidget(`id(`mode), `Label);
            string exppath = (string) UI::QueryWidget(`id(`expPath), `Value);

			if (sdmode == "-") { sdmode = "All"; }
			if (mode == "-") { mode = "All"; }

            if ( program_name != "" ) { Settings["prog"] = program_name; }
            if ( profile != "" ) { Settings["profile"] = profile; }
            if ( pid != "" ) { Settings["pid"] = pid; }
            if ( sev != "" && sev != "All" ) { Settings["severity"] = sev; }
            if ( res != "" ) { Settings["resource"] = res; }
            if ( sdmode != "" ) { Settings["sdmode"] = sdmode; }
            if ( mode != "" ) { Settings["mode"] = mode; }
            if ( exppath != "" ) { Settings["exportPath"] = exppath; }

			id = nil;
			break;

        } else if ( id == `sdmode ) {
            sdmode = popUpSdMode();
            Settings["sdmode"] = sdmode;
            UI::ReplaceWidget(`id(`replace_sdmode), `PushButton(`id(`sdmode), _("Access Type: ") + sdmode) );

        } else if ( id == `mode ) {
            mode = popUpMode();
            Settings["mode"] = mode;
            UI::ReplaceWidget(`id(`replace_mode), `PushButton(`id(`mode), _("Mode: ") + mode) );

		} else if ( id == `abort || id == `cancel || id == `done ) {
			Settings["break"] = "abort";
			break;
		} else if ( id == `close || id == `back) {
			Settings["break"] = "back";
			break;
		}
	}

	return Settings;
}

define term viewArchForm(string tab, string logFile, map<any,any> Settings) {

    Settings["archRep"] = "1";
    Settings["logFile"] = logFile;
    Settings["type"] = "archRep";

	integer curPage = 1;
    string currentPage = "1";
    Settings["currentPage"] = currentPage;

	integer isingle = Settings["single"]:1;
	string single = "1";
	if ( isingle != nil ) {
		single = tostring(isingle);
	}
    Settings["single"] = single;

	// mark - new
	any junk = SCR::Read(.logparse,Settings);

	integer lastPage = getLastPage("sirRep",Settings,"");
    term myPage = turnArchReportPage(curPage,lastPage);

	return myPage;
}


}

