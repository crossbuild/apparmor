/* ------------------------------------------------------------------
*
*    Copyright (C) 2002-2005 Novell/SUSE
*
*    This program is free software; you can redistribute it and/or
*    modify it under the terms of version 2 of the GNU General Public
*    License published by the Free Software Foundation.
*
  ------------------------------------------------------------------*/
{

import "Wizard";
import "Popup";
include "subdomain/reporting_utils.ycp";
include "subdomain/report_helptext.ycp";
include "subdomain/reporting_archived_dialogs.ycp";
textdomain  "yast2-apparmor";

// Globalz
//integer timeout_millisec = 20 * 1000;
map<string,string> Settings = $[ ];
string defExpPath = "/var/log/apparmor/reports-exported";
string oldExpPath = "/var/log/apparmor/reports-exported";
string expPath = oldExpPath;

// This map is to pull the string to send back to the backend agent on save
map<any,any> md_map= $[
                `md_00: _("All"),
                `md_01: "1", `md_02: "2", `md_03: "3",
                `md_04: "4",  `md_05: "5", `md_06: "6",
                `md_07: "7",  `md_08: "8", `md_09: "9",
                `md_10: "10", `md_11: "11", `md_12: "12",
                `md_13: "13", `md_14: "14", `md_15: "15",
                `md_16: "16", `md_17: "17", `md_18: "18",
                `md_19: "19", `md_20: "20", `md_21: "21",
                `md_22: "22", `md_23: "23", `md_24: "24",
                `md_25: "25", `md_26: "26", `md_27: "27",
                `md_28: "28", `md_29: "29", `md_30: "30",
                `md_31: "31" ];

// Grey out inappropriate paging buttons
define void setPageButtons(integer curPage, integer lastPage) {

	if (lastPage <= 1 ) {
        UI::ChangeWidget(`id(`first), `Enabled, false);
        UI::ChangeWidget(`id(`last), `Enabled, false);
        UI::ChangeWidget(`id(`prev), `Enabled, false);
        UI::ChangeWidget(`id(`fwd), `Enabled, false);
        UI::ChangeWidget(`id(`goto), `Enabled, false);

	} else if (curPage <= 1 ) {
        UI::ChangeWidget(`id(`first), `Enabled, false);
        UI::ChangeWidget(`id(`prev), `Enabled, false);
    } else if ( curPage >= lastPage ) {
        UI::ChangeWidget(`id(`last), `Enabled, false);
        UI::ChangeWidget(`id(`fwd), `Enabled, false);
	} else {
		 UI::SetFocus(`id(`goto));
	}

	return;
}

// return input from edit scheduled forms as map of strings
define map<string,string> getSchedSettings( map<string,string> Settings ) {

	string name = (string) UI::QueryWidget(`id(`name), `Value);
    //integer iMonthdate = (integer) UI::QueryWidget(`id(`monthdate), `Value);
	any md = (any) UI::QueryWidget(`id(`monthdate), `Value);
    string monthdate = (string) md_map[md]:_("All");
    string weekday = (string) UI::QueryWidget(`id(`weekday), `Value);
    any iHours = (any) UI::QueryWidget(`id(`hour), `Value);
    any iMins = (any) UI::QueryWidget(`id(`mins), `Value);
    string expType = (string) UI::QueryWidget(`id(`expType), `Value);
    string email1 = (string) UI::QueryWidget(`id(`email1), `Value);
    string email2 = (string) UI::QueryWidget(`id(`email2), `Value);
    string email3 = (string) UI::QueryWidget(`id(`email3), `Value);

    //string monthdate = tostring( iMonthdate );
    string hour = tostring( iHours );
    string mins = tostring( iMins );

    if ( weekday == _("All") ) { weekday = "-"; }
    if ( monthdate == _("All") ) { monthdate = "-"; }

	// de-i18n
    if ( weekday == _("Mon") ) { weekday = "Mon"; }
    if ( weekday == _("Tue") ) { weekday = "Tue"; }
    if ( weekday == _("Weds") ) { weekday = "Weds"; }
    if ( weekday == _("Thu") ) { weekday = "Thu"; }
    if ( weekday == _("Fri") ) { weekday = "Fri"; }
    if ( weekday == _("Sat") ) { weekday = "Sat"; }
    if ( weekday == _("Sun") ) { weekday = "Sun"; }

    Settings["getconf"] = "";
    Settings["setconf"] = "1";
    Settings["name"] = name;
    Settings["monthdate"] = monthdate;

    Settings["weekday"] = weekday;
    Settings["hour"] = hour;
    Settings["mins"] = mins;
	if ( expType == _("csv") || expType == _("Both") ) {
            Settings["csv"] = "1";
    } else {
            Settings["csv"] = "0";
    }

	if ( expType == _("html") || expType == _("Both") ) {
            Settings["html"] = "1";
    } else {
            Settings["html"] = "0";
    }

    Settings["email1"] = email1;
    Settings["email2"] = email2;
    Settings["email3"] = email3;

	return Settings;
}

// Gets list of archived reports based on 'type'
define list<term> getArrayList(string type, string repPath) {

    map<string,string> Settings = $[ ];
    string readSched = "1";
    Settings["readSched"] = readSched;
    Settings["type"] = type;

	if ( repPath != "" ) {
	    Settings["repPath"] = repPath;
	}

    list<term> itemList = [];

    integer key = 1;

    if ( type == "sirRep" || type == "essRep" || type == "audRep" ) {
        list <map> db = (list <map>) SCR::Read (.reports_parse, Settings);

        foreach ( map record, db, {
            any strName = record["name"]:nil;
            any strTime = record["time"]:nil;
            string name = tostring(strName);
            string mytime = tostring(strTime);
            itemList = add( itemList, `item( `id(key), record["name"]:nil, record["time"]:nil ));
            key = key + 1;
        });

    } else if (type == "schedRep") {

        Settings["getcron"] = "1";

        list <map> db = (list <map>) SCR::Read (.reports_sched, Settings);

        foreach ( map record, db, {
            itemList = add( itemList, `item( `id(key), record["name"]:nil, record["hour"]:nil, record["mins"]:nil,
                         record["wday"]:nil, record["mday"]:nil ));
            key = key + 1;
        });

    } else {

		Popup::Error( _("Unrecognized form request.") );

    }

    return itemList;
}


/* For On Demand Reports
    - Returns list of terms corresponding to the type of report
***********************************************************************/
define list<term> getReportList(string type, map Settings) {

    list<term> reportList = [];

	if ( type == "aud" ) {

		list <map> db = (list <map>) SCR::Read (.reports_confined, Settings);
		integer key = 1;

		foreach ( map repdata, db, {
			reportList = add( reportList, `item( `id(key), repdata["host"]:nil, repdata["date"]:nil,
				repdata["prog"]:nil, repdata["prof"]:nil, repdata["pid"]:nil, repdata["state"]:nil,
				repdata["type"]:nil ));
			key = key + 1;
		});

	} else if ( type == "ess" ) {

		list <map> db = (list <map>) SCR::Read (.reports_ess, Settings);
		integer key = 1;

		foreach ( map repdata, db, {
			reportList = add( reportList, `item( `id(key), repdata["host"]:nil,
				repdata["startdate"]:nil, repdata["enddate"]:nil, repdata["numRejects"]:nil,
				repdata["numEvents"]:nil, repdata["sevMean"]:nil, repdata["sevHi"]:nil ));
			key = key + 1;
		});

	} else {

		list <map> db = (list <map>) SCR::Read (.logparse, Settings);
		integer key = 1;

		foreach ( map repdata, db, {
			reportList = add( reportList, `item( `id(key), repdata["host"]:nil,
				repdata["date"]:nil, repdata["prog"]:nil, repdata["profile"]:nil,
				repdata["pid"]:nil,repdata["severity"]:nil, repdata["mode"]:nil,
				repdata["resource"]:nil, repdata["sdmode"]:nil  ));
			key = key + 1;
		});

		/* Original Stuff
           term fwdForm = turnReportPage(name,curPage,slastPage,Settings);
           Wizard::SetContentsButtons( _("AppArmor - Run Reports"), fwdForm,
			  formHelp, _("Back"), _("&Done") );
		   setPageButtons(curPage,lastPage);
		*/
	}

	return reportList;
}


// Filter form for editing scheduled reports
define term editFilterForm (map Settings) {

	/* debug */
	string prog = Settings["prog"]:"";
	string prof = Settings["prof"]:"";
	string pid = Settings["pid"]:"";
	string res = Settings["res"]:"";
	string sdmode = Settings["sdmode"]:"R";
	string mode = Settings["mode"]:"All";
	string sev = Settings["sev"]:"All";

    term eForm = `VBox(

        `VSpacing( 0.5 ),
        `HBox(
            `HWeight( 5, `TextEntry(`id(`prog), _("Program name"), prog )),
            `HWeight( 5, `TextEntry(`id(`prof), _("Profile name"), prof )),
            `HSpacing( `opt(`hstretch), 1)
        ),
        `VSpacing( 0.5 ),
        `HBox(
            `HWeight( 5, `TextEntry(`id(`pid), _("PID number"), pid )),
            `HWeight( 5, `TextEntry(`id(`res), _("Detail"), res )),
            `HSpacing( `opt(`hstretch), 1)
        ),
        `VSpacing( 0.5 ),
        `HBox(
            `HWeight( 2,
            `ComboBox(`id(`sev), _("Severity"),  [
                _("All"), _("U"), "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10"
            ]) ),
				`VBox(
				`Label( _("Access Type: ") ),
	                `Bottom( `HWeight( 4,
	                `ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), sdmode ))))
				),
				`VBox(
					`Label( _("Mode: ") ),
	                `Bottom( `HWeight( 4,
	                `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), mode  ))))
				),
            `HSpacing( `opt(`hstretch), 1)
        ),
        `VSpacing( 1 ),
        `HBox(
            `PushButton(`id(`cancel), _("&Cancel") ),
            `PushButton(`id(`save), _("&Save") )
        )
    );

	return eForm;
}

term schedFilterForm =

     `VBox(
        `VSpacing( 0.5 ),
        `HBox(
            `HWeight( 5, `TextEntry(`id(`prog), _("Program name") )),
            `HWeight( 5, `TextEntry(`id(`prof), _("Profile name") )),
            `HSpacing( `opt(`hstretch), 1)
        ),
        `VSpacing( 0.5 ),
        `HBox(
            `HWeight( 5, `TextEntry(`id(`pid), _("PID number") )),
            `HWeight( 5, `TextEntry(`id(`res), _("Detail") ) ),
            `HSpacing( `opt(`hstretch), 1)
		),
        `VSpacing( 0.5 ),
        `HBox(
            `HWeight( 2,
            `ComboBox(`id(`sev), _("Severity"),  [
                _("All"), "U", "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10"
            ]) ),

			`VBox(
	            `Label( _("Access Type: ") ),
                `ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), "R" ))
			),
			`VBox(
	            `Label( _("Mode: ") ),
                `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), "All" ))
			),

            //`HWeight( 4, `ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), _("Access Type: R") ))),
            //`HWeight( 4, `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), _("Mode: All")  ))),
            `HSpacing( `opt(`hstretch), 1)
        ),
        `VSpacing( 1 ),
        `HBox(
            `PushButton(`id(`cancel), _("&Cancel") ),
            `PushButton(`id(`save), _("&Save") )
        )
    );

term filterForm =

     `VBox(
         `Left( `CheckBox( `id(`bydate), `opt(`notify), _("Filter By Date Range") )),
         `Frame( `id(`bydate_frame), _(" Select Date Range "),
            `VBox(
                `Label( _("Enter Starting Date/Time") ),
                `HBox(
	                `HSpacing( `opt(`hstretch), 1),
					`IntField(`id(`startHours), _("Hours"), 00, 23, 00),
					`IntField(`id(`startMins), _("Minutes"), 00, 59, 00),
					`IntField(`id(`startDay), _("Day"), 01, 31, 01),
					`IntField(`id(`startMonth), _("Month"), 01, 12, 01),
					`IntField(`id(`startYear), _("Year"), 2005, 2020, 2005)
				),
				`VSpacing(1.0),
                `Label( _("Enter Ending Date") ),
                `HBox(
                    `HSpacing( `opt(`hstretch), 1),
                    `IntField(`id(`endHours), _("Hours"), 0, 23, 0),
                    `IntField(`id(`endMins), _("Minutes"), 0, 59, 0),
                    `IntField(`id(`endDay), _("Day"), 1, 31, 1),
                    `IntField(`id(`endMonth), _("Month"), 1, 12, 1),
                    `IntField(`id(`endYear), _("Year"), 2005, 2020, 2005)
                )
			),
		`VSpacing(1.0),
        `HBox(
            `HWeight( 4, `TextEntry(`id(`prog), _("Program name")) ),
            `HWeight( 4, `TextEntry(`id(`prof), _("Profile name")) ),
            `HWeight( 3, `TextEntry(`id(`pid), _("PID number")) ),
            `HWeight( 2,
            `ComboBox(`id(`sev), _("Severity"),  [
                _("All"), _("U"), "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10"
            ]) ),
            `HSpacing( `opt(`hstretch), 5)
        ),
        `HBox(
            `HWeight( 3, `TextEntry(`id(`res), _("Detail") ) ),

            `VBox(
                `Label( _("Access Type: ") ),
                `ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), "R" ))
            ),
            `VBox(
                `Label( _("Mode: ") ),
                `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), "All" ))
            ),


            //`HWeight( 3, `ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), _("Access Type: R") ))),
            //`HWeight( 3, `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), _("Mode: All")  ))),
            `HSpacing( `opt(`hstretch), 5)
        ),
        `VSpacing( 0.5 ),

	 `HBox(
            `VSpacing(0.5),
            // DWR MOD `ComboBox(`id(`expType), `opt(`notify, `immediate), _("Export Type"),  [
            `ComboBox(`id(`expType), `opt(`notify), _("Export Type"),  [
                _("None"), _("csv"), _("html"), _("Both")
            ]),
            `TextEntry(`id(`expPath), _("Location to store log."), expPath ),
            `Bottom( `VWeight( 1, `PushButton(`id(`browse), _("&Browse")) ))
		)

    ));

// filter-defining form
define term filterForm2(string name, map<any,any> preFilters) {

	any aprog = preFilters["prog"]:nil;
	any aprof = preFilters["profile"]:nil;
	any apid = preFilters["pid"]:nil;
	any ares = preFilters["resource"]:nil;
	any amode = preFilters["mode"]:"All";
	any asdmode = preFilters["sdmode"]:"All";

	string prog = "";
	string prof = "";
	string pid = "";
	string res = "";
	string mode = "";
	string sdmode = "";

	if ( aprog != nil ) { prog = tostring(aprog); }
	if ( aprof != nil ) { prof = tostring(aprof); }
	if ( apid != nil )  { pid  = tostring(apid); }
	if ( ares != nil )  { res  = tostring(ares); }
	if ( amode != nil )  { mode = tostring(amode); }
	if ( asdmode != nil )  { sdmode = tostring(asdmode); }
	if (sdmode == "-") { sdmode = "All"; }
	if (mode == "-") { mode = "All"; }

	term ff2 =
     `Top(`VBox(
         `Left( `CheckBox( `id(`bydate), `opt(`notify), _("Filter By Date Range") )),
         `Frame( `id(`bydate_frame), _(" Select Date Range "),
            `VBox(
                `Label( _("Enter Starting Date/Time") ),
                    `HBox(
                        `HSpacing( `opt(`hstretch), 1),
                        `IntField(`id(`startHours), _("Hours"), 0, 23, 0),
                        `IntField(`id(`startMins), _("Minutes"), 0, 59, 0),
                        `IntField(`id(`startDay), _("Day"), 1, 31, 1),
                        `IntField(`id(`startMonth), _("Month"), 1, 12, 1),
                        `IntField(`id(`startYear), _("Year"), 2005, 2020, 2005)
                    ),
					`VSpacing(1.0),
                    `Label( _("Enter Ending Date") ),
                    `HBox(
                        `HSpacing( `opt(`hstretch), 1),
                        `IntField(`id(`endHours), _("Hours"), 0, 23, 0),
                        `IntField(`id(`endMins), _("Minutes"), 0, 59, 0),
                        `IntField(`id(`endDay), _("Day"), 1, 31, 1),
                        `IntField(`id(`endMonth), _("Month"), 1, 12, 1),
                        `IntField(`id(`endYear), _("Year"), 2005, 2020, 2005)
                    ),
					`VSpacing(1.0)
        )),
        `VSpacing( 1.0 ),
        `HBox(
            `HWeight( 4, `TextEntry(`id(`prog), _("Program name"), prog) ),
            `HWeight( 4, `TextEntry(`id(`prof), _("Profile name"), prof) ),
            `HWeight( 3, `TextEntry(`id(`pid), _("PID number"), pid) ),
            `HWeight( 2,
            `ComboBox(`id(`sev), _("Severity"),  [
                _("All"), _("U"), "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10"
            ]) ),
            `HSpacing( `opt(`hstretch), 5)
        ),
        `HBox(
            //`HWeight( 4, `TextEntry(`id(`res), "Detail", res) ),
            `VSpacing(0.5),
            `TextEntry(`id(`res), _("Detail"), res),
//            `Bottom(`ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), _("Access Type: ") + sdmode ))),
			`VBox(
				`Label( _("Access Type: ")  ),
	            `ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), sdmode ))
			),
			`VBox(
				`Label( _("Mode: ")  ),
	            `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), mode ))
			)
/*          `HWeight( 3, `ReplacePoint(`id(`replace_sdmode), `PushButton(`id(`sdmode), "Access Type: " + sdmode ))),
            `HWeight( 3, `ReplacePoint(`id(`replace_mode), `PushButton(`id(`mode), "Mode: " + mode ))),
*/
         //   `HSpacing( `opt(`hstretch), 5)
        ),
        `VSpacing( 0.5 ),

// mark
     `HBox(
            `VSpacing(0.5),
            // DWR MOD `ComboBox(`id(`expType), `opt(`notify, `immediate), _("Export Type"),  [
            `ComboBox(`id(`expType), `opt(`notify), _("Export Type"),  [
                _("None"), _("csv"), _("html"), _("Both")
            ]),
            `TextEntry(`id(`expPath), _("Location to store log."), expPath ),
            `Bottom( `VWeight( 1, `PushButton(`id(`browse), _("&Browse")) ))
        )
    ));

	return ff2;

}

// Gets data for next or previous page of current report
define term turnReportPage (string name, integer curPage, string slastPage, map Settings) {

    //map<string,string> Settings = $[ ];  - 07-07
    list<term> reportList = [];

    string currentPage = tostring( curPage );
    Settings["name"] = name;
    Settings["page"] = currentPage;
    Settings["turnPage"] = "1";

    integer key = 1;

    list <map> db = (list <map>) SCR::Read (.logparse, Settings);

    // New map is a list, not a hash
    foreach ( map record, db, {
        reportList = add( reportList, `item( `id(key), record["host"]:nil, record["date"]:nil, record["prog"]:nil,
            record["profile"]:nil, record["pid"]:nil, record["severity"]:nil, record["mode"]:nil, record["resource"]:nil, record["sdmode"]:nil ));
        key = key + 1;
    });

	string myLabel = _("On Demand Event Report - Page ") + currentPage + _(" of ") + slastPage;

    term odForm =

	`Frame( `id(`odpage), myLabel,

		`VBox(
            //`Label("AppArmor Event Report Data " + currentPage ),
			//`Label(myLabel),

            `HBox(
                `VSpacing(10),
				`Table(`id(`table), `opt(`keepSorting, `immediate ), `header( _("Host"), _("Date"), _("Program"),
					_("Profile"), _("PID"), _("Severity"), _("Mode"), _("Detail"), _("Access Type") ), reportList),

                `VSpacing(0.5)
            ),
            `HSpacing(`opt(`hstretch), 1.0),
            `VSpacing(0.5),
            `HBox(
                `PushButton(`id(`first), _("F&irst Page") ),
                `PushButton(`id(`prev), _("&Previous") ),
                `PushButton(`id(`psort), _("&Sort") ),
                `PushButton(`id(`fwd), _("&Forward") ),
                `PushButton(`id(`last), _("&Last Page") ),
                `PushButton(`id(`goto), _("&Go to Page") )
            ),
            `VSpacing(1)
    ));

	return odForm;
}

define symbol reportConfigForm() {

    term contents_report_config_form =
     `VBox(
         `VSpacing( 1 ),
         `Left( `CheckBox( `id(`bydate), `opt(`notify), _("Filter By Date Range") )),
         `Frame( `id(`bydate_frame),  _(" Select Date Range ") ,
               `VBox(
				   `Label( _("Enter Starting Date/Time") ),
                   `HBox(
                     `HSpacing( `opt(`hstretch), 1),
                     `HWeight( 1, `TextEntry(`id(`start_time), _("Time") )),
                     `HSpacing( `opt(`hstretch), 1),
                     `HWeight( 1, `TextEntry(`id(`start_day), _("Day") )),
                     `HSpacing( `opt(`hstretch), 1),
                     `HWeight( 1, `TextEntry(`id(`start_month), _("Month") )),
                     `HSpacing( `opt(`hstretch), 1),
                     `HWeight( 1, `TextEntry(`id(`start_year), _("Year") )),
                     `HSpacing( `opt(`hstretch), 1)
                   ),
				`VSpacing( 1.0 ),
			   `Label( _("Enter Ending Date") ),
               `HBox(
	               `HSpacing( `opt(`hstretch), 1),
                   `HWeight( 1, `TextEntry(`id(`end_time), _("Time") )),
                   `HSpacing( `opt(`hstretch), 1),
                   `HWeight( 1, `TextEntry(`id(`end_day), _("Day") )),
                   `HSpacing( `opt(`hstretch), 1),
                   `HWeight( 1, `TextEntry(`id(`end_month), _("Month") )),
                   `HSpacing( `opt(`hstretch), 1),
                   `HWeight( 1, `TextEntry(`id(`end_year), _("Year") )),
                   `HSpacing( `opt(`hstretch), 1),
                   `VSpacing( `opt(`vstretch), 2)
              )
        )),
        `VSpacing( 0.5 ),
        `Left(`CheckBox( `id(`byprog), `opt(`notify), _("Filter By Program Name") )),
        `HBox(`id(`pbox),
             `Left(`TextEntry(`id(`prog), _("Program name") )),
             `HSpacing( `opt(`hstretch), 45)
		),
        `VSpacing( 0.5 ),
        `Left(`CheckBox( `id(`expLog), `opt(`notify), _("Export Report") )),
        `HBox(`id(`ebox),
			`Left(`TextEntry(`id(`exportName), _("Export File Location") )),
            `Label( _("Select Export Format") ),
	        `Left(`CheckBox(`id(`exportText),  _("CSV"), false)),
            `Left(`CheckBox(`id(`exportHtml),  _("HTML"), true))
       )
    );
    Wizard::SetContentsButtons( _("Report Configuration Dialog"), contents_report_config_form, repConfHelp, _("Back"), _("&Next") );

   Settings = $[ ];
   map event = $[];
   any id    = nil;
   UI::ChangeWidget(`id(`pbox), `Enabled, false);
   UI::ChangeWidget(`id(`ebox), `Enabled, false);
   UI::ChangeWidget(`id(`bydate_frame), `Enabled, false);
   UI::ChangeWidget(`id(`exportName), `Value, "/tmp/export.log");

   while( true ) {

        event = UI::WaitForEvent( timeout_millisec );
        id    = event["ID"]:nil; // We'll need this often - cache it

		integer start_day = (integer) UI::QueryWidget(`id(`start_day), `Value);
		integer start_month = (integer) UI::QueryWidget(`id(`start_month), `Value);
		integer start_year = (integer) UI::QueryWidget(`id(`start_year), `Value);
		integer end_day = (integer) UI::QueryWidget(`id(`end_day), `Value);
		integer end_month = (integer) UI::QueryWidget(`id(`end_month), `Value);
		integer end_year = (integer) UI::QueryWidget(`id(`end_year), `Value);

		// start_day & start_month are mutually exclusive
		if ( id == `start_day ) {
			UI::ChangeWidget(`id(`start_month), `Value, 0);
		} else if ( id == `start_month ) {
			UI::ChangeWidget(`id(`start_day), `Value, 0);
		}

        // start_day & start_month are mutually exclusive
        if ( id == `end_day ) {
            UI::ChangeWidget(`id(`end_month), `Value, 0);
        } else if ( id == `end_month ) {
            UI::ChangeWidget(`id(`end_day), `Value, 0);
        }

		// check for reasonable date values
        // Check that start date values are reasonable
        if (start_day > 28 && start_month == 2 && start_year != 2008 && start_year != 2012) {
            Popup::Error( _("February only has 28 days!  Fixing.") );
            UI::ChangeWidget(`id(`startDay), `Value, 28);
        } else if (start_day > 29 && start_month == 2 && (start_year==2008 || start_year==2012|| start_year==2016)) {
            Popup::Error( _("February only has 29 days!  Fixing.") );
            UI::ChangeWidget(`id(`start_day), `Value, 29);
        } else if ( start_day == 31 ) {
            if (start_month==4|| start_month==6 || start_month==8||start_month==10||start_month==12) {
                Popup::Error( _("Month only has 30 days!  Fixing.") );
                UI::ChangeWidget(`id(`start_day), `Value, 30);
            }
        }

        // Check that end date values are reasonable
        if (end_day > 28 && end_month == 2 && end_year != 2008 && end_year != 2012) {

            Popup::Error( _("February only has 28 days!  Fixing.") );
            UI::ChangeWidget(`id(`end_day), `Value, 28);

        } else if (end_day > 29 && end_month == 2 && (end_year==2008 || end_year==2012|| end_year==2016)) {

            Popup::Error( _("February only has 29 days!") );
            UI::ChangeWidget(`id(`end_day), `Value, 29);

        } else if ( end_day == 31 ) {

            if (end_month==4|| end_month==6 || end_month==8||end_month==10||end_month==12) {
                Popup::Error( _("Month only has 30 days!  Fixing.") );
                UI::ChangeWidget(`id(`end_day), `Value, 30);
            }
        }
        ////////////////////////////////////////////////////////////


        if ( id == `byprog ) {
            boolean val = (boolean) UI::QueryWidget(`id(`byprog), `Value);
            if ( val == true ) {
              UI::ChangeWidget(`id(`pbox), `Enabled, true);
              UI::ChangeWidget(`id(`allevents), `Value, false);
            } else {
              UI::ChangeWidget(`id(`pbox), `Enabled, false);
            }
        } else if ( id == `bydate ) {
            boolean val = (boolean) UI::QueryWidget(`id(`bydate), `Value);
            if ( val == true ) {
              UI::ChangeWidget(`id(`bydate_frame), `Enabled, true);
              UI::ChangeWidget(`id(`allevents), `Value, false);
            } else {
              UI::ChangeWidget(`id(`bydate_frame), `Enabled, false);
            }
        } else if ( id == `expLog ) {
            boolean val = (boolean) UI::QueryWidget(`id(`expLog), `Value);
            if ( val == true ) {
              UI::ChangeWidget(`id(`ebox), `Enabled, true);
              //UI::ChangeWidget(`id(`allevents), `Value, false);
            } else {
              UI::ChangeWidget(`id(`ebox), `Enabled, false);
				}
        } else if ( id == `next ) {

          // Setup the data structures.
         boolean bydate =  (boolean) UI::QueryWidget(`id(`bydate), `Value);
         boolean byprog = (boolean) UI::QueryWidget(`id(`byprog), `Value);
         boolean allevents = (boolean) UI::QueryWidget(`id(`allevents), `Value);
         boolean expLog = (boolean) UI::QueryWidget(`id(`expLog), `Value);

         if ( expLog ) {
           string exportName = (string) UI::QueryWidget(`id(`exportName), `Value);
           any expText = (boolean) UI::QueryWidget(`id(`exportText), `Value);
           any expHtml = (boolean) UI::QueryWidget(`id(`exportHtml), `Value);
           string exportText = tostring( expText );
           string exportHtml = tostring( expHtml );
           Settings["exportname"] = exportName;
           Settings["exporttext"] = exportText;
           Settings["exporthtml"] = exportHtml;
         }

         if ( byprog ) {
           string program_name = (string) UI::QueryWidget(`id(`prog), `Value);
           Settings["prog"] = program_name;
         }
         if ( bydate ) {

           integer start_hour = (integer) UI::QueryWidget(`id(`startHour), `Value);
           integer start_min  = (integer) UI::QueryWidget(`id(`startMin), `Value);
           string start_day   = (string) UI::QueryWidget(`id(`startDay), `Value);
           string start_month = (string) UI::QueryWidget(`id(`startMonth), `Value);
           integer start_year = (integer) UI::QueryWidget(`id(`startYear), `Value);
           integer end_hour   = (integer) UI::QueryWidget(`id(`endHour), `Value);
           integer end_min    = (integer) UI::QueryWidget(`id(`endMin), `Value);
           string end_day     = (string) UI::QueryWidget(`id(`endDay), `Value);
           string end_month   = (string) UI::QueryWidget(`id(`endMonth), `Value);
           integer end_year   = (integer) UI::QueryWidget(`id(`endYear), `Value);

           string start_time = tostring(start_hour) + ":" + tostring(start_min);
           string end_time   = tostring(end_hour)   + ":" + tostring(end_min);

           Settings["startday"]   = tostring(start_day);
           Settings["startmonth"] = tostring(start_month);
           Settings["startyear"]  = tostring(start_year);
           Settings["endday"]     = tostring(end_day);
           Settings["endmonth"]   = tostring(end_month);
           Settings["endyear"]    = tostring(end_year);
           Settings["starttime"]  = start_time;
           Settings["endtime"]    = end_time;
       }

	} else if ( id == `abort || id == `back || id == `done ) {
		Popup::Message( _("Abort or Back") );
        break;
	}

	//break;
  }
  return (symbol) id;
}

// Main Report Form
define symbol mainArchivedReportForm() {

   map <any,any>  reportdata =  nil;
   reportdata = (map) SCR::Read (.logparse, Settings );
   list<term> reportlist = [];

   foreach( integer key, map repdata, (map<integer,map>) reportdata, {
     reportlist = add( reportlist, `item( `id(key), repdata["date"]:nil, repdata["prof"]:nil, repdata["pid"]:nil, repdata["mesg"]:nil));
   });

    string help1 = _("<b>AppArmor Security Events</b><p>
                    This table displays the events found that match your search criteria.");


    // DBG y2milestone("in MainReportForm");
    term contents_main_prof_form =
	       `VBox(
             `Label( _("AppArmor Event Report Data") ),
		     `HBox(
			   `VSpacing(10),
			   `Table(`id(`table), `opt(`notify, `immediate ), `header(_("Date"), _("Profile"), _("PID"), _("AppArmor Message") ), reportlist),
			   `VSpacing(0.5)
                          )
		     );
         Wizard::SetContentsButtons( _("AppArmor Security Event Report"),
				contents_main_prof_form, help1, _("Back"), _("&Done") );


	map event = $[];
	any id    = nil;
	while( true ) {

        event = UI::WaitForEvent( timeout_millisec );
        id    = event["ID"]:nil; // We'll need this often - cache it

        if ( id == `table ) {

            if ( event["EventReason"]:nil == "Activated" ) {
                // Widget activated in the table
                integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
            }

       } else if ( id == `abort || id == `cancel || id == `done ) {
         break;
       } else if ( id == `back || id == `next ) {
         break;
       } else {
         y2error("Unexpected return code: %1", id);
         continue;
       }
   }
   return (symbol) id;
}

// This is the first and base reporting form
define symbol mainReportForm() {

	term mainForm =

        `VBox(
            `Label( _("AppArmor Reporting") ),
            `VSpacing(2),
            `VBox(
				`Left(`CheckBox( `id(`schedrep), `opt(`notify), _("Schedule Reports"), true )),
				`Left(`CheckBox( `id(`viewrep), `opt(`notify), _("View Archived Reports") )),
				`Left(`CheckBox( `id(`runrep), `opt(`notify), _("Run Reports") ))
           ),
                `VSpacing(0.5)
        );

    Wizard::SetContentsButtons( _("AppArmor Security Event Report"), mainForm, mainHelp, _("Back"), _("&Next") );

	map event = $[];
	any id    = nil;
	while( true ) {

	    event = UI::WaitForEvent( timeout_millisec );
	    id = event["ID"]:nil; // We'll need this often - cache it

		if ( id == `schedrep ) {
            UI::ChangeWidget(`id(`viewrep), `Value, false);
            UI::ChangeWidget(`id(`runrep), `Value, false);
        } else if ( id == `viewrep ) {
            UI::ChangeWidget(`id(`schedrep), `Value, false);
            UI::ChangeWidget(`id(`runrep), `Value, false);
        } else if ( id == `runrep ) {
            UI::ChangeWidget(`id(`schedrep), `Value, false);
            UI::ChangeWidget(`id(`viewrep), `Value, false);
        } else if ( id == `abort || id == `cancel || id == `done ) {
          break;
        } else if ( id == `back ) {
          break;
		} else if ( id == `next ) {

			if ( UI::QueryWidget(`id(`schedrep), `Value) == true ) {
				id = `schedrep;
			} else if ( UI::QueryWidget(`id(`viewrep), `Value) == true ) {
				id = `viewrep;
			} else if ( UI::QueryWidget(`id(`runrep), `Value) == true ) {
				id = `runrep;
			}

			break;

        } else {
            y2error("Unexpected return code: %1", id);
            continue;
        }
	}

	return (symbol) id;
}

// Form used to select the type of archived report to list
define term viewForm(map archType, list itemList, string repPath) {

	boolean sirRep = archType["sirRep"]:false;
	boolean audRep = archType["audRep"]:false;
	boolean essRep = archType["essRep"]:false;

	if ( repPath == "" ) {
		repPath = "/var/log/apparmor/reports-archived/";
	}

	if ( audRep == false && essRep == false ) {
		sirRep = true;
	}

	term vForm =
    `ReplacePoint(`id(`viewform), `VBox(
        `Label( _("View Archived Reports") ),
        `HSpacing(60),   // make the table and thus the dialog wide enough
        `VSpacing(1),
        `HBox(
			`Frame( `id(`radioSelect), _("Choose a Report Type"),
				`RadioButtonGroup(`id(`chooseRep), `HBox(
					`HStretch(),
					`RadioButton(`id(`sirRep), `opt(`notify, `immediate), _("SIR"), sirRep),
			        `HSpacing(1),
					`RadioButton(`id(`audRep), `opt(`notify, `immediate), _("App Aud"), audRep),
			        `HSpacing(1),
		            `RadioButton(`id(`essRep), `opt(`notify, `immediate), _("ESS"), essRep),
			        `HSpacing(1),
					`HStretch()
             )))
        ),
		`HStretch(),
        `VSpacing(1),
		`Left( `HBox(
			`Frame( `id(`repFrame), _("Location of Archived Reports"),
			`HBox(
				`HWeight( 4, `Label(repPath)),
		        `HSpacing(1),
	            `HWeight( 1, `Bottom( `VWeight( 1, `PushButton(`id(`browse), _("&Browse"))))),
				`HWeight( 5, `HStretch())
		)))),
        `VSpacing(0.5),
        `VWeight( 10, `HBox(
            `VSpacing(1),
            `Table(`id(`table), `opt(`notify, `immediate), `header(_("Report"), _("Date") ), itemList ) )
        ),
        `VSpacing(1),
        `HBox(
            `VSpacing(1),
            `PushButton(`id(`view), _("&View") ),
            `PushButton(`id(`viewall), _("View &All") )
        )
    ));

	return vForm;
}

define map<any,any> filterConfigForm(string name) {

    // Cheating way to set filters
    map<string,string> opts = $[];
    opts["getSirFilters"] = "1";
    opts["name"] = name;
    opts["gui"] = "1";
    map<any,any> preFilters = $[];
    preFilters = (map) SCR::Read( .logparse, opts );

    any asev = preFilters["severity"]:nil;
	string sev = "";
	if ( asev != nil ) { sev = tostring(asev); }
	if ( sev == "-" ) { sev = _("All"); }

	Wizard::SetContentsButtons( _("Report Configuration Dialog"),
		filterForm2(name,preFilters), filterCfHelp1, _("Back"), _("&Next") );

	if ( sev != "" && sev != _("All") ) {
		if ( sev != "U" ) {
			integer isev = tointeger(sev);
			if ( isev < 10 ) {
				sev = "0" + sev;
			}
		}

		UI::ChangeWidget(`id(`sev), `Value, sev);
	}

	string mode = "All";
	string sdmode = "R";

	Settings = $[ ];
	map event = $[];
	any id    = nil;
	UI::ChangeWidget(`id(`bydate_frame), `Enabled, false);

	while( true ) {

        event = UI::WaitForEvent( timeout_millisec );
        id = event["ID"]:nil;

        if ( id == `bydate ) {

            boolean val = (boolean) UI::QueryWidget(`id(`bydate), `Value);
            if ( val == true ) {
              UI::ChangeWidget(`id(`bydate_frame), `Enabled, true);
            } else {
              UI::ChangeWidget(`id(`bydate_frame), `Enabled, false);
            }

		} else if ( id == `abort || id == `done || id == `cancel) {
			Settings["break"] = "abort";
			break;

		} else if ( id == `back ) {
			Settings["break"] = "back";
			break;

        } else if ( id == `sdmode ) {

            sdmode = popUpSdMode();

			if ( sdmode != "" ) {
	            Settings["sdmode"] = sdmode;
	            UI::ReplaceWidget(`id(`replace_sdmode), `PushButton(`id(`sdmode), sdmode) );
			}

        } else if ( id == `mode ) {

            mode = popUpMode();

			if ( mode != "" ) {
	            Settings["mode"] = mode;
	            UI::ReplaceWidget(`id(`replace_mode), `PushButton(`id(`mode), mode) );
			}

        } else if ( id == `browse ) {

            string selectFile = "";
            selectFile = UI::AskForExistingDirectory( "/",  _("Select Directory"));

            if ( selectFile != nil ) {
                UI::ChangeWidget(`id(`expPath), `Value, selectFile);
            }

            Settings["expPath"] = expPath;

        } else if ( id == `save || id == `next) {

			// Setup the data structures.
			boolean bydate =  (boolean) UI::QueryWidget(`id(`bydate), `Value);
			boolean expText = (boolean) UI::QueryWidget(`id(`exportText), `Value);
			boolean expHtml = (boolean) UI::QueryWidget(`id(`exportHtml), `Value);

			if ( expText == true ) {
				Settings["exporttext"] = "true";
			}
			if ( expHtml == true ) {
				Settings["exporthtml"] = "true";
			}

	        string program_name = (string) UI::QueryWidget(`id(`prog), `Value);
	        string profile = (string) UI::QueryWidget(`id(`prof), `Value);
	        string pid = (string) UI::QueryWidget(`id(`pid), `Value);
	        string sev = (string) UI::QueryWidget(`id(`sev), `Value);
	        string res = (string) UI::QueryWidget(`id(`res), `Value);
			string sdmode = (string) UI::QueryWidget(`id(`sdmode), `Label);
			string mode = (string) UI::QueryWidget(`id(`mode), `Label);
			string exppath = (string) UI::QueryWidget(`id(`expPath), `Value);

			// de-i18n
			if ( sev == _("All") ) { sev = "All"; }
			if ( sev == _("U") ) { sev = "U"; }
			if ( sdmode == _("All") ) { sdmode = "All"; }
			if ( mode == _("All") ) { mode = "All"; }

			if (exppath != "" ) { Settings["exportPath"] = expPath; }
	        if ( program_name != "" ) { Settings["prog"] = program_name; }
	        if ( profile != "" ) { Settings["profile"] = profile; }
	        if ( pid != "" ) { Settings["pid"] = pid; }
	        if ( sev != "" && sev != "All" ) { Settings["severity"] = sev; }
	        if ( res != "" ) { Settings["resource"] = res; }
	        if ( sdmode != "" ) { Settings["sdmode"] = sdmode; }
	        if ( mode != "" ) { Settings["mode"] = mode; }

	        if ( bydate == true ) {

				integer start_hour = (integer) UI::QueryWidget(`id(`startHour), `Value);
				integer start_min  = (integer) UI::QueryWidget(`id(`startMin), `Value);
				string start_day   = (string) UI::QueryWidget(`id(`startDay), `Value);
				string start_month = (string) UI::QueryWidget(`id(`startMonth), `Value);
				integer start_year = (integer) UI::QueryWidget(`id(`startYear), `Value);
				integer end_hour   = (integer) UI::QueryWidget(`id(`endHour), `Value);
				integer end_min    = (integer) UI::QueryWidget(`id(`endMin), `Value);
				string end_day     = (string) UI::QueryWidget(`id(`endDay), `Value);
				string end_month   = (string) UI::QueryWidget(`id(`endMonth), `Value);
				integer end_year   = (integer) UI::QueryWidget(`id(`endYear), `Value);

				string start_time = tostring(start_hour) + ":" + tostring(start_min);
				string end_time   = tostring(end_hour)   + ":" + tostring(end_min);

				Settings["startday"]   = tostring(start_day);
				Settings["startmonth"] = tostring(start_month);
				Settings["startyear"]  = tostring(start_year);
				Settings["endday"]     = tostring(end_day);
				Settings["endmonth"]   = tostring(end_month);
				Settings["endyear"]    = tostring(end_year);
				Settings["starttime"]  = start_time;
				Settings["endtime"]    = end_time;

			}

            string expType = (string) UI::QueryWidget(`id(`expType), `Value);
            string expPath = (string) UI::QueryWidget(`id(`expPath), `Value);

            if ( expType == _("csv") ) {
                Settings["exporttext"] = "1";
            } else if ( expType == _("html") ) {
                Settings["exporthtml"] = "1";
            } else if ( expType == _("Both") ) {
                Settings["exporttext"] = "1";
                Settings["exporthtml"] = "1";
            }

			Settings["exportPath"] = expPath;

			break;
		}
     }

	return Settings;
}

define term displayEmptyRep() {

    string myLabel = _("Events DB Not Initialized.");

    term newPage =

    `Frame( `id(`newpage), myLabel,

        `VBox(
            //`Label(myLabel),
            `HBox(
                `VSpacing(10),
				`Label( _("The events database has not been populated.  No records exist.")),
                `VSpacing(0.5)
            ),
            `HSpacing(`opt(`hstretch), 1.0),
            `VSpacing(1)
    ));


	return newPage;
}

define term displayRep(string type, integer curPage, string slastPage, list reportList ) {

    string myLabel = "";
    string currentPage = tostring(curPage);
    term myTable = nil;

    if (type == "onDemand" || type == "sir") {
		// Very poor i18n here
        myLabel = _("On Demand Event Report - Page ") + currentPage + _(" of ") + slastPage;
        myTable = `Table(`id(`table), `opt(`keepSorting, `immediate ), `header(_("Host"), _("Date"), _("Program"), _("Profile"), _("PID"), _("Severity"), _("Mode"), _("Detail"), _("Access Type")), reportList);
    } else if (type == "archRep") {
        myLabel = _("Archived Event Report - Page ") + currentPage + _(" of ") + slastPage;
        myTable = `Table(`id(`table), `opt(`keepSorting, `immediate ), `header(_("Host"), _("Date"), _("Program"), _("Profile"), _("PID"), _("Severity"), _("Mode"), _("Detail"), _("Access Type")), reportList);
    } else if (type == "aud" || type == "audRep" ) {
        myLabel = _("Applications Audit Report");
        myTable = `Table(`id(`table), `opt(`notify, `immediate ), `header(_("Host"), _("Date"), _("Program"),
                _("Profile"), _("PID"), _("State"), _("Type") ), reportList);
    } else if (type == "ess" || type == "essRep" ) {
        if (reportList == nil) {
            myLabel = _("Executive Security Summary");
            myTable = `Table(`id(`table), `opt(`notify), `header(_("Query Results")), _("No event information exists."));

        } else {

            myLabel = _("Executive Security Summary");
            myTable = `Table(`id(`table), `opt(`notify, `immediate ), `header(_("Host"), _("Start Date"),
                       _("End Date"), _("Num Rejects"), _("Num Events"), _("Ave. Sev"), _("High Sev") ), reportList);
        }
    }

    term newPage =

	`Frame( `id(`newpage), myLabel,

		`VBox(
            //`Label(myLabel),
            `HBox(
                `VSpacing(10),
                myTable,
                `VSpacing(0.5)
            ),
            `HSpacing(`opt(`hstretch), 1.0),
            `VSpacing(0.5),
            `HBox(
                `PushButton(`id(`first), _("F&irst Page") ),
                `PushButton(`id(`prev), _("&Previous") ),
                `PushButton(`id(`psort), _("&Sort") ),
                `PushButton(`id(`fwd), _("&Forward") ),
                `PushButton(`id(`last), _("&Last Page") ),
                `PushButton(`id(`goto), _("&Go to Page") )
            ),
            `VSpacing(1)
	));

    return newPage;
}


// View Archived Reports
define symbol displayArchForm() {

    map<string,boolean> archType = $[ ];
    archType["sirRep"] = true;
    archType["audRep"] = false;
    archType["essRep"] = false;

    map<string,string> Settings = $[ ];
    string readSched = "1";
	Settings["getcron"] = "0";
    Settings["readSched"] = "1";
    Settings["type"] = "sirRep";
	string type = Settings["type"]:nil;

    list<term> itemList = [];
	itemList = getArrayList(type,"");

    Wizard::SetContentsButtons( _("AppArmor Security Event Report"), viewForm(archType, itemList, ""), archHelpText, _("Back"), _("&Done") );

	map event = $[];
	any archId    = nil;

	string repPath = "";
	integer lastPage = 1;
    integer curPage = 1;

	string formHelp = runHelp;


	while( true ) {

	    //event = UI::WaitForEvent( timeout_millisec );
	    event = UI::WaitForEvent( );

	    archId = event["ID"]:nil; // We'll need this often - cache it

		if (archId == `back || archId == `abort || archId == `done) {
			break;
		} else if ( archId == `close || archId == `cancel || archId == `next) {
			break;

        } else if ( archId == `repPath ) {

			repPath = (string) UI::QueryWidget(`id(`repPath), `Value);
			Settings["repPath"] = repPath;
		    itemList = getArrayList(type,repPath);
		    Wizard::SetContentsButtons( _("AppArmor Security Event Report"),
				viewForm(archType, itemList, repPath), archHelpText, _("Back"), _("&Done") );

        } else if ( archId == `browse ) {

            string selectFile = "";
            selectFile = UI::AskForExistingDirectory( "/",  _("Select Directory"));

            if ( selectFile != nil ) {
                UI::ChangeWidget(`id(`repPath), `Value, selectFile);
            }

			// set new reppath
			repPath = selectFile;
            Settings["repPath"] = repPath;
            itemList = getArrayList(type,repPath);
            Wizard::SetContentsButtons( _("AppArmor Security Event Report"),
				viewForm(archType, itemList, repPath), archHelpText, _("Back"), _("&Done") );

		} else if ( archId == `sirRep ) {
			formHelp = sirHelp;
	        archType["sirRep"] = true;
	        archType["audRep"] = false;
	        archType["essRep"] = false;
		    Settings["type"] = "sirRep";
			type = Settings["type"]:nil;

		    itemList = getArrayList(type,repPath);

		    Wizard::SetContentsButtons( _("View Archived SIR Report"), viewForm(archType,itemList,""), formHelp, _("Back"), _("&Done") );

		} else if ( archId == `audRep ) {
			formHelp = audHelp;
	        archType["sirRep"] = false;
	        archType["audRep"] = true;
	        archType["essRep"] = false;
		    Settings["type"] = "audRep";
			type = Settings["type"]:nil;

		    itemList= getArrayList(type,"");
		    Wizard::SetContentsButtons( _("View Archived AUD Report"), viewForm(archType,itemList,""), formHelp, _("Back"), _("&Done") );

		} else if ( archId == `essRep ) {
			formHelp = essHelp;
	        archType["sirRep"] = false;
	        archType["audRep"] = false;
	        archType["essRep"] = true;
		    Settings["type"] = "essRep";
			type = Settings["type"]:nil;

		    itemList= getArrayList(type,"");
		    Wizard::SetContentsButtons( _("View Archived AUD Report"), viewForm(archType,itemList,""), formHelp, _("Back"), _("&Done") );


		} else if ( archId == `view || archId == `viewall || archId == `table) {

			if ( archId == `viewall ) {
				Settings["single"] = "0";
			} else {
				Settings["single"] = "1";
			}

		    integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
		    string logFile  = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 1, "");
		    string logPath = (string) UI::QueryWidget(`id(`repPath), `Value);
			list splitPath = splitstring (logPath, "/");
			string checkPath = splitPath[size(splitPath)-1]:"";

			string longLogName = "";


			// Cat strings & check for trailing "/" in path
			if ( logPath != "" ) {
				if ( checkPath != "" ) {
					longLogName = logPath + "/" + logFile;
				} else {
					longLogName = logPath + logFile;
				}
			}

			if ( type == "sirRep" ) {

				formHelp = sirHelp;
				map<any,any> sirSettings = nil;
				sirSettings =  setArchFilter();
				if ( archId == `viewall ) { sirSettings["single"] = 0; }

				// Force an exit if appropriate
		        any breakCheck = sirSettings["break"]:nil;

		        if ( breakCheck == "abort" ) {
		            symbol myBreak = `abort;
		            return myBreak;

		        } else if ( breakCheck == "back" ) {
		            symbol myBreak = `back;
		            return myBreak;
		        }

				if ( repPath != "" ) {
					sirSettings["repPath"] = repPath;
				}

				//Wizard::SetContentsButtons( _("Security Incident Report"), viewArchForm(type,logFile,lastPage,sirSettings), runHelp, _("Back"), _("&Done") );
				Wizard::SetContentsButtons( _("Security Incident Report"), viewArchForm(type,logFile,sirSettings), sirHelp, _("Back"), _("&Done") );

				lastPage = getLastPage(type,Settings,"");		// check 'name'
				setPageButtons(curPage,lastPage);

			} else if ( type == "audRep" ) {

				formHelp = audHelp;
				list<term> reportList = [];
		        integer key = 1;
			    Settings["page"] = "1";
			    Settings["audArch"] = "1";
			    Settings["turnPage"] = "1";
			    Settings["file"] = logFile;

		        list <map> db = (list <map>) SCR::Read (.reports_confined, Settings);

		        foreach ( map repdata, db, {
			        reportList = add( reportList, `item( `id(key), repdata["host"]:nil, repdata["date"]:nil, repdata["prog"]:nil,
			             repdata["prof"]:nil, repdata["pid"]:nil, repdata["state"]:nil, repdata["type"]:nil  ));
		            key = key + 1;
			    });

			    lastPage =  getLastPage(type,Settings,"");
			    string slastPage = tostring(lastPage);

				Wizard::SetContentsButtons( _("Applications Audit Report"), displayRep(type,curPage,slastPage,reportList), formHelp, _("Back"), _("&Done") );
				setPageButtons(curPage,lastPage);

			} else if ( type == "essRep" ) {

				formHelp = essHelp;
				list<term> reportList = [];
		        integer key = 1;
			    Settings["file"] = logFile;
				Settings["essArch"] = "1";

		        list <map> db = (list <map>) SCR::Read (.reports_ess, Settings);

		        foreach ( map repdata, db, {
			        reportList = add( reportList, `item( `id(key), repdata["host"]:nil, repdata["startdate"]:nil, repdata["enddate"]:nil, repdata["numRejects"]:nil, repdata["numEvents"]:nil, repdata["sevMean"]:nil, repdata["sevHi"]:nil ));
					key = key + 1;
			    });

			    lastPage = getLastPage(type,Settings,"");
			    string slastPage = tostring(lastPage);

				Wizard::SetContentsButtons( _("Executive Security Summary Report"), displayRep(type,curPage,slastPage,reportList), formHelp, _("Back"), _("&Done") );
				setPageButtons(curPage,lastPage);

			} else {
				Popup::Error( _("No recognized report type selected.  Try again.") );
				continue;
			}

        } else if ( archId == `goto ) {

			integer newPage = popUpGoto(lastPage);

			if ( newPage > 0 && newPage <= lastPage && newPage != curPage ) {
				curPage = newPage;

	            term fwdForm = turnArchReportPage(curPage,lastPage);
	            Wizard::SetContentsButtons( _("AppArmor Report"), fwdForm, runHelp, _("Back"), _("&Done") );
	            setPageButtons(curPage,lastPage);
			}

        } else if ( archId == `psort ) {

			string sortKey = popUpSort(type);

			if ( sortKey != nil && sortKey != "" ) {
	            curPage = 1;
	            map<string,string> sortCmd = $[];
				sortCmd["sortKey"] = sortKey;
	            sortCmd["sort"] = "1";
	            any junk = SCR::Write(.logparse, sortCmd);
	            term fwdForm = turnArchReportPage(curPage,lastPage);
	            Wizard::SetContentsButtons( _("AppArmor Report"), fwdForm, runHelp, _("Back"), _("&Done") );
	            setPageButtons(curPage,lastPage);
			}

		} else if ( archId == `fwd ) {

			curPage = curPage +1;
            term fwdForm = turnArchReportPage(curPage,lastPage);
			Wizard::SetContentsButtons( _("AppArmor Report"), fwdForm, formHelp, _("Back"), _("&Done") );

			setPageButtons(curPage,lastPage);


		} else if ( archId == `prev ) {

            if ( curPage > 0 ) { curPage = curPage -1; }
            term prevForm = turnArchReportPage(curPage,lastPage);
			Wizard::SetContentsButtons( _("AppArmor Report"), prevForm, formHelp, _("Back"), _("&Done") );

			setPageButtons(curPage,lastPage);

		} else if ( archId == `first ) {

			curPage = 1;
            term firstForm = turnArchReportPage(curPage,lastPage);
			Wizard::SetContentsButtons( _("AppArmor Report"), firstForm, formHelp, _("Back"), _("&Done") );
			setPageButtons(curPage,lastPage);

		} else if ( archId == `last ) {

			curPage = lastPage;
            term lastForm = turnArchReportPage(curPage,lastPage);
			Wizard::SetContentsButtons( _("AppArmor Report"), lastForm, formHelp, _("Back"), _("&Done") );
			setPageButtons(curPage,lastPage);

        } else {
            y2error("Unexpected return code: %1", archId);
            continue;
        }
		//break;
	}

	if (archId != `back && archId != `abort && archId != `done) {
		archId = `back;
	}

	return (symbol) archId;
}

// The main form for On-Demand reports, executed from the wizard by selecting 'Run Now'
define symbol displayRunForm() {

    integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
    string name  = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 1, "");

	string type = "";

	if (name == "Security.Incident.Report") {
		type = "sir";
	} else if (name == "Applications.Audit") {
		type = "aud";
	} else if ( name == "Executive.Security.Summary") {
		type = "ess";
	} else {
		type = "sir";		// All added reports are SIRs
	}

        if ( type != "aud" ) {
           boolean dbActivated = checkEventDb();
           if ( dbActivated == false ) {
              type = "noDb";
           }
	}

    list<term> reportList = [];
    map<any,any> Settings = $[ ];
	integer curPage = 1;
	integer lastPage = 1;
	string slastPage = "1";

	string formHelp = runHelp;
    map <any,any>  reportdata =  nil;

    if (type == "sir") {

		Settings = filterConfigForm(name);

		// Force an exit if appropriate
		any breakCheck = Settings["break"]:nil;

		if ( breakCheck == "abort" ) {
			symbol myBreak = `abort;
			return myBreak;

		} else if ( breakCheck == "back" ) {
			symbol myBreak = `back;
			return myBreak;
		}

		formHelp = sirHelp;
        Settings["type"] = "onDemand";
        Settings["turnPage"] = "0";

        list <map> db = (list <map>) SCR::Read (.logparse, Settings);

        integer key = 1;

        foreach ( map repdata, db, {
            reportList = add( reportList, `item( `id(key), repdata["host"]:nil, repdata["date"]:nil, repdata["prog"]:nil,
                 repdata["profile"]:nil, repdata["pid"]:nil, repdata["severity"]:nil, repdata["mode"]:nil, repdata["resource"]:nil,
				 repdata["sdmode"]:nil  ));
            key = key + 1;
        });

    } else if ( type == "aud" ) {

		formHelp = audHelp;
        Settings["type"] = "onDemand";
        Settings["turnPage"] = "0";

        list <map> db = (list <map>) SCR::Read (.reports_confined, Settings);

        integer key = 1;

        foreach ( map repdata, db, {
            reportList = add( reportList, `item( `id(key), repdata["host"]:nil, repdata["date"]:nil, repdata["prog"]:nil,
                 repdata["prof"]:nil, repdata["pid"]:nil, repdata["state"]:nil, repdata["type"]:nil ));
            key = key + 1;
        });

    } else if ( type == "ess" ) {

		formHelp = essHelp;
        Settings["type"] = "onDemand";
        Settings["turnPage"] = "0";
        list <map> db = (list <map>) SCR::Read (.reports_ess, Settings);

        if (db != nil) {

            integer key = 1;

            foreach ( map repdata, db, {
                reportList = add( reportList, `item( `id(key), repdata["host"]:nil, repdata["startdate"]:nil,
                    repdata["enddate"]:nil, repdata["numRejects"]:nil, repdata["numEvents"]:nil, repdata["sevMean"]:nil, repdata["sevHi"]:nil ));
                key = key + 1;
            });
        }

    }

	if ( type == "noDb" ) {
		Wizard::SetContentsButtons( _("AppArmor On-Demand Report"), displayEmptyRep(), formHelp, _("Back"), _("&Done") );
	} else {

	    lastPage =  getLastPage(type,Settings,name);
		slastPage = tostring(lastPage);

	    //UI::ReplaceWidget(`tabContents, displayRep(tab, curPage, reportList) );
	    Wizard::SetContentsButtons( _("AppArmor On-Demand Report"), displayRep(type,curPage,slastPage,reportList),
			formHelp, _("Back"), _("&Done") );
		setPageButtons(curPage,lastPage);
	}

    map event = $[];
    any id    = nil;

    while( true ) {

		// Grey out inappropriate paging buttons
		if (curPage <= 1 ) {
		    UI::ChangeWidget(`id(`prev), `Enabled, false);
		} else if ( curPage >= lastPage ) {
		    UI::ChangeWidget(`id(`fwd), `Enabled, false);
		}

        event = UI::WaitForEvent( timeout_millisec );
        id = event["ID"]:nil; // We'll need this often - cache it

		// REDO
        if ( id == `schedrep ) {
			break;
        } else if ( id == `abort || id == `cancel || id == `back || id == `done) {
			break;
        } else if ( id == `next ) {

			break;

        } else if ( id == `goto ) {

			integer newPage = popUpGoto(lastPage);

			if ( newPage > 0 && newPage <= lastPage && newPage != curPage ) {
				curPage = newPage;

		        term goForm = turnReportPage(name,curPage,slastPage,Settings);
	            Wizard::SetContentsButtons( _("AppArmor - Run Reports"), goForm,
					formHelp, _("Back"), _("&Done") );
				setPageButtons(curPage,lastPage);
			}

        } else if ( id == `psort ) {

			string sortKey = popUpSort(type);

			if ( sortKey != nil && sortKey != "" ) {

				// branch added 08.01.2005
		        curPage = 1;
		        Settings["type"] = "onDemand";
		        Settings["turnPage"] = "0";
	            Settings["sortKey"] = sortKey;
	            //map<any,any> sortCmd = $[]; sortCmd["sortKey"] = sortKey; sortCmd["sort"] = "1";

				reportList = getReportList(type,Settings);

		        Wizard::SetContentsButtons( _("AppArmor On-Demand Report"), displayRep(type,curPage,
					slastPage,reportList), formHelp, _("Back"), _("&Done") );
		        setPageButtons(curPage,lastPage);

			}

        } else if ( id == `prev ) {

            if ( curPage > 0 ) { curPage = curPage -1; }
            term prevForm = turnReportPage(name,curPage,slastPage,Settings);
		    Wizard::SetContentsButtons( _("AppArmor - Run Reports"), prevForm,
				formHelp, _("Back"), _("&Done") );
			setPageButtons(curPage,lastPage);

        } else if ( id == `fwd ) {
            curPage = curPage + 1;
            term fwdForm = turnReportPage(name,curPage,slastPage,Settings);
		    Wizard::SetContentsButtons( _("AppArmor - Run Reports"), fwdForm,
				formHelp, _("Back"), _("&Done") );
			setPageButtons(curPage,lastPage);

		} else if ( id == `first ) {

			curPage = 1;
			slastPage = tostring(lastPage);
            term firstForm = turnReportPage(name,curPage,slastPage,Settings);
			Wizard::SetContentsButtons( _("AppArmor - Run Reports"), firstForm, formHelp, _("Back"), _("&Done") );
			setPageButtons(curPage,lastPage);

		} else if ( id == `last ) {

			curPage = lastPage;
			slastPage = tostring(lastPage);
            term lastForm = turnReportPage(name,curPage,slastPage,Settings);
			Wizard::SetContentsButtons( _("AppArmor - Run Reports"), lastForm, formHelp, _("Back"), _("&Done") );
			setPageButtons(curPage,lastPage);

        } else {
            y2error("Unexpected return code: %1", id);
            continue;
        }

    }

	type = "";
    return (symbol) id;
}

define void addSchedForm() {

    map<string,string> Settings = $[ ];
    string readSched = "1";
	Settings["getcron"] = "1";
    Settings["readSched"] = "1";
    Settings["type"] = "schedRep";

	string expPath = "/var/log/apparmor/reports-exported";

    UI::OpenDialog(

    `ReplacePoint( `id(`addSchedRep), `VBox(
        `Label( _("Add Scheduled SIR") ),
        `VSpacing(1),
        `TextEntry(`id(`name), _("Report Name")),
        `VSpacing(1),
                // DWR MOD
                // `item(`id(`md_00)), _("All"),
                //`item(`id(`md_01)), "1", `item(`id(`md_02)), "2", `item(`id(`md_03)), "3",
                //`item(`id(`md_04)), "4", `item(`id(`md_05)), "5", `item(`id(`md_06)), "6",
                //`item(`id(`md_07)), "7", `item(`id(`md_08)), "8", `item(`id(`md_09)), "9",
                //`item(`id(`md_10)), "10", `item(`id(`md_11)), "11", `item(`id(`md_12)), "12",
                //`item(`id(`md_13)), "13", `item(`id(`md_14)), "14", `item(`id(`md_15)), "15",
                //`item(`id(`md_16)), "16", `item(`id(`md_17)), "17", `item(`id(`md_18)), "18",
                //`item(`id(`md_19)), "19", `item(`id(`md_20)), "20", `item(`id(`md_21)), "21",
                //`item(`id(`md_22)), "22", `item(`id(`md_23)), "23", `item(`id(`md_24)), "24",
                //`item(`id(`md_25)), "25", `item(`id(`md_26)), "26", `item(`id(`md_27)), "27",
                //`item(`id(`md_28)), "28", `item(`id(`md_29)), "29", `item(`id(`md_30)), "30",
                //`item(`id(`md_31)), "31"
                 //
        `HBox(
            //`IntField(`id(`monthdate), `opt(`notify, `immediate), _("Day of Month"), 0, 31, 0),
            // DWR MOD `ComboBox(`id(`monthdate), `opt(`notify, `immediate), _("Day of Month"),  [
            `ComboBox(`id(`monthdate), `opt(`notify), _("Day of Month"),  [
                 `item(`id(`md_00)), _("All"),
                `item(`id(`md_01)), "1", `item(`id(`md_02)), "2", `item(`id(`md_03)), "3",
                `item(`id(`md_04)), "4", `item(`id(`md_05)), "5", `item(`id(`md_06)), "6",
                `item(`id(`md_07)), "7", `item(`id(`md_08)), "8", `item(`id(`md_09)), "9",
                `item(`id(`md_10)), "10", `item(`id(`md_11)), "11", `item(`id(`md_12)), "12",
                `item(`id(`md_13)), "13", `item(`id(`md_14)), "14", `item(`id(`md_15)), "15",
                `item(`id(`md_16)), "16", `item(`id(`md_17)), "17", `item(`id(`md_18)), "18",
                `item(`id(`md_19)), "19", `item(`id(`md_20)), "20", `item(`id(`md_21)), "21",
                `item(`id(`md_22)), "22", `item(`id(`md_23)), "23", `item(`id(`md_24)), "24",
                `item(`id(`md_25)), "25", `item(`id(`md_26)), "26", `item(`id(`md_27)), "27",
                `item(`id(`md_28)), "28", `item(`id(`md_29)), "29", `item(`id(`md_30)), "30",
                `item(`id(`md_31)), "31" ]),
                //`item(`id(`md_00), _("All")),
                //`item(`id(`md_01), "1"), `item(`id(`md_02), "2"), `item(`id(`md_03), "3"),
                //`item(`id(`md_04), "4"), `item(`id(`md_05), "5"), `item(`id(`md_06), "6"),
                //`item(`id(`md_07), "7"), `item(`id(`md_08), "8"), `item(`id(`md_09), "9"),
                //`item(`id(`md_10), "10"), `item(`id(`md_11), "11"), `item(`id(`md_12), "12"),
                //`item(`id(`md_13), "13"), `item(`id(`md_14), "14"), `item(`id(`md_15), "15"),
                //`item(`id(`md_16), "16"), `item(`id(`md_17), "17"), `item(`id(`md_18), "18"),
                //`item(`id(`md_19), "19"), `item(`id(`md_20), "20"), `item(`id(`md_21), "21"),
                //`item(`id(`md_22), "22"), `item(`id(`md_23), "23"), `item(`id(`md_24), "24"),
                //`item(`id(`md_25), "25"), `item(`id(`md_26), "26"), `item(`id(`md_27), "27"),
                //`item(`id(`md_28), "28"), `item(`id(`md_29), "29"), `item(`id(`md_30), "30"),
                //`item(`id(`md_31), "31")
            //]),

            // DWR MOD `ComboBox(`id(`weekday), `opt(`notify, `immediate), _("Day of Week"),  [
            `ComboBox(`id(`weekday), `opt(`notify), _("Day of Week"),  [
                _("All"), _("Sun"), _("Mon"), _("Tue"), _("Wed"), _("Thu"), _("Fri"), _("Sat")
            ]),
            `IntField(`id(`hour), _("Hour"), 00, 23, 00),
            `IntField(`id(`mins), _("Minute"), 00, 59, 00)
        ),
        `VSpacing(1),
        `HBox(
            `VSpacing(1),
            `TextEntry(`id(`email1), `opt(`notify), _("Email Target 1"), ""),
            `TextEntry(`id(`email2), `opt(`notify), _("Email Target 2"), ""),
            `TextEntry(`id(`email3), `opt(`notify), _("Email Target 3"), "")
        ),
        `VSpacing(1),
        `HBox(
            `VSpacing(0.5),
            // DWR MOD `ComboBox(`id(`expType), `opt(`notify, `immediate), _("Export Type"),  [
            `ComboBox(`id(`expType), `opt(`notify), _("Export Type"),  [
				_("None"), _("csv"), _("html"), _("Both")
			]),
            `TextEntry(`id(`expPath), _("Location to store log."), expPath ),
            `Bottom( `VWeight( 1, `PushButton(`id(`browse), _("&Browse")) ))
/*
            `CheckBox(`id(`csv), _("Send reports in CSV Format"), true),
            `CheckBox(`id(`html), _("Send reports in HTML Format"))
*/
        ),
        `VSpacing(1),
        `HBox(
             `PushButton(`id(`cancel), _("&Cancel") ),
             `PushButton(`id(`next), _("&Next") )
        )
    )));

	string mode = "All";
	string sdmode = "R";
    integer timeout_millisec = 20 * 1000;
    map event = $[];
    any addInput    = nil;
    //map<string,string> Settings = $[ ];

    while( true ) {

       event = UI::WaitForEvent( timeout_millisec );
       addInput = event["ID"]:nil; // We'll need this often - cache it


        if ( addInput == `monthdate && addInput != 0 ) {
            UI::ChangeWidget(`id(`weekday), `Value, _("All") );
        } else if ( addInput == `weekday && addInput != _("All")  ) {
            UI::ChangeWidget(`id(`monthdate), `Value, _("All") );
        }

        if ( addInput == `next ) {

			// Check for valid path
            expPath = (string) UI::QueryWidget(`id(`expPath), `Value);
            map<any,any> fileTest = $[];
            fileTest["checkFile"] = "1";
            fileTest["file"] = expPath;

            any pathExists = SCR::Read(.reports_parse, fileTest);
            string spath = tostring(pathExists);

            if ( spath != "1" ) {
                Popup::Error(_("The specified directory does not exist."));
	            UI::ChangeWidget(`id(`expPath), `Value, oldExpPath);
            } else {

                Settings["expPath"] = expPath;
                UI::ChangeWidget(`id(`expPath), `Value, expPath);

            string name = (string) UI::QueryWidget(`id(`name), `Value);
            string monthdate = (string) UI::QueryWidget(`id(`monthdate), `Value);
            string weekday = (string) UI::QueryWidget(`id(`weekday), `Value);
            any iHours = (any) UI::QueryWidget(`id(`hour), `Value);
            any iMins = (any) UI::QueryWidget(`id(`mins), `Value);
            string email1 = (string) UI::QueryWidget(`id(`email1), `Value);
            string email2 = (string) UI::QueryWidget(`id(`email2), `Value);
            string email3 = (string) UI::QueryWidget(`id(`email3), `Value);

            //string monthdate = tostring( iMonthdate );
            string hour = tostring( iHours );
            string mins = tostring( iMins );

			string expType = (string) UI::QueryWidget(`id(`expType), `Value);

			if ( expType == _("csv") || expType == _("Both") ) {
				Settings["csv"] = "1";
			}

			if ( expType == _("html") || expType == _("Both") ) {
				Settings["html"] = "1";
			}

			if ( weekday == _("All") ) { weekday = "-"; }
			if ( monthdate == _("All") ) { monthdate = "-"; }

			// de-i18n
			if ( weekday == _("Mon") ) { weekday = "Mon"; }
			if ( weekday == _("Tue") ) { weekday = "Tue"; }
			if ( weekday == _("Weds") ) { weekday = "Weds"; }
			if ( weekday == _("Thu") ) { weekday = "Thu"; }
			if ( weekday == _("Fri") ) { weekday = "Fri"; }
			if ( weekday == _("Sat") ) { weekday = "Sat"; }
			if ( weekday == _("Sun") ) { weekday = "Sun"; }

            Settings["add"] = "1";
            Settings["name"] = name;
            Settings["monthdate"] = monthdate;
            Settings["weekday"] = weekday;
            Settings["hour"] = hour;
            Settings["mins"] = mins;
            Settings["email1"] = email1;
            Settings["email2"] = email2;
            Settings["email3"] = email3;

			// Confirm reasonable input on report names
			string checkName = filterchars(name, "`~!@#$%^&*()[{]};:'\",<>?/\|");
			integer nameLength = size(name);

			if ( regexpmatch(name, "  ") == true ) {
				Popup::Error( _("Only one contiguous space allowed in report names.") );
			} else if ( checkName != "" ) {
				Popup::Error( _("These characters are not allowed in report names: \"`~!@#$%^&*()[{]};:'\",<>?/\|\"") );
			} else if ( nameLength > 128 ) {
				Popup::Error( _("Only 128 characters are allowed in report names.") );
			//} else if ( name == nil || name == "") {
			//	Popup::Error(  _("You must enter a name for the report.") );
			} else {
				boolean uniqueName = findDupe(name);
				if ( uniqueName == true ) {
		            UI::ReplaceWidget(`addSchedRep, schedFilterForm );
				} else {
					Popup::Error( _("Each report name should be unique.") );
				}
			}}

        } else if ( addInput == `sdmode ) {

            sdmode = popUpSdMode();

			if (sdmode != "") {
	            Settings["sdmode"] = sdmode;
	            //UI::ReplaceWidget(`id(`replace_sdmode), `PushButton(`id(`sdmode), _("Access Type: ") + sdmode) );
	            UI::ReplaceWidget(`id(`replace_sdmode), `PushButton(`id(`sdmode), sdmode) );
			}

        } else if ( addInput == `mode ) {

            mode = popUpMode();

			if (mode != "") {
	            Settings["mode"] = mode;
	            //UI::ReplaceWidget(`id(`replace_mode), `PushButton(`id(`mode), _("Mode: ") + mode) );
	            UI::ReplaceWidget(`id(`replace_mode), `PushButton(`id(`mode), mode) );
			}

        } else if (addInput == `save ) {

            string prog  = (string) UI::QueryWidget(`id(`prog), `Value);
            string prof = (string) UI::QueryWidget(`id(`prof), `Value);
            string pid = (string) UI::QueryWidget(`id(`pid), `Value);
            string res = (string) UI::QueryWidget(`id(`res), `Value);
			string sdmode = (string) UI::QueryWidget(`id(`sdmode), `Label);
			string mode = (string) UI::QueryWidget(`id(`mode), `Label);
            string sev = (string) UI::QueryWidget(`id(`sev), `Value);
            string expType = (string) UI::QueryWidget(`id(`expType), `Value);

            if ( expType == "csv" ) {
                Settings["exporttext"] = "1";
            } else if ( expType == "html" ) {
                Settings["exporthtml"] = "1";
            } else if ( expType == "both" ) {
                Settings["exporttext"] = "1";
                Settings["exporthtml"] = "1";
            }

			if ( sev == _("All") ) { sev = "-"; }

            Settings["getcron"] = "";
            Settings["prog"] = prog;
            Settings["prof"] = prof;
            Settings["pid"] = pid;
            Settings["sev"] = sev;
            Settings["res"] = res;
            Settings["sdmode"] = sdmode;
            Settings["mode"] = mode;

            any error = (any) SCR::Write(.reports_sched, Settings);

            if (is(error, string)) {
                string erStr = tostring(error);
                Popup::Error("Error: " + erStr);
            }

            addInput = `close;
            break;

        } else if ( addInput == `accept ) {

            expPath = (string) UI::QueryWidget(`id(`expPath), `Value);
			map<any,any> fileTest = $[];
			fileTest["checkFile"] = "1";
			fileTest["file"] = expPath;

			any pathExists = SCR::Read(.reports_parse, fileTest);
			string spath = tostring(pathExists);

			if ( spath == "1" ) {
	            Settings["expPath"] = expPath;
				UI::ChangeWidget(`id(`expPath), `Value, expPath);
			} else {
				Popup::Error(_("The specified directory does not exist."));
			}

        } else if ( addInput == `browse ) {

            string selectFile = "";
            selectFile = UI::AskForExistingDirectory( "/",  _("Select Directory"));

            if ( selectFile != nil ) {
                UI::ChangeWidget(`id(`expPath), `Value, selectFile);
            }

            Settings["expPath"] = expPath;

        } else if ( addInput == `cancel || addInput == `close ) {

            addInput = `close;
            break;
        }
    }

    UI::CloseDialog();

	//return (symbol) id;
	return;
}

define void editSchedForm() {

    integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
    string name  = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 1, "");

    map<string,string> Settings = $[ ];
    string readSched = "1";
	Settings["name"] = name;
    Settings["getcron"] = "";
    Settings["getrep"] = "1";
    Settings["readSched"] = "1";
    Settings["type"] = "schedRep";

    list<term> itemList = [];
    integer key = 1;

    //list <map> db = (list <map>) SCR::Read (.reports_sched, Settings);
    //map<string,string> db = (map<string,string>) SCR::Read (.reports_sched, Settings);
	map <any,any> db = nil;
    db = (map) SCR::Read (.reports_sched, Settings );
	//any aname = db["name"]:"";
	//string sname = tostring(aname);
	string sname = name;		// Don't know why this was pulled from db instead of name above
	any amday = db["mday"]:nil;
	any wday = db["wday"]:nil;
	any shour = db["hour"]:nil;
	any smins = db["mins"]:nil;

    string oldRepName = sname;
	string swday = "All";
	string monthdate = "All";

	if (amday != nil) { monthdate = tostring(amday); }
	if (wday != nil) { swday = tostring(wday); }

	//integer iwday = tointeger(wday);
	integer ihour = 23;
	integer imins = 59;
	if (shour != nil) { ihour  = tointeger(shour); }
	if (smins != nil) { imins = tointeger(smins); }

	// Get reports.conf info
    Settings["getrep"] = "";
    Settings["getconf"] = "1";
	map <any,any> db2 = nil;
    db2 = (map) SCR::Read (.reports_sched, Settings );

	any aemail1 = db2["addr1"]:nil;
	any aemail2 = db2["addr2"]:nil;
	any aemail3 = db2["addr3"]:nil;
	any tmpPath = db2["exportpath"]:nil;

	string email1 = "";
	string email2 = "";
	string email3 = "";

	string expType = "";
	string expPath = "/var/log/apparmor/reports-exported";
	if ( tmpPath != nil ) {
		oldExpPath = tostring(tmpPath);
		expPath = oldExpPath;
	} else {
		oldExpPath = defExpPath;
		expPath = oldExpPath;
	}

	if (aemail1 != nil) { email1 = tostring(aemail1); }
	if (aemail2 != nil) { email2 = tostring(aemail2); }
	if (aemail3 != nil) { email3 = tostring(aemail3); }

	/* Get Filtering Info for Report */
	any aprog = db2["prog"]:nil;
	any aprof = db2["prof"]:nil;
	any apid = db2["pid"]:nil;
	any ares = db2["res"]:nil;
	any asev = db2["sev"]:nil;
	any asdmode = db2["sdmode"]:nil;
	any amode = db2["mode"]:nil;
	any acsv = db2["csv"]:nil;
	any ahtml = db2["html"]:nil;

	/* debug */
	if ( aprog != nil ) { Settings["prog"] = tostring(aprog); }
	if ( aprof != nil ) { Settings["prof"] = tostring(aprof); }
	if ( apid != nil ) { Settings["pid"] = tostring(apid); }
	if ( ares != nil ) { Settings["res"] = tostring(ares); }
	if ( asev != nil ) { Settings["sev"] = tostring(asev); }
	if ( asdmode != nil ) { Settings["sdmode"] = tostring(asdmode); }
	if ( asdmode == nil || asdmode == "-" ) {
		Settings["sdmode"] = "All";
	}
	if ( amode != nil ) { Settings["mode"] = tostring(amode); }

	if ( acsv != nil && ahtml != nil ) {
		expType = "Both";
		Settings["csv"] = "1";
		Settings["html"] = "1";
	} else if ( acsv != nil && ahtml == nil ) {
		expType = "csv";
		Settings["csv"] = "1";
		Settings["html"] = "";
	} else if ( acsv == nil && ahtml != nil ) {
		expType = "html";
		Settings["csv"] = "";
		Settings["html"] = "1";
	} else if ( acsv == nil && ahtml == nil ) {
		expType = "None";
		Settings["csv"] = "";
		Settings["html"] = "";
	}

	// Special handling for sev
	string formatSev = "";
        if ( asev != nil ) { formatSev = tostring(asev); }
	if ( formatSev != "" && formatSev != "U" && formatSev != "All" && formatSev != nil) {
		formatSev = "0" + formatSev;
	}

	term continueBtns =

        `HBox(
             `PushButton(`id(`cancel), _("&Cancel") ),
             `PushButton(`id(`fwd), _("N&ext") )
        );


	// We need secondary filters for SIR reports only
	if ( sname == "Executive.Security.Summary" || sname == "Applications.Audit" ) {

		continueBtns =
        `HBox(
             `PushButton(`id(`cancel), _("&Cancel") ),
             `PushButton(`id(`save), _("&Save") )
        );

	}

	string edLabel = _("Edit Report Schedule for ") + sname;

    UI::OpenDialog(

    `ReplacePoint( `id(`editSchedRep),

    `VBox(
        `HBox( `Label(`id(`edname), edLabel) ),
        `VSpacing(1),
        `HBox(
            `ComboBox(`id(`monthdate), `opt(`notify), _("Day of Month"),  [
                `item(`id(`md_00), _("All")),
                `item(`id(`md_01), "1"), `item(`id(`md_02), "2"), `item(`id(`md_03), "3"),
                `item(`id(`md_04), "4"),  `item(`id(`md_05), "5"), `item(`id(`md_06), "6"),
                `item(`id(`md_07), "7"),  `item(`id(`md_08), "8"), `item(`id(`md_09), "9"),
                `item(`id(`md_10), "10"), `item(`id(`md_11), "11"), `item(`id(`md_12), "12"),
                `item(`id(`md_13), "13"), `item(`id(`md_14), "14"), `item(`id(`md_15), "15"),
                `item(`id(`md_16), "16"), `item(`id(`md_17), "17"), `item(`id(`md_18), "18"),
                `item(`id(`md_19), "19"), `item(`id(`md_20), "20"), `item(`id(`md_21), "21"),
                `item(`id(`md_22), "22"), `item(`id(`md_23), "23"), `item(`id(`md_24), "24"),
                `item(`id(`md_25), "25"), `item(`id(`md_26), "26"), `item(`id(`md_27), "27"),
                `item(`id(`md_28), "28"), `item(`id(`md_29), "29"), `item(`id(`md_30), "30"),
                `item(`id(`md_31), "31")
            ]),
            // DWR MOD `ComboBox(`id(`weekday), `opt(`notify, `immediate), _("Day of Week"),  [
            `ComboBox(`id(`weekday), `opt(`notify), _("Day of Week"),  [
                _("All"), _("Sun"), _("Mon"), _("Tue"), _("Wed"), _("Thu"), _("Fri"), _("Sat")
            ]),
/*
            `ComboBox(`id(`weekday), `opt(`notify, `immediate), "Run Weekly",  [
                    `id(`wd_na), "-", `id(`wd_sun), "Sun", `id(`wd_mon), "Mon",
                    `id(`wd_tue), "Tue", `id(`wd_wed), "Wed", `id(`wd_thu), "Thu",
                    `id(`wd_fri), "Fri", `id(`wd_sat), "Sat"
            ]),
*/
            `IntField(`id(`hour), _("Hour"), 0, 23, ihour),
            `IntField(`id(`mins), _("Minute"), 0, 59, imins)
        ),
        `VSpacing(1),
        `HBox(
            `VSpacing(1),
            `TextEntry(`id(`email1), `opt(`notify), _("Email Target 1"), email1),
            `TextEntry(`id(`email2), `opt(`notify), _("Email Target 2"), email2),
            `TextEntry(`id(`email3), `opt(`notify), _("Email Target 3"), email3)
        ),
        `VSpacing(1),
        `HBox(
            `VSpacing(0.5),

            // DWR MOD `ComboBox(`id(`expType), `opt(`notify, `immediate), _("Export Type"),  [
            `ComboBox(`id(`expType), `opt(`notify), _("Export Type"),  [
                _("None"), _("csv"), _("html"), _("Both")
            ]),
            `TextEntry(`id(`expPath), _("Location to store log."), expPath ),
            `Bottom( `VWeight( 1, `PushButton(`id(`browse), _("&Browse")) ))
/*
            `CheckBox(`id(`csv), _("Send reports in CSV Format"), csv),
            `CheckBox(`id(`html), _("Send reports in HTML Format"), html)
*/
        ),
        `VSpacing(1),
		continueBtns
/*
        `HBox(
             `PushButton(`id(`cancel), _("&Cancel") ),
             `PushButton(`id(`fwd), _("N&ext") )
        )
*/
    )));

	/**************************************************/
	string mode   = _("All");
	string sdmode = _("R");

    integer timeout_millisec = 20 * 1000;
    map event = $[];
    any editInput    = nil;
    //map<string,string> Settings = $[ ];

	//Cheap & easy way to give default value to ComboBox
	if (swday != _("All") ) {
	    UI::ChangeWidget(`id(`weekday), `Value, swday);
	}

	if ( monthdate != _("All") ) {
		UI::ChangeWidget(`id(`monthdate), `Value, monthdate);
	}

	if ( expType != _("None") ) {
		UI::ChangeWidget(`id(`expType), `Value, expType);
	}

    while( true ) {

       event = UI::WaitForEvent( timeout_millisec );
       editInput = event["ID"]:nil; // We'll need this often - cache it

        if ( editInput == `monthdate && editInput != 0 ) {
            UI::ChangeWidget(`id(`weekday), `Value, _("All") );
        } else if ( editInput == `weekday && editInput != _("All") ) {
            UI::ChangeWidget(`id(`monthdate), `Value, _("All") );
        }

		if ( editInput == `fwd ) {

            string email1 = (string) UI::QueryWidget(`id(`email1), `Value);
            string email2 = (string) UI::QueryWidget(`id(`email2), `Value);
            string email3 = (string) UI::QueryWidget(`id(`email3), `Value);

            // New - Mar. 26, 2006 - debug
            string spath = "0";

            expPath = (string) UI::QueryWidget(`id(`expPath), `Value);
            map<any,any> fileTest = $[];
            fileTest["checkFile"] = "1";
            fileTest["file"] = expPath;

            any pathExists = SCR::Read(.reports_parse, fileTest);
            spath = tostring(pathExists);
            Settings["expPath"] = expPath;

			if ( spath == "1" ) {

				Settings = getSchedSettings(Settings);
	            UI::ReplaceWidget(`editSchedRep, editFilterForm(Settings) );

				// Special handling for ComboBoxes (sev)
				if ( formatSev != "" ) { UI::ChangeWidget(`id(`sev), `Value, formatSev); }

			} else {
                Popup::Error(_("The specified directory does not exist."));
	            UI::ChangeWidget(`id(`expPath), `Value, oldExpPath);
			}

        } else if ( editInput == `sdmode ) {

			sdmode = popUpSdMode();

			if ( sdmode != "" ) {
				Settings["sdmode"] = sdmode;
	            UI::ReplaceWidget(`id(`replace_sdmode), `PushButton(`id(`sdmode), sdmode) );
			}

		} else if ( editInput == `mode ) {

			mode = popUpMode();
			if ( mode != "" ) {
				Settings["mode"] = mode;
	            UI::ReplaceWidget(`id(`replace_mode), `PushButton(`id(`mode), mode) );
			}

        } else if ( editInput == `browse ) {

            string selectFile = "";
            selectFile = UI::AskForExistingDirectory( "/",  _("Select Directory"));

            if ( selectFile != nil ) {
                UI::ChangeWidget(`id(`expPath), `Value, selectFile);
            }

            Settings["expPath"] = expPath;

        } else if ( editInput == `close || editInput == `cancel ) {
			break;
		} else if ( editInput == `save ) {

			string spath = "0";

			if ( sname == "Executive.Security.Summary" || sname == "Applications.Audit" ) {

	            expPath = (string) UI::QueryWidget(`id(`expPath), `Value);
	            map<any,any> fileTest = $[];
	            fileTest["checkFile"] = "1";
	            fileTest["file"] = expPath;

	            any pathExists = SCR::Read(.reports_parse, fileTest);
	            spath = tostring(pathExists);
	            Settings["expPath"] = expPath;
			} else {
				// SIR Reports already checked
				spath = "1";
			}

            if ( spath != "1" ) {
                Popup::Error(_("The specified directory does not exist."));
	            UI::ChangeWidget(`id(`expPath), `Value, oldExpPath);
            } else {


			if ( sname != "Executive.Security.Summary" && sname != "Applications.Audit" ) {

	            string prog  = (string) UI::QueryWidget(`id(`prog), `Value);
	            string prof = (string) UI::QueryWidget(`id(`prof), `Value);
	            string pid = (string) UI::QueryWidget(`id(`pid), `Value);
	            string res = (string) UI::QueryWidget(`id(`res), `Value);
				string sdmode = (string) UI::QueryWidget(`id(`sdmode), `Label);
				string mode = (string) UI::QueryWidget(`id(`mode), `Label);
	            string sev = (string) UI::QueryWidget(`id(`sev), `Value);

	            Settings["prog"] = prog;
	            Settings["prof"] = prof;
	            Settings["pid"] = pid;
	            Settings["sev"] = sev;
	            Settings["res"] = res;
	            Settings["sdmode"] = sdmode;
	            Settings["mode"] = mode;

			} else {

	            string email1 = (string) UI::QueryWidget(`id(`email1), `Value);
	            string email2 = (string) UI::QueryWidget(`id(`email2), `Value);
	            string email3 = (string) UI::QueryWidget(`id(`email3), `Value);

				Settings = getSchedSettings(Settings);
			}

			Settings["name"] = sname;
            Settings["getconf"] = "";
            Settings["setconf"] = "1";

            string expType = (string) UI::QueryWidget(`id(`expType), `Value);

            if ( expType == "csv" ) {
                Settings["exporttext"] = "1";
            } else if ( expType == "html" ) {
                Settings["exporthtml"] = "1";
            } else if ( expType == "both" ) {
                Settings["exporttext"] = "1";
                Settings["exporthtml"] = "1";
            }

            any error = (any) SCR::Write(.reports_sched, Settings);

            if (is(error, string)) {
                string erStr = tostring(error);
                Popup::Error( _("Error: ") + erStr);
            }

            break;
		}}
		// END - Save Dialog (editInput == `save)
	}

	UI::CloseDialog();

	//return (symbol) editInput;
	return;
}

define void delSchedForm() {

    integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
    string name  = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 1, "");

    map<string,string> Settings = $[ ];
    Settings["del"] = "1";
    Settings["name"] = name;

    UI::OpenDialog(

    `VBox(
        `VSpacing(0.5),
        `Label( _("Delete Confirmation") ),
        `VSpacing(1),
        `HBox(
            `HSpacing( `opt(`hstretch), 0.75 ),
            `Left(`HWeight( 0, `Label( _("Are you sure you want to delete: ") + name + _("?") )))
        ),
        `VSpacing(1),
        `HBox(
             `PushButton(`id(`cancel), _("&Cancel") ),
             `PushButton(`id(`del), _("&Delete") )
        )
    ));

    symbol delInput = `default;

    while ( delInput != `close ) {

        delInput = (symbol) UI::UserInput();

        if ( delInput == `del ) {
            SCR::Write(.reports_sched, Settings);
            //any error = (any) SCR::Write(.reportsched, Settings);
            break;
        } else if (delInput == `close || delInput == `cancel) {
            break;
        }
    }

    UI::CloseDialog();

    return;

}

// Forces update of the table of available scheduled reports
define void updateSched() {

    map<string,string> Settings = $[ ];
    string readSched = "1";
	Settings["getcron"] = "1";
    Settings["readSched"] = "1";
    Settings["type"] = "schedRep";

    list<term> itemList = [];
    integer key = 1;

    list <map> db = (list <map>) SCR::Read (.reports_sched, Settings);

    foreach ( map record, db, {
        itemList = add( itemList, `item( `id(key), record["name"]:nil, record["mday"]:nil, record["wday"]:nil,
                 record["hour"]:nil, record["mins"]:nil ));
        key = key + 1;
    });

    term schedForm =

		`VBox(
            `Label( _("Schedule Reports") ),
            `VSpacing(2),
            `HBox(
               `VSpacing(10),
               // DWR MOD `Table(`id(`table), `opt(`notify, `immediate ), `header(_("Report Name"), _("Day of Month"), _("Day of Week"), _("Hour"), _("Mins") ), itemList)
               `Table(`id(`table), `opt(`notify), `header(_("Report Name"), _("Day of Month"), _("Day of Week"), _("Hour"), _("Mins") ), itemList)
//               `Table(`id(`table), `opt(`notify, `immediate ), `header("Report Name", "Last Run", "Day of Month", "Day of Week", "Hours", "Mins"), reportlist)
			),
            `VSpacing(0.5),
			`HBox(
				`PushButton(`id(`viewrep), _("View Archive") ),
				`PushButton(`id(`runrep), _("Run Now") )
			),
			`HBox(
				`PushButton(`id(`add), _("Add") ),
				`PushButton(`id(`edit), _("Edit") ),
				`PushButton(`id(`delete), _("Delete") )
			)
        );

    Wizard::SetContentsButtons( _("AppArmor Security Event Report"), schedForm, mainHelp, _("Back"), _("&Next") );

	return;
}

define symbol displaySchedForm() {

// START - Move to separate Routine - START

    map<string,string> Settings = $[ ];
    string readSched = "1";
	Settings["getcron"] = "1";
    Settings["readSched"] = "1";
    Settings["type"] = "schedRep";

    list<term> itemList = [];
    integer key = 1;

    list <map> db = (list <map>) SCR::Read (.reports_sched, Settings);

    foreach ( map record, db, {
        itemList = add( itemList, `item( `id(key), record["name"]:nil, record["mday"]:nil, record["wday"]:nil,
                 record["hour"]:nil, record["mins"]:nil ));
        key = key + 1;
    });

    term schedForm =

		`Frame( `id(`dosched), _("Schedule Reports"),
			`VBox(
            `VSpacing(2),
            `HBox(
               `VSpacing(10),
               `Table(`id(`table), `opt(`notify), `header(_("Report Name"),
					_("Day of Month"), _("Day of Week"), _("Hour"), _("Mins")),
					itemList)
			),
            `VSpacing(0.5),
			`HBox(
				`PushButton(`id(`viewrep), _("View Archive") ),
				`PushButton(`id(`runrep), _("Run Now") )
			),
			`HBox(
				`PushButton(`id(`add), _("Add") ),
				`PushButton(`id(`edit), _("Edit") ),
				`PushButton(`id(`delete), _("Delete") )
			))
        );

    Wizard::SetContentsButtons( _("AppArmor Security Event Report"), schedForm,
		mainHelp, _("Back"), _("&Done") );

	// Double-click tracking
	integer newRecord = nil;
	integer lastRecord = nil;

	map event = $[];
	any id    = nil;
	while( true ) {

	    event = UI::WaitForEvent( timeout_millisec );

	    id = event["ID"]:nil; // We'll need this often - cache it

		if ( id == `schedrep ) {

          break;

        } else if ( id == `abort || id == `cancel || id == `done ) {
          break;
        } else if ( id == `back ) {
          break;
        } else if ( id == `runrep || id == `viewrep ) {
          break;
		} else if ( id == `next ) {
			id = `done;
			break;
		} else if ( id == `add ) {
			addSchedForm();
		    //Wizard::SetContentsButtons( _("AppArmor Security Event Report"), schedForm, mainHelp, "Back", _("&Next") );
			updateSched();
			continue;

		} else if ( id == `edit ) {
			editSchedForm();
			updateSched();
			continue;

		} else if ( id == `delete ) {

			integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
			string repName = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 1, "");

			if ( repName == "Executive.Security.Summary" || repName == "Applications.Audit" || repName == "Security.Incident.Report" ) {
				Popup::Error( _("Cannot delete a stock report.") );
			} else {

				delSchedForm();
				updateSched();
			}

			continue;

        } else if ( id == `table ) {

			newRecord =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );

			if ( newRecord == lastRecord ) {
				//editSchedForm();
				//updateSched();
				id = `runrep;
				break;
				newRecord = 0;
			}

			lastRecord = newRecord;

        } else {
            y2error("Unexpected return code: %1", id);
            continue;
        }
	}

	return (symbol) id;
}


}


