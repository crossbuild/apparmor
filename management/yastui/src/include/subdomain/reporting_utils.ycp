/* ------------------------------------------------------------------
*
*    Copyright (C) 2002-2005 Novell/SUSE
*
*    This program is free software; you can redistribute it and/or
*    modify it under the terms of version 2 of the GNU General Public 
*    License published by the Free Software Foundation.
*
  ------------------------------------------------------------------*/
{

import "Wizard";
import "Popup";
include "subdomain/report_helptext.ycp";
textdomain  "yast2-apparmor";

define boolean checkEventDb() {

	boolean dbActivated = false;
	map<string,string> args = $[];
	args["checkDb"] = "1";

	any dbCheck = (any) SCR::Read( .reports_parse, args);
	integer dbOn = tointeger(dbCheck);

	if ( dbOn == 1 ) {
		dbActivated = true;
	}

	return dbActivated;
}

define boolean findDupe(string name) {

    boolean unique = false;
    map<string,string> args = $[ ];
    args["name"] = name;
    args["getdupe"] = "1";
    any aDupe = (any) SCR::Read (.reports_sched, args );

    if ( aDupe == "" || aDupe == nil ) {
        unique = true;      // bad, but try for a non-breaking failure
    } else if ( aDupe == 1 ) {
        unique = false;
    } else {
        unique = true;
    }

    return unique;
}

define string unI18n(string weekday) {

    if ( weekday == _("Mon") ) { weekday = "Mon"; }
    if ( weekday == _("Tue") ) { weekday = "Tue"; }
    if ( weekday == _("Wed") ) { weekday = "Wed"; }
    if ( weekday == _("Thu") ) { weekday = "Thu"; }
    if ( weekday == _("Fri") ) { weekday = "Fri"; }
    if ( weekday == _("Sat") ) { weekday = "Sat"; }
    if ( weekday == _("Sun") ) { weekday = "Sun"; }

    return weekday;
}

/*  Possible 'type's for getLastPage() && getLastSirPage()
	- displayArchForm():	type = sirRep || audRep || essRep
	- displayRunForm():		type = sir || aud || ess
*/

// Return last page number of post-filtered report
define integer getLastPage(string type, map Settings, string name) {

	if ( type == "sir" || type == "sirRep" ) {
		if ( name != nil && name != "" ) {
			Settings["name"] = name;
		} else {
			y2error(_("No name provided for retrieving SIR report page count."));
			return 1;		// return a page count of 1
		}
	}

	Settings["type"] = type;
    Settings["getLastPage"] = "1";
    map<any,any> page = $[];
    page = (map) SCR::Read (.reports_parse, Settings);
    integer lastPage =  page["numPages"]:1;

	return lastPage;
}

define integer popUpGoto(integer lastPage) {

    UI::OpenDialog(
        `VBox(
            `HBox(
                `TextEntry(`id(`gotoPage), _("Enter a Page to Move to."), "")
            ),
            `HBox(
                `PushButton(`id(`abort), `opt(`notify), _("&Abort") ),
                `PushButton(`id(`save), `opt(`notify), _("&Save") )
            )
		)
	);

	map event = $[];
    any id    = nil;
	integer igoto = nil;

    while( true ) {

        event = UI::WaitForEvent();
        id = event["ID"]:nil;

        if ( id == `abort || id == `close || id == `cancel ) {

			break;

		} else if ( id == `save ) {

			any agoto = UI::QueryWidget(`id(`gotoPage), `Value);
			igoto = tointeger(agoto);

			if ( igoto == nil || igoto < 1 || igoto > lastPage ) {

				Popup::Message("You must enter a value between 1 and " + lastPage + ".");

			} else {

				break;

			}
		}
	}

	UI::CloseDialog();

	return igoto;
}

define string getSortId(string type, any sortId) {

	string sortKey = "";


    if ( type == "aud" || type == "audRep") {

			if ( sortId == 0 ) {
				sortKey = "prog";
			} else if ( sortId == 1 ) {
				sortKey = "profile";
			} else if ( sortId == 2 ) {
				sortKey = "pid";
			} else if ( sortId == 3 ) {
				sortKey = "state";
			} else if ( sortId == 4 ) {
				sortKey = "type";
			}

    } else if (type == "ess" || type == "essRep" ) {

            if ( sortId == 0 ) {
                sortKey = "host";
            } else if ( sortId == 1 ) {
                //sortKey = "date";
                sortKey = "numRejects";
            } else if ( sortId == 2 ) {
                sortKey = "numEvents";
            } else if ( sortId == 3 ) {
                sortKey = "sevMean";
            } else if ( sortId == 4 ) {
                sortKey = "sevHi";
			}

	} else {

			if ( sortId == 0 ) {
				sortKey = "host";
			} else if ( sortId == 1 ) {
				//sortKey = "date";
				sortKey = "time";
			} else if ( sortId == 2 ) {
				sortKey = "prog";
			} else if ( sortId == 3 ) {
				sortKey = "profile";
			} else if ( sortId == 4 ) {
				sortKey = "pid";
			} else if ( sortId == 5 ) {
				sortKey = "resource";
			} else if ( sortId == 6 ) {
				sortKey = "severity";
			} else if ( sortId == 7 ) {
				sortKey = "sdmode";
			} else if ( sortId == 8 ) {
				sortKey = "mode";
			}

	}

	return sortKey;
}

// Get the name of the filter (header column) to sort by
define string popUpSort(string type) {

	term btnList = nil;

	if ( type == "aud" || type == "audRep") {
		btnList =
			`VBox(
            `Left(`RadioButton(`id(0), _("Program") )),
            `Left(`RadioButton(`id(1), _("Profile") )),
            `Left(`RadioButton(`id(2), _("PID") )),
            `Left(`RadioButton(`id(3), _("State") )),
            `Left(`RadioButton(`id(4), _("Type") ))
			);

	} else if (type == "ess" || type == "essRep" ) {
		btnList =
			`VBox(
            `Left(`RadioButton(`id(0), _("Host") )),
            `Left(`RadioButton(`id(1), _("Num. Rejects") )),
            `Left(`RadioButton(`id(2), _("Num. Events") )),
            `Left(`RadioButton(`id(3), _("Ave. Sev") )),
            `Left(`RadioButton(`id(4), _("High Sev") ))
			);
	} else {

		btnList =
			`VBox(
			// Sorting by host is no longer meaningful (due to sql changes)
            //`Left(`RadioButton(`id(0), _("Host") )),
            `Left(`RadioButton(`id(1), _("Date") )),
            `Left(`RadioButton(`id(2), _("Program") )),
            `Left(`RadioButton(`id(3), _("Profile") )),
            `Left(`RadioButton(`id(4), _("PID") )),
            `Left(`RadioButton(`id(5), _("Detail") )),
            `Left(`RadioButton(`id(6), _("Severity") )),
            `Left(`RadioButton(`id(7), _("Access Type") )),
            `Left(`RadioButton(`id(8), _("Mode") ))
			);
	}

    UI::OpenDialog(
        `VBox(
            `HBox(
             //`HSpacing( `opt(`vstretch), 0.5),
				`RadioButtonGroup(`id(`sortKey),
					btnList
                )
            ),
            `HBox(
                `PushButton(`id(`abort), _("&Abort") ),
                `PushButton(`id(`save), _("&Save") )
            )
        )
    );

	map event = $[];
    any id    = nil;
	string sortKey = nil;

    while( true ) {

        event = UI::WaitForEvent();
        id = event["ID"]:nil; // We'll need this often - cache it

        if ( id == `abort || id == `cancel || id == `close) {

            break;

        } else if (id == `save ) {

			any sortId = UI::QueryWidget(`id(`sortKey), `CurrentButton);

			/* sortKey needs to match the hash reference names in parseEventLog()
				&& sortRecords() in Immunix::Reports.pm */

			sortKey = getSortId(type,sortId);
			break;

        }
	}

    UI::CloseDialog();

    return sortKey;

}

// Mode
define string popUpMode() {

    string checkMode = (string) UI::QueryWidget(`id(`mode), `Label);
    list splitMode = splitstring (checkMode, " ");
    string myMode = splitMode[size(splitMode)-1]:"All";

	UI::OpenDialog(
		`VBox(
			`HBox(
				`CheckBox(`id(`clear), `opt(`notify, `immediate ), _("All"), true),
				`CheckBox(`id(`read), `opt(`notify, `immediate ), _("Read"), false),
				`CheckBox(`id(`write), `opt(`notify, `immediate ), _("Write"), false),
				`CheckBox(`id(`link), `opt(`notify, `immediate ), _("Link"), false),
				`CheckBox(`id(`exec), `opt(`notify, `immediate ), _("Execute"), false),
				`CheckBox(`id(`mmap), `opt(`notify, `immediate ), _("MMap"), false)
			),
			`HBox(
				`PushButton(`id(`abort), _("&Abort") ),
				`PushButton(`id(`save), _("&Save") )
			)
		)
	);

        integer isall = search( myMode, "All");
        if ( isall != nil && isall  >= 0 ) {
		UI::ChangeWidget(`id(`clear), `Value, false);
		UI::ChangeWidget(`id(`read), `Value, true);
		UI::ChangeWidget(`id(`write), `Value, true);
		UI::ChangeWidget(`id(`link), `Value, true);
		UI::ChangeWidget(`id(`exec), `Value, true);
		UI::ChangeWidget(`id(`mmap), `Value, true);
        } else {
                if ( search( myMode, "r") != nil ) {
		        UI::ChangeWidget(`id(`clear), `Value, false);
		        UI::ChangeWidget(`id(`read), `Value, true);
	            }
                if ( search( myMode, "w") != nil ) {
		        UI::ChangeWidget(`id(`clear), `Value, false);
		        UI::ChangeWidget(`id(`write), `Value, true);
	        }
                if ( search( myMode, "l") != nil ) {
		        UI::ChangeWidget(`id(`clear), `Value, false);
		        UI::ChangeWidget(`id(`link), `Value, true);
	        }
                if ( search( myMode, "x") != nil ) {
		        UI::ChangeWidget(`id(`clear), `Value, false);
		        UI::ChangeWidget(`id(`exec), `Value, true);
                }
                if ( search( myMode, "m") != nil ) {
		        UI::ChangeWidget(`id(`clear), `Value, false);
		        UI::ChangeWidget(`id(`mmap), `Value, true);
	        }
        }

	string mode = "";
	map event = $[];
	any id    = nil;

	while( true ) {

		event = UI::WaitForEvent();
		id = event["ID"]:nil; // We'll need this often - cache it

		if ( id == `clear) {

			if ( UI::QueryWidget(`id(`clear), `Value) == true ) {
				UI::ChangeWidget(`id(`read), `Value, false);
				UI::ChangeWidget(`id(`write), `Value, false);
				UI::ChangeWidget(`id(`link), `Value, false);
				UI::ChangeWidget(`id(`exec), `Value, false);
				UI::ChangeWidget(`id(`mmap), `Value, false);
				mode = "All";
			}

		} else if ( id == `read || id == `write || id == `link || id == `exec || id == `mmap ) {

			if ( UI::QueryWidget(`id(`read), `Value) == true ) {
				UI::ChangeWidget(`id(`clear), `Value, false);
			} else if ( UI::QueryWidget(`id(`write), `Value) == true ) {
				UI::ChangeWidget(`id(`clear), `Value, false);
			} else if ( UI::QueryWidget(`id(`link), `Value) == true ) {
				UI::ChangeWidget(`id(`clear), `Value, false);
			} else if ( UI::QueryWidget(`id(`exec), `Value) == true ) {
				UI::ChangeWidget(`id(`clear), `Value, false);
			} else if ( UI::QueryWidget(`id(`mmap), `Value) == true ) {
				UI::ChangeWidget(`id(`link), `Value, false);
			}

		} else if ( id == `abort || id == `cancel || id == `close) {
                        mode = myMode;
			break;
		} else if ( id == `save ) {

			if ( UI::QueryWidget(`id(`clear), `Value) == true ) {
				mode = "All";
			} else {
				list<string> sdList = [];
				if ( UI::QueryWidget(`id(`read), `Value) == true ) { sdList = add(sdList, "r"); }
				if ( UI::QueryWidget(`id(`write), `Value) == true ) { sdList = add(sdList, "w"); }
				if ( UI::QueryWidget(`id(`link), `Value) == true ) { sdList = add(sdList, "l"); }
				if ( UI::QueryWidget(`id(`exec), `Value) == true ) { sdList = add(sdList, "x"); }
				if ( UI::QueryWidget(`id(`mmap), `Value) == true ) { sdList = add(sdList, "m"); }

			    foreach ( string perm, sdList, { mode = mode + perm; });
			}

			break;
		}
	}

	UI::CloseDialog();
	return mode;
}

// Access Type - SD Mode
define string popUpSdMode() {

	string checkMode = (string) UI::QueryWidget(`id(`sdmode), `Label);
    list splitMode = splitstring (checkMode, " ");
    string mySdMode = splitMode[size(splitMode)-1]:"R";

	UI::OpenDialog(
		`VBox(
			`HBox(
				`CheckBox(`id(`clear), `opt(`notify, `immediate ), _("All"), false),
				`CheckBox(`id(`permit), `opt(`notify, `immediate ), _("Permit"), false),
				`CheckBox(`id(`reject),`opt(`notify, `immediate ), _("Reject"), true),
				`CheckBox(`id(`audit),`opt(`notify, `immediate ), _("Audit"), false)
			),
			`HBox(
				`PushButton(`id(`abort), `opt(`notify), _("&Abort") ),
				`PushButton(`id(`save), `opt(`notify), _("&Save") )
			)
		)
	);

	if ( mySdMode == "P") {
		UI::ChangeWidget(`id(`clear), `Value, false);
		UI::ChangeWidget(`id(`permit), `Value, true);

	} else if ( mySdMode == "R") {
		UI::ChangeWidget(`id(`clear), `Value, false);
		UI::ChangeWidget(`id(`reject), `Value, true);

	} else if ( mySdMode == "A") {
		UI::ChangeWidget(`id(`clear), `Value, false);
		UI::ChangeWidget(`id(`audit), `Value, true);

	} else if ( mySdMode == "PR" ) {
		UI::ChangeWidget(`id(`clear), `Value, false);
		UI::ChangeWidget(`id(`permit), `Value, true);
		UI::ChangeWidget(`id(`reject), `Value, true);

	} else if (mySdMode == "PA" ) {
		UI::ChangeWidget(`id(`clear), `Value, false);
		UI::ChangeWidget(`id(`permit), `Value, true);
		UI::ChangeWidget(`id(`audit), `Value, true);

	} else if (mySdMode == "PRA" ) {
		UI::ChangeWidget(`id(`clear), `Value, false);
		UI::ChangeWidget(`id(`permit), `Value, true);
		UI::ChangeWidget(`id(`reject), `Value, true);
		UI::ChangeWidget(`id(`audit), `Value, true);

	} else if (mySdMode == "RA" ) {
		UI::ChangeWidget(`id(`clear), `Value, false);
		UI::ChangeWidget(`id(`reject), `Value, true);
		UI::ChangeWidget(`id(`audit), `Value, true);
	} else if ( mySdMode == "All" ) {
		UI::ChangeWidget(`id(`clear), `Value, true);
		UI::ChangeWidget(`id(`permit), `Value, false);
		UI::ChangeWidget(`id(`reject), `Value, false);
		UI::ChangeWidget(`id(`audit), `Value, false);
	}

	string sdMode = "";
	map event = $[];
	any id    = nil;

	while( true ) {

		event = UI::WaitForEvent();
		id = event["ID"]:nil;

        if ( id == `clear) {

            if ( UI::QueryWidget(`id(`clear), `Value) == true ) {
	            UI::ChangeWidget(`id(`permit), `Value, false);
	            UI::ChangeWidget(`id(`reject), `Value, false);
	            UI::ChangeWidget(`id(`audit), `Value, false);
	            sdMode = "All";
			}

        } else if ( id == `permit || id == `reject || id == `audit ) {

            if ( UI::QueryWidget(`id(`permit), `Value) == true ) {
	            UI::ChangeWidget(`id(`clear), `Value, false);
			} else if ( UI::QueryWidget(`id(`reject), `Value) == true ) {
	            UI::ChangeWidget(`id(`clear), `Value, false);
			} else if ( UI::QueryWidget(`id(`audit), `Value) == true ) {
	            UI::ChangeWidget(`id(`clear), `Value, false);
			}

        } else if ( id == `abort ) {

            sdMode = mySdMode;
            break;

        } else if ( id == `save ) {

            if ( UI::QueryWidget(`id(`clear), `Value) == true ) {
                sdMode = "All";
            } else {
                sdMode = "";
                list<string> mList = [];
                if ( UI::QueryWidget(`id(`permit), `Value) == true ) { mList = add(mList, "P"); }
                if ( UI::QueryWidget(`id(`reject), `Value) == true ) { mList = add(mList, "R"); }
                if ( UI::QueryWidget(`id(`audit), `Value) == true ) { mList = add(mList, "A"); }

                foreach ( string state, mList, { sdMode = sdMode + state; });
            }

            break;
        }

	}

	UI::CloseDialog();
	return sdMode;
}

}
