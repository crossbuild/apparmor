/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/AppArmorReports.ycp
 * Package:	Configuration of aa-reports
 * Summary:	AppArmorReports settings, input and output functions
 * Authors:	David Drewelow <ddrewelow@suse.de>
 *
 */

{

module "AppArmorReports";

textdomain "yast2-apparmor";

import "Progress";
import "Report";
import "Summary";
import "Message";
import "Popup";

map<string,string> Settings = $[];

list<string> repWidgets = [
    "startDay","startMonth","startYear","startHours","startMins",
    "endDay","endMonth","endYear","endHours","endMins",
    "program_name","profile","pid","sev","res","sdmode","mode",
    "exppath","expPath","expType"
];

global string expPath = "/var/log/apparmor/reports-exported";
global define term schedFilterForm();

global void InitSettings() {
	Settings = $[];
}

global map<string,string> GetSettings() {
	return Settings;
}

global void UpdateSettings(map<string,string> newSettings) {

	string blah = "";

	foreach( string name, string data, newSettings, {
		Settings[name] = data;
		blah = blah + "Name: " + name + ", Data: " + data;
	});

	y2milestone("imx Updated Report Settings: %1", blah);
	// Settings = union(Settings, newSettings);

}

// Save new settings from AddEditDialog
global void SaveSchedSettings() {
	map<string,string> newRep = AppArmorReports::GetSettings();
	newRep["add"] = "1";		// May need to handle for edit too
    any error = (any) SCR::Write(.reports_sched, newRep);

    if (is(error, string)) {
        string erStr = tostring(error);
        Popup::Error("Error: " + erStr);
    }
}

global void PutSettings() {

	list<map<string, any> > fieldContents = UI::CollectUserInput();
	foreach (map<string,any> map_wid, fieldContents, {
		foreach (string wtype, any wid, map_wid, {
			//string wid_val = tostring(raw_val);
			if ( wtype == "ID") {
				any awid_val = (any) UI::QueryWidget (`id (wid), `Value);
				string wid_val = tostring(awid_val);
				if (wid_val  != "" && wid_val != nil) {
					string swid = tostring(wid);
					Settings["swid"] = wid_val;
					y2milestone("Adding imx widgets: %1:%2", swid, wid_val);
				} else {
					y2milestone("imx widgets: %1 is NIL", wid);
				}
			}
		});
	});

	SaveSchedSettings();
}

// Chan0ges widget settings to match apparmor requirements
define void TransformSettings() {

    if ( Settings["expType"]:"" == _("csv") || Settings["expType"]:"" == _("Both") ) {
        Settings["csv"] = "1";
    }

    if ( Settings["expType"]:"" == _("html") || Settings["expType"]:"" == _("Both") ) {
        Settings["html"] = "1";
    }

    if ( Settings["weekday"]:"" == _("All") ) { Settings["weekday"] = "-"; }
    if ( Settings["monthdate"]:"" == _("All") ) { Settings["monthdate"] = "-"; }

    // de-i18n
    if ( Settings["weekday"]:"" == _("Monday") ) { Settings["weekday"] = "Monday"; }
    if ( Settings["weekday"]:"" == _("Tuesday") ) { Settings["weekday"] = "Tuesday"; }
    if ( Settings["weekday"]:"" == _("Wednesday") ) { Settings["weekday"] = "Wednesday"; }
    if ( Settings["weekday"]:"" == _("Thursday") ) { Settings["weekday"] = "Thursday"; }
    if ( Settings["weekday"]:"" == _("Friday") ) { Settings["weekday"] = "Friday"; }
    if ( Settings["weekday"]:"" == _("Saturday") ) { Settings["weekday"] = "Saturday"; }
    if ( Settings["weekday"]:"" == _("Sunday") ) { Settings["weekday"] = "Sunday"; }

    Settings["add"] = "1";

}


/**
 * Prototypes
 */
global boolean Modified();

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 */
global boolean proposal_valid = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = Modified;

/**
 * Abort function
 * @return boolean return true if abort
 */
global define boolean Abort() ``{
    if(AbortFunction != nil) return AbortFunction() == true;
    return false;
}

boolean ReallyAbort() {
    return !AppArmorReports::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}

global boolean isGui() {
    map uiInfo = UI::GetDisplayInfo();
    boolean isTextmode = uiInfo["TextMode"]:true;

	if (isTextmode) return false;
	else return true;
}

global boolean Read() {

    /* AppArmorReports read dialog caption */
    string caption = _("Initializing aa-reports Configuration");

    // TODO FIXME Set the right number of stages
    integer steps = 4;

    integer sl = 500;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New( caption, " ", steps, [
	    /* Progress stage 1/3 */
	    _("Read the database"),
	    /* Progress stage 2/3 */
	    _("Read the previous settings"),
	    /* Progress stage 3/3 */
	    _("Detect the devices")
	], [
	    /* Progress step 1/3 */
	    _("Reading the database..."),
	    /* Progress step 2/3 */
	    _("Reading the previous settings..."),
	    /* Progress step 3/3 */
	    _("Detecting the devices..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // read database
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(false) Report::Error(_("Cannot read database1."));
    sleep(sl);

    // read another database
    if(Abort()) return false;
    Progress::NextStep();
    /* Error message */
    if(false) Report::Error(_("Cannot read database2."));
    sleep(sl);

    // read current settings
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(false) Report::Error(Message::CannotReadCurrentSettings());
    sleep(sl);

    // detect devices
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(false) Report::Warning(_("Cannot detect devices."));
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Write all aa-reports settings
 * @return true on success
 */
global boolean Write() {

    /* AppArmorReports read dialog caption */
    string caption = _("Saving aa-reports Configuration");

    // TODO FIXME And set the right number of stages
    integer steps = 2;

    integer sl = 500;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Write the settings"),
	    /* Progress stage 2/2 */
	    _("Run SuSEconfig")
	], [
	    /* Progress step 1/2 */
	    _("Writing the settings..."),
	    /* Progress step 2/2 */
	    _("Running SuSEconfig..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // write settings
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(false) Report::Error (_("Cannot write settings."));
    sleep(sl);

    // run SuSEconfig
    if(Abort()) return false;
    Progress::NextStage ();
    /* Error message */
    if(false) Report::Error (Message::SuSEConfigFailed());
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Get all aa-reports settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
    // TODO FIXME: your code here (fill the above mentioned variables)...
    return true;
}

/**
 * Dump the aa-reports settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    // TODO FIXME: your code here (return the above mentioned variables)...
    return $[];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */

global list Summary() {

    Settings = $[ ];
    string readSched = "1";
	integer key = 0;
    Settings["getcron"] = "1";
    Settings["readSched"] = "1";
    Settings["type"] = "schedRep";

    list<term> itemList = [];
    list <map> db = (list <map>) SCR::Read (.reports_new, Settings);

	if (db == nil) {
		db = (list<map>) SCR::Read(.reports_new, Settings);
	}

    foreach ( map record, db, {
        itemList = add( itemList, `item(`id(key), record["name"]:nil,
		record["sched"]:nil, record["time"]:nil, record["execday"]:nil,
		record["enabled"]:nil ));
		key = key + 1;
    });

    return itemList;
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    return $[ "install":[], "remove":[] ];
}

global define integer PopUpGoto(integer lastPage) {

    UI::OpenDialog(
        `VBox(
            `HBox(
                `TextEntry(`id(`gotoPage), _("Enter a Page to Move to."), "")
            ),
            `HBox(
                `PushButton(`id(`abort), `opt(`notify), _("&Abort") ),
                `PushButton(`id(`save), `opt(`notify), _("&Save") )
            )
        )
    );

    map event = $[];
    any id    = nil;
    integer igoto = nil;

    while( true ) {

        event = UI::WaitForEvent();
        id = event["ID"]:nil;

        if ( id == `abort || id == `close || id == `cancel ) {
            break;
        } else if ( id == `save ) {
            any agoto = UI::QueryWidget(`id(`gotoPage), `Value);
            igoto = tointeger(agoto);

            if ( igoto == nil || igoto < 1 || igoto > lastPage ) {
                Popup::Message("You must enter a value between 1 and " + lastPage + ".");
            } else {
                break;
            }
        }
    }

    UI::CloseDialog();

    return igoto;
}

// Reject duplicate report names
define boolean isDuplicateName(string name) {

    boolean dupe = false;
    map<string,string> args = $[ ];
    args["name"] = name;
    args["getdupe"] = "1";
    any aDupe = (any) SCR::Read (.reports_sched, args );

    if ( aDupe == "" || aDupe == nil ) {
        dupe = false;      // bad, but try for a non-breaking failure
    } else if ( aDupe == 1 ) {
        dupe = true;
    } else {
        dupe = false;
    }

    return dupe;
}

global define string getSortId(string type, any sortId) {

    string sortKey = "";

    if ( type == "aud" || type == "audRep") {
            if ( sortId == 0 ) sortKey = "prog";
			else if ( sortId == 1 ) sortKey = "profile";
			else if ( sortId == 2 ) sortKey = "pid";
			else if ( sortId == 3 ) sortKey = "state";
			else if ( sortId == 4 ) sortKey = "type";
    } else if (type == "ess" || type == "essRep" ) {
            if      ( sortId == 0 ) sortKey = "host";
			else if ( sortId == 1 ) sortKey = "numRejects";
			else if ( sortId == 2 ) sortKey = "numEvents";
			else if ( sortId == 3 ) sortKey = "sevMean";
			else if ( sortId == 4 ) sortKey = "sevHi";
    } else {
            if      ( sortId == 0 ) sortKey = "host";
			else if ( sortId == 1 ) sortKey = "time";
			else if ( sortId == 2 ) sortKey = "prog";
			else if ( sortId == 3 ) sortKey = "profile";
			else if ( sortId == 4 ) sortKey = "pid";
			else if ( sortId == 5 ) sortKey = "resource";
			else if ( sortId == 6 ) sortKey = "severity";
			else if ( sortId == 7 ) sortKey = "sdmode";
			else if ( sortId == 8 ) sortKey = "mode";
    }

    return sortKey;
}

// Get the name of the filter (header column) to sort by
global define string PopUpSort(string type) {

    term btnList = nil;

    if ( type == "aud" || type == "audRep") {
        btnList =
            `VBox(
            `Left(`RadioButton(`id(0), _("Program") )),
            `Left(`RadioButton(`id(1), _("Profile") )),
            `Left(`RadioButton(`id(2), _("PID") )),
            `Left(`RadioButton(`id(3), _("State") )),
            `Left(`RadioButton(`id(4), _("Type") ))
            );

    } else if (type == "ess" || type == "essRep" ) {
        btnList =
            `VBox(
            `Left(`RadioButton(`id(0), _("Host") )),
            `Left(`RadioButton(`id(1), _("Num. Rejects") )),
            `Left(`RadioButton(`id(2), _("Num. Events") )),
            `Left(`RadioButton(`id(3), _("Ave. Sev") )),
            `Left(`RadioButton(`id(4), _("High Sev") ))
            );
    } else {

        btnList =
            `VBox(
            // Sorting by host is no longer meaningful (due to sql changes)
            `Left(`RadioButton(`id(1), _("Date") )),
            `Left(`RadioButton(`id(2), _("Program") )),
            `Left(`RadioButton(`id(3), _("Profile") )),
            `Left(`RadioButton(`id(4), _("PID") )),
            `Left(`RadioButton(`id(5), _("Detail") )),
            `Left(`RadioButton(`id(6), _("Severity") )),
            `Left(`RadioButton(`id(7), _("Access Type") )),
            `Left(`RadioButton(`id(8), _("Mode") ))
            );
    }

    UI::OpenDialog(
        `VBox(
            `HBox(`RadioButtonGroup(`id(`sortKey), btnList)),
            `HBox(
                `PushButton(`id(`abort), _("&Abort") ),
                `PushButton(`id(`save), _("&Save") )
            )
        )
    );

    map event = $[];
    any id    = nil;
    string sortKey = nil;

    while( true ) {

        event = UI::WaitForEvent();
        id = event["ID"]:nil; // We'll need this often - cache it

        if ( id == `abort || id == `cancel || id == `close) {

            break;

        } else if (id == `save ) {

            any sortId = UI::QueryWidget(`id(`sortKey), `CurrentButton);

            /* sortKey needs to match the hash reference names in parseEventLog()
                && sortRecords() in Immunix::Reports.pm */
            sortKey = getSortId(type,sortId);
            break;

        }
    }

    UI::CloseDialog();
    return sortKey;
}

// Checks for valid path
global define boolean pathIsGood (string expPath) {
    map<any,any> fileTest = $[];
    fileTest["checkFile"] = "1";
    fileTest["file"] = expPath;

    any pathExists = SCR::Read(.reports_parse, fileTest);
    string spath = tostring(pathExists);

	if (spath == "1") { return true; }
	return false;
}

// Get and display info about the table item that's selected
global define void ResetTable () {
    integer itemselected =  ((integer) UI::QueryWidget(`id(`table), `CurrentItem) );
    string repName = (string) select((term) UI::QueryWidget(`id(`table), `Item(itemselected)), 1, "");

	// FIXME - replace below later
    //string repName = (string) UI::QueryWidget(`id(`table), `Item(itemselected))[1]:"";
	//term myItem = UI::QueryWidget(`id(`table), `Item(itemselected));
	//string repName = (string) myItem[1]:"";

	//string repName = getTableItem(`table);

	Settings = $[];
	Settings["repName"] = repName;
	Settings["get_summary"] = "1";

	map<string,any> verboseRep = (map<string,any>) SCR::Read(.reports_new, Settings);

	//if (isGui()) makeHtmlTable(verboseRep);
	//else makeHtmlList(verboseRep);

	string verboseError = "Unable to find information for report: " + repName;
	any averboseReportInfo = verboseRep["table"]:verboseError;
	string verboseReportInfo = tostring(averboseReportInfo);
    UI::ReplaceWidget(`verboseBox, `RichText(verboseReportInfo) );
}

global define void UpdateDateWidgets () {

	any asched = (any) UI::QueryWidget(`id(`runschedule), `Value);
	string sched = tostring(asched);

	if ( sched == "`monthly" ) {
	    UI::ChangeWidget(`id(`monthdate), `Enabled, true);
	    UI::ChangeWidget(`id(`weekday), `Enabled, false);
	    UI::ChangeWidget(`id(`hour), `Enabled, true);
	} else if (sched == "`weekly" ) {
	    UI::ChangeWidget(`id(`monthdate), `Enabled, false);
	    UI::ChangeWidget(`id(`weekday), `Enabled, true);
	    UI::ChangeWidget(`id(`hour), `Enabled, true);
	} else if (sched == "`daily" ) {
	    UI::ChangeWidget(`id(`monthdate), `Enabled, false);
	    UI::ChangeWidget(`id(`weekday), `Enabled, false);
	    UI::ChangeWidget(`id(`hour), `Enabled, true);

	} else if (sched == "`hourly" ) {
	    UI::ChangeWidget(`id(`monthdate), `Enabled, false);
	    UI::ChangeWidget(`id(`weekday), `Enabled, false);
	    UI::ChangeWidget(`id(`hour), `Enabled, false);
	} else {
		any check = UI::QueryWidget(`id(`runschedule), `Value);
		string scheck = tostring(check);
		y2milestone("Missing information about schedule period.  Unable 
		to update date & time widgets");
	}

}

// Grey out inappropriate paging buttons (in Run/View Reports)
global define void setPageButtons(integer curPage, integer lastPage) {

	if (lastPage <= 1 ) {
        UI::ChangeWidget(`id(`prev), `Enabled, false);
        UI::ChangeWidget(`id(`fwd), `Enabled, false);
        UI::ChangeWidget(`id(`goto), `Enabled, false);
	} else if (curPage <= 1 ) {
        UI::ChangeWidget(`id(`prev), `Enabled, false);
    } else if ( curPage >= lastPage ) {
        UI::ChangeWidget(`id(`fwd), `Enabled, false);
	} else {
		 UI::SetFocus(`id(`goto));
	}

	return;
}

// Gets data for next or previous page of current report
global define term turnReportPage (string name, integer curPage, string slastPage, map Settings) {

    list<term> reportList = [];

    string currentPage = tostring( curPage );
    Settings["name"] = name;
    Settings["page"] = currentPage;
    Settings["turnPage"] = "1";

    integer key = 1;

    list <map> db = (list <map>) SCR::Read (.logparse, Settings);

    // New map is a list, not a hash
    foreach ( map record, db, {
        reportList = add( reportList, `item( `id(key), record["host"]:nil, record["date"]:nil, record["prog"]:nil,
            record["profile"]:nil, record["pid"]:nil, record["severity"]:nil, record["mode"]:nil, record["resource"]:nil, record["sdmode"]:nil ));
        key = key + 1;
    });

	string myLabel = _("On Demand Event Report - Page ") + currentPage + _(" of ") + slastPage;

    term odForm =

	`Frame( `id(`odpage), myLabel,

		`VBox(
            `HBox(
                `VSpacing(10),
				`Table(`id(`table), `opt(`keepSorting, `immediate ), `header( _("Host"), _("Date"), _("Program"),
					_("Profile"), _("PID"), _("Severity"), _("Mode"), _("Detail"), _("Event Type") ), reportList),

                `VSpacing(0.5)
            ),
            `HSpacing(`opt(`hstretch), 1.0),
            `VSpacing(0.5),
            `HBox(
                `PushButton(`id(`prev), _("&Previous") ),
                `PushButton(`id(`psort), _("&Sort") ),
                `PushButton(`id(`fwd), _("&Forward") ),
                `PushButton(`id(`goto), _("&Go to Page") )
            ),
            `VSpacing(1)
    ));

	return odForm;
}

// Create map to send to perl agent after configuring report settings
global define map<string,string> prepSettings () {

	// Setup the data structures.
	boolean bydate =  (boolean) UI::QueryWidget(`id(`bydate), `Value);
	boolean expText = (boolean) UI::QueryWidget(`id(`exportText), `Value);
	boolean expHtml = (boolean) UI::QueryWidget(`id(`exportHtml), `Value);

	if ( expText == true ) Settings["exporttext"] = "true";
	if ( expHtml == true ) Settings["exporthtml"] = "true";

	string program_name = (string) UI::QueryWidget(`id(`prog), `Value);
    string profile = (string) UI::QueryWidget(`id(`prof), `Value);
    string pid = (string) UI::QueryWidget(`id(`pid), `Value);
    string sev = (string) UI::QueryWidget(`id(`sev), `Value);
    string res = (string) UI::QueryWidget(`id(`res), `Value);
	string sdmode = (string) UI::QueryWidget(`id(`sdmode), `Label);
	string mode = (string) UI::QueryWidget(`id(`mode), `Label);
	string exppath = (string) UI::QueryWidget(`id(`expPath), `Value);

	// de-i18n
	if ( sev == _("All") ) { sev = "All"; }
	if ( sev == _("U") ) { sev = "U"; }
	if ( sdmode == _("All") ) { sdmode = "All"; }
	if ( mode == _("All") ) { mode = "All"; }

	if (exppath != "" ) { Settings["exportPath"] = expPath; }
    if ( program_name != "" ) { Settings["prog"] = program_name; }
    if ( profile != "" ) { Settings["profile"] = profile; }
    if ( pid != "" ) { Settings["pid"] = pid; }
    if ( sev != "" && sev != "All" ) { Settings["severity"] = sev; }
    if ( res != "" ) { Settings["resource"] = res; }
    if ( sdmode != "" ) { Settings["sdmode"] = sdmode; }
    if ( mode != "" ) { Settings["mode"] = mode; }

    if ( bydate == true ) {

		integer start_hour = (integer) UI::QueryWidget(`id(`startHour), `Value);
		integer start_min  = (integer) UI::QueryWidget(`id(`startMin), `Value);
		string start_day   = (string) UI::QueryWidget(`id(`startDay), `Value);
		string start_month = (string) UI::QueryWidget(`id(`startMonth), `Value);
		integer start_year = (integer) UI::QueryWidget(`id(`startYear), `Value);
		integer end_hour   = (integer) UI::QueryWidget(`id(`endHour), `Value);
		integer end_min    = (integer) UI::QueryWidget(`id(`endMin), `Value);
		string end_day     = (string) UI::QueryWidget(`id(`endDay), `Value);
		string end_month   = (string) UI::QueryWidget(`id(`endMonth), `Value);
		integer end_year   = (integer) UI::QueryWidget(`id(`endYear), `Value);
		string start_time = tostring(start_hour) + ":" + tostring(start_min);
		string end_time   = tostring(end_hour)   + ":" + tostring(end_min);

		Settings["startday"]   = tostring(start_day);
		Settings["startmonth"] = tostring(start_month);
		Settings["startyear"]  = tostring(start_year);
		Settings["endday"]     = tostring(end_day);
		Settings["endmonth"]   = tostring(end_month);
		Settings["endyear"]    = tostring(end_year);
		Settings["starttime"]  = start_time;
		Settings["endtime"]    = end_time;

	}

	string expType = (string) UI::QueryWidget(`id(`expType), `Value);
    expPath = (string) UI::QueryWidget(`id(`expPath), `Value);

    if ( expType == _("csv") ) {
        Settings["exporttext"] = "1";
    } else if ( expType == _("html") ) {
        Settings["exporthtml"] = "1";
    } else if ( expType == _("Both") ) {
        Settings["exporttext"] = "1";
        Settings["exporthtml"] = "1";
    }

	Settings["exportPath"] = expPath;

	return Settings;
}

// Change form input into map for sending to perl
global define void configSettings () {

	map<string,string> tmpSettings = $[];
	tmpSettings["expPath"] = expPath;
    UI::ChangeWidget(`id(`expPath), `Value, expPath);

    string name = (string) UI::QueryWidget(`id(`name), `Value);
    any iHours = (any) UI::QueryWidget(`id(`hour), `Value);
    any iMins = (any) UI::QueryWidget(`id(`mins), `Value);
    string email1 = (string) UI::QueryWidget(`id(`email1), `Value);
    string email2 = (string) UI::QueryWidget(`id(`email2), `Value);
    string email3 = (string) UI::QueryWidget(`id(`email3), `Value);
    string hour = tostring( iHours );
    string mins = tostring( iMins );
    
    if ( UI::QueryWidget(`id(`exechourly), `Value) == true ) {
	    tmpSettings["schedule"] = "hourly";
	} else if ( UI::QueryWidget(`id(`execdaily), `Value) == true ) {
	    tmpSettings["schedule"] = "daily";
	} else if ( UI::QueryWidget(`id(`execweeky), `Value) == true ) {
	    tmpSettings["schedule"] = "weekly";
	} else if ( UI::QueryWidget(`id(`execmonthly), `Value) == true ) {
	    tmpSettings["schedule"] = "monthly";
	}

    if ( UI::QueryWidget(`id(`weekday), `Enabled) == true ) {
		tmpSettings["execday"] = (string) UI::QueryWidget(`id(`weekday), `Value);
	}

    if ( UI::QueryWidget(`id(`exptypeboth), `Value) == true ) {
        tmpSettings["csv"] = "1";
        tmpSettings["html"] = "1";
	} else if ( UI::QueryWidget(`id(`exptypecsv), `Value) == true ) {
        tmpSettings["csv"] = "1";
	} else if ( UI::QueryWidget(`id(`exptypehtml), `Value) == true ) {
        tmpSettings["html"] = "1";
	}

	// FIXME - move the next few lines to addSettings()
    string expType = (string) UI::QueryWidget(`id(`expType), `Value);

	// FIXME - Remove these - should be taken care of in AddSettings()
    tmpSettings["add"] = "1";
    tmpSettings["name"] = name;
    //tmpSettings["monthdate"] = monthdate;
    tmpSettings["hour"] = hour;
    tmpSettings["mins"] = mins;
    tmpSettings["email1"] = email1;
    tmpSettings["email2"] = email2;
    tmpSettings["email3"] = email3;

    // Confirm reasonable input on report names
    string checkName = filterchars(name, "`~!@#$%^&*()[{]};:'\",<>?/\|");
    integer nameLength = size(name);

    if ( regexpmatch(name, "  ") == true ) {
        Popup::Error( _("Only one contiguous space allowed in report names.") );
    } else if ( checkName != "" ) {
        Popup::Error( _("These characters are not allowed in report 
					names: \"`~!@#$%^&*()[{]};:'\",<>?/\|\"") );
    } else if ( nameLength > 128 ) {
        Popup::Error( _("Only 128 characters are allowed in report names.") );
    } else {
		if ( isDuplicateName(name)) Popup::Error( _("Each report name should be unique.") );
		else UpdateSettings(tmpSettings);

		// FIXME - rewrite or remove?
        //if ( isDuplicateName(name)) UI::ReplaceWidget(`addSchedRep, schedFilterForm() );
    }

}

// Follows configSettings() and adds the 2nd forms filter repDb to the map
global define void addFilterSettings () {
	string prog  = (string) UI::QueryWidget(`id(`prog), `Value);
    string prof = (string) UI::QueryWidget(`id(`prof), `Value);
    string pid = (string) UI::QueryWidget(`id(`pid), `Value);
    string res = (string) UI::QueryWidget(`id(`res), `Value);
    string sdmode = (string) UI::QueryWidget(`id(`sdmode), `Label);
    string mode = (string) UI::QueryWidget(`id(`mode), `Label);
    string sev = (string) UI::QueryWidget(`id(`sev), `Value);

    if ( sev == _("All") ) { sev = "-"; }

    Settings["getcron"] = "";
    Settings["prog"] = prog;
    Settings["prof"] = prof;
    Settings["pid"] = pid;
    Settings["sev"] = sev;
    Settings["res"] = res;
    Settings["sdmode"] = sdmode;
    Settings["mode"] = mode;
}

global define list<term> getArrayList(string type, string repPath) {

    Settings = $[ ];
    string readSched = "1";
    Settings["readSched"] = readSched;
    Settings["type"] = type;

	if ( repPath != "" ) Settings["repPath"] = repPath;

    list<term> itemList = [];
    integer key = 1;

    if ( type == "sir" || type == "ess" || type == "aud" ) {
        list <map> db = (list <map>) SCR::Read (.reports_parse, Settings);

        foreach ( map record, db, {
            any strName = record["name"]:nil;
            any strTime = record["time"]:nil;
            string name = tostring(strName);
            string mytime = tostring(strTime);
            itemList = add( itemList, `item( `id(key), record["name"]:nil, record["time"]:nil ));
            key = key + 1;
        });

    } else if (type == "schedRep") {

        Settings["getcron"] = "1";

        list <map> db = (list <map>) SCR::Read (.reports_sched, Settings);

        foreach ( map record, db, {
            itemList = add( itemList, `item( `id(key), record["name"]:nil, record["hour"]:nil, record["mins"]:nil,
                         record["wday"]:nil, record["mday"]:nil ));
            key = key + 1;
        });

    } else {
		Popup::Error( _("Unrecognized form request: ") + type );
    }

    return itemList;
}


/* For On Demand Reports
    - Returns list of terms corresponding to the type of report
***********************************************************************/
global define list<term> getReportList(string type, map Settings) {

    list<term> reportList = [];

	if ( type == "aud" ) {

		list <map> db = (list <map>) SCR::Read (.reports_confined, Settings);
		integer key = 1;

		foreach ( map repdata, db, {
			reportList = add( reportList, `item( `id(key), repdata["host"]:nil, repdata["date"]:nil,
				repdata["prog"]:nil, repdata["prof"]:nil, repdata["pid"]:nil, repdata["state"]:nil,
				repdata["type"]:nil ));
			key = key + 1;
		});

	} else if ( type == "ess" ) {

		list <map> db = (list <map>) SCR::Read (.reports_ess, Settings);
		integer key = 1;

		foreach ( map repdata, db, {
			reportList = add( reportList, `item( `id(key), repdata["host"]:nil,
				repdata["startdate"]:nil, repdata["enddate"]:nil, repdata["numRejects"]:nil,
				repdata["numEvents"]:nil, repdata["sevMean"]:nil, repdata["sevHi"]:nil ));
			key = key + 1;
		});

	} else {

		list <map> db = (list <map>) SCR::Read (.logparse, Settings);
		integer key = 1;

		foreach ( map repdata, db, {
			reportList = add( reportList, `item( `id(key), repdata["host"]:nil,
				repdata["date"]:nil, repdata["prog"]:nil, repdata["profile"]:nil,
				repdata["pid"]:nil,repdata["severity"]:nil, repdata["mode"]:nil,
				repdata["resource"]:nil, repdata["sdmode"]:nil  ));
			key = key + 1;
		});

		/* Original Stuff
           term fwdForm = turnReportPage(name,curPage,slastPage,Settings);
           Wizard::SetContentsButtons( _("AppArmor - Run Reports"), fwdForm,
			  formHelp, _("Back"), _("&Done") );
		   setPageButtons(curPage,lastPage);
		*/
	}

	return reportList;
}




/* EOF */
}
